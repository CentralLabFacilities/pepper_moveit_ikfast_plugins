/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-10-26 13:38:48.852033
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[3]);
x5=IKcos(j[2]);
x6=IKsin(j[2]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.987688482454592)*x2);
x11=((0.015)*x3);
x12=((0.15)*x6);
x13=((0.156433569372259)*x0);
x14=((0.987688482454592)*x0);
x15=((1.0)*x7);
x16=(x1*x2);
x17=(x3*x6);
x18=(x1*x5);
x19=(x0*x1);
x20=(x1*x13);
x21=(x0*x3*x5);
x22=(x2*x3*x5);
x23=((((-1.0)*x20))+x10);
x24=((((0.156433569372259)*x16))+x14);
x25=((-1.0)*x24);
x26=(x25*x6);
eetrans[0]=((-0.05702)+((x0*x11))+((x4*(((((-0.15)*x21))+((x12*x23))))))+(((0.00013)*x2))+((x7*(((((0.0234650354058389)*x2))+(((0.148153272368189)*x19))))))+(((0.1812)*x19)));
eetrans[1]=((-0.14974)+(((0.148153272368189)*x3*x7))+((x4*(((((-0.0234650354058389)*x17))+(((0.15)*x18))))))+(((-0.015)*x1))+(((0.1812)*x3)));
eetrans[2]=((0.22582)+((x7*(((((0.0234650354058389)*x0))+(((-0.148153272368189)*x16))))))+((x4*(((((-1.0)*x12*x25))+(((0.15)*x22))))))+(((-1.0)*x11*x2))+(((-0.1812)*x16))+(((0.00013)*x0)));
eerot[0]=(((x9*(((((-1.0)*x5*(((((-1.0)*x10))+x20))))+(((1.0)*x0*x17))))))+(((-1.0)*x8*(((((1.0)*x4*(((((-1.0)*x1*x14))+(((-0.156433569372259)*x2))))))+((x15*(((((-1.0)*x21))+((x23*x6)))))))))));
eerot[1]=(((x9*(((((-0.156433569372259)*x3*x5))+(((-1.0)*x1*x6))))))+((x8*(((((0.987688482454592)*x3*x4))+(((-1.0)*x15*(((((-0.156433569372259)*x17))+x18)))))))));
eerot[2]=(((x9*(((((-1.0)*x17*x2))+((x24*x5))))))+((x8*((((x7*(((((-1.0)*x22))+x26))))+((x4*(((((-1.0)*x1*x10))+x13)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((0.05702)+px);
new_r01=((-1.0)*r02);
new_py=((0.22582)+(((-1.0)*pz)));
new_r02=r01;
new_pz=((0.14974)+py);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x27=(px*r00);
IkReal x28=((0.1812)*r00);
IkReal x29=(pz*r02);
IkReal x30=(py*r01);
IkReal x31=((0.00013)*r01);
IkReal x32=((0.015)*r02);
IkReal x33=((0.3624)*px);
IkReal x34=((0.00026)*py);
IkReal x35=px*px;
IkReal x36=py*py;
IkReal x37=pz*pz;
IkReal x38=((0.03)*pz);
IkReal x39=((0.3624)*r01);
IkReal x40=((0.00026)*r00);
IkReal x41=((0.7248)*py);
IkReal x42=((0.00052)*px);
IkReal x43=((0.03)*r00);
IkReal x44=((0.3624)*r02);
IkReal x45=((0.06)*px);
IkReal x46=((0.7248)*pz);
IkReal x47=((((-1.0)*x40))+x39);
IkReal x48=((((-1.0)*x42))+x41);
IkReal x49=((((-1.0)*x44))+x43);
IkReal x50=((((-1.0)*x46))+x45);
IkReal x51=((((-1.0)*x44))+(((-1.0)*x43)));
IkReal x52=((((-1.0)*x45))+(((-1.0)*x46)));
IkReal x53=((((-1.0)*x40))+(((-1.0)*x39)));
IkReal x54=((((-1.0)*x42))+(((-1.0)*x41)));
IkReal x55=(x33+x34);
IkReal x56=(x32+x28);
IkReal x57=(x30+x27+x29);
IkReal x58=((0.0105584569)+x37+x36+x35);
IkReal x59=(x31+x57);
IkReal x60=((((-1.0)*x28))+x32+x59);
IkReal x61=((((-1.0)*x32))+x59+x28);
IkReal x62=((((-1.0)*x31))+x57+x56);
IkReal x63=((((-1.0)*x31))+x57+(((-1.0)*x56)));
IkReal x64=((((-1.0)*x33))+x38+x34+x58);
IkReal x65=((((-1.0)*x38))+x58+x55);
IkReal x66=((((-1.0)*x34))+x38+x33+x58);
IkReal x67=((((-1.0)*x38))+x58+(((-1.0)*x55)));
IkReal gconst0=x60;
IkReal gconst1=x51;
IkReal gconst2=x61;
IkReal gconst3=x64;
IkReal gconst4=x52;
IkReal gconst5=x65;
IkReal gconst6=x60;
IkReal gconst7=x51;
IkReal gconst8=x61;
IkReal gconst9=x64;
IkReal gconst10=x52;
IkReal gconst11=x65;
IkReal gconst12=x53;
IkReal gconst13=x47;
IkReal gconst14=x54;
IkReal gconst15=x48;
IkReal gconst16=x53;
IkReal gconst17=x47;
IkReal gconst18=x54;
IkReal gconst19=x48;
IkReal gconst20=x62;
IkReal gconst21=x49;
IkReal gconst22=x63;
IkReal gconst23=x66;
IkReal gconst24=x50;
IkReal gconst25=x67;
IkReal gconst26=x62;
IkReal gconst27=x49;
IkReal gconst28=x63;
IkReal gconst29=x66;
IkReal gconst30=x50;
IkReal gconst31=x67;
IkReal x68=(gconst26*gconst31);
IkReal x69=(gconst13*gconst23);
IkReal x70=(gconst19*gconst6);
IkReal x71=(gconst0*gconst5);
IkReal x72=((0.06)*r01);
IkReal x73=(gconst7*gconst9);
IkReal x74=(gconst25*gconst29);
IkReal x75=(gconst16*gconst31);
IkReal x76=(gconst2*gconst4);
IkReal x77=(gconst18*gconst7);
IkReal x78=(gconst14*gconst22);
IkReal x79=(gconst21*gconst26);
IkReal x80=(gconst22*gconst23);
IkReal x81=(gconst19*gconst26);
IkReal x82=(gconst2*gconst3);
IkReal x83=(gconst28*gconst29);
IkReal x84=((0.12)*py);
IkReal x85=(gconst11*gconst6);
IkReal x86=((1.0)*gconst9);
IkReal x87=(gconst13*gconst4);
IkReal x88=(gconst21*gconst25);
IkReal x89=(gconst16*gconst30);
IkReal x90=(gconst18*gconst8);
IkReal x91=(gconst11*gconst16);
IkReal x92=(gconst27*gconst29);
IkReal x93=(gconst13*gconst24);
IkReal x94=((1.0)*gconst5);
IkReal x95=(gconst15*gconst20);
IkReal x96=(gconst26*gconst30);
IkReal x97=((1.0)*gconst15);
IkReal x98=(gconst14*gconst2);
IkReal x99=(gconst20*gconst28);
IkReal x100=(gconst5*gconst9);
IkReal x101=(gconst5*gconst6);
IkReal x102=((1.0)*gconst18);
IkReal x103=(gconst8*gconst9);
IkReal x104=(gconst22*gconst24);
IkReal x105=(gconst13*gconst3);
IkReal x106=(gconst10*gconst16);
IkReal x107=((1.0)*gconst20*gconst25);
IkReal x108=((1.0)*gconst10*gconst6);
IkReal x109=((1.0)*x104);
IkReal x110=(gconst1*gconst10*gconst6);
op[0]=((((-1.0)*x80*x83))+(((-1.0)*gconst21*gconst27*x74))+((gconst25*gconst30*x79))+((x74*x99))+((x68*x80))+(((-1.0)*x107*x68))+(((-1.0)*x109*x96))+((x104*x92)));
op[1]=(((gconst17*gconst20*x74))+(((-1.0)*gconst17*gconst29*x80))+((x92*x93))+((gconst21*x72*x74))+(((-1.0)*x78*x83))+(((-1.0)*x93*x96))+(((-1.0)*gconst21*x92*x97))+((gconst15*gconst30*x79))+((gconst26*x104*x84))+(((-1.0)*gconst29*x104*x72))+((x68*x78))+((gconst22*x84*x96))+(((-1.0)*gconst27*x102*x88))+((gconst27*x72*x74))+((x68*x69))+((gconst12*gconst28*x74))+((gconst18*gconst25*x99))+(((-1.0)*gconst22*x84*x92))+((x75*x80))+(((-1.0)*x69*x83))+((x88*x89))+(((-1.0)*gconst25*x72*x96))+((gconst18*gconst27*x104))+((x80*x81))+(((-1.0)*x107*x75))+(((-1.0)*gconst28*x102*x80))+(((-1.0)*x68*x95))+((x83*x95))+(((-1.0)*x109*x89))+(((-1.0)*gconst12*gconst25*x68))+(((-1.0)*x107*x81))+(((-1.0)*gconst25*x79*x84)));
op[2]=((((0.12)*gconst16*gconst22*gconst24*py))+(((0.12)*gconst13*gconst26*gconst30*py))+(((-1.0)*gconst21*gconst25*gconst29*gconst7))+(((0.0072)*gconst25*gconst26*py*r01))+((gconst10*gconst21*gconst25*gconst26))+((gconst20*gconst25*gconst29*gconst8))+((gconst2*gconst24*gconst27*gconst29))+(((0.12)*gconst16*gconst22*gconst30*py))+(((-0.0036)*gconst25*gconst29*(r01*r01)))+(((0.06)*gconst15*gconst21*gconst29*r01))+((gconst17*gconst18*gconst20*gconst25))+((gconst11*gconst22*gconst23*gconst26))+((gconst12*gconst18*gconst25*gconst28))+(((-0.12)*gconst15*gconst21*gconst26*py))+(((-1.0)*gconst22*gconst23*gconst28*gconst9))+((gconst13*gconst16*gconst23*gconst31))+(((0.0072)*gconst22*gconst29*py*r01))+((gconst16*gconst19*gconst22*gconst23))+(((-1.0)*gconst17*gconst18*gconst22*gconst23))+((gconst2*gconst23*gconst26*gconst31))+((gconst21*gconst25*gconst30*gconst6))+(((-1.0)*gconst2*gconst23*gconst28*gconst29))+((gconst22*gconst24*gconst27*gconst9))+(((-1.0)*gconst22*gconst26*gconst30*gconst4))+(((0.12)*gconst13*gconst24*gconst26*py))+((gconst14*gconst19*gconst22*gconst26))+(((-1.0)*gconst1*gconst25*gconst27*gconst29))+(((-1.0)*gconst20*gconst26*gconst31*gconst5))+(((-1.0)*gconst13*gconst16*gconst24*gconst30))+(((-1.0)*gconst10*gconst22*gconst24*gconst26))+(((-0.0144)*gconst22*gconst26*(py*py)))+((gconst1*gconst25*gconst26*gconst30))+(((0.06)*gconst18*gconst25*gconst27*r01))+(((-0.06)*gconst16*gconst25*gconst30*r01))+(((-1.0)*gconst20*gconst25*gconst31*gconst6))+(((-0.12)*gconst16*gconst21*gconst25*py))+((gconst15*gconst18*gconst20*gconst28))+(((-1.0)*gconst14*gconst18*gconst22*gconst28))+((gconst15*gconst16*gconst21*gconst30))+((gconst12*gconst17*gconst25*gconst29))+((gconst20*gconst28*gconst29*gconst5))+((gconst21*gconst26*gconst30*gconst5))+((gconst22*gconst27*gconst29*gconst4))+(((0.06)*gconst18*gconst21*gconst25*r01))+((gconst22*gconst24*gconst29*gconst7))+((gconst22*gconst26*gconst3*gconst31))+(((-1.0)*gconst22*gconst28*gconst29*gconst3))+(((-1.0)*gconst13*gconst17*gconst23*gconst29))+(((-1.0)*gconst15*gconst19*gconst20*gconst26))+((gconst12*gconst15*gconst28*gconst29))+(((-1.0)*gconst12*gconst15*gconst26*gconst31))+(((-1.0)*gconst2*gconst24*gconst26*gconst30))+((gconst13*gconst18*gconst24*gconst27))+(((-1.0)*gconst11*gconst20*gconst25*gconst26))+((gconst22*gconst23*gconst31*gconst6))+(((-1.0)*gconst12*gconst16*gconst25*gconst31))+(((-1.0)*gconst16*gconst19*gconst20*gconst25))+(((-0.06)*gconst15*gconst26*gconst30*r01))+(((-1.0)*gconst13*gconst14*gconst28*gconst29))+((gconst14*gconst16*gconst22*gconst31))+((gconst15*gconst17*gconst20*gconst29))+(((-1.0)*gconst15*gconst16*gconst20*gconst31))+(((-1.0)*gconst22*gconst24*gconst30*gconst6))+(((-0.06)*gconst18*gconst22*gconst24*r01))+(((-1.0)*gconst0*gconst25*gconst26*gconst31))+(((0.06)*gconst15*gconst27*gconst29*r01))+(((-0.12)*gconst13*gconst27*gconst29*py))+((gconst20*gconst25*gconst28*gconst9))+(((-1.0)*gconst14*gconst17*gconst22*gconst29))+(((-1.0)*gconst21*gconst27*gconst29*gconst5))+(((-1.0)*gconst21*gconst25*gconst27*gconst9))+(((-0.12)*gconst18*gconst22*gconst27*py))+(((-1.0)*gconst15*gconst18*gconst21*gconst27))+((gconst13*gconst19*gconst23*gconst26))+((gconst13*gconst14*gconst26*gconst31))+(((-0.06)*gconst13*gconst24*gconst29*r01))+(((-1.0)*gconst13*gconst18*gconst23*gconst28))+((gconst0*gconst25*gconst28*gconst29))+(((-1.0)*gconst12*gconst19*gconst25*gconst26))+(((-1.0)*gconst22*gconst23*gconst29*gconst8)));
op[3]=((((-1.0)*gconst14*gconst2*gconst28*gconst29))+(((-1.0)*gconst19*gconst20*gconst26*gconst5))+((gconst19*gconst2*gconst23*gconst26))+((gconst15*gconst21*gconst30*gconst6))+(((-1.0)*gconst11*gconst16*gconst20*gconst25))+((gconst16*gconst21*gconst30*gconst5))+(((-1.0)*gconst19*gconst20*gconst25*gconst6))+(((0.0072)*gconst16*gconst25*py*r01))+((gconst0*gconst15*gconst28*gconst29))+(((-1.0)*gconst15*gconst21*gconst27*gconst9))+(((-1.0)*gconst12*gconst26*gconst31*gconst5))+((gconst15*gconst20*gconst29*gconst8))+((gconst14*gconst2*gconst26*gconst31))+(((-1.0)*gconst18*gconst22*gconst23*gconst8))+(((-0.12)*gconst2*gconst27*gconst29*py))+((gconst13*gconst24*gconst27*gconst9))+(((0.0072)*gconst15*gconst26*py*r01))+((gconst13*gconst24*gconst29*gconst7))+((gconst18*gconst22*gconst27*gconst4))+(((-1.0)*gconst11*gconst12*gconst25*gconst26))+(((-0.06)*gconst2*gconst24*gconst29*r01))+((gconst17*gconst20*gconst25*gconst9))+(((-0.06)*gconst22*gconst29*gconst4*r01))+(((0.06)*gconst25*gconst29*gconst7*r01))+(((0.06)*gconst15*gconst18*gconst27*r01))+(((-0.0036)*gconst15*gconst29*(r01*r01)))+(((-0.06)*gconst13*gconst18*gconst24*r01))+((gconst12*gconst25*gconst29*gconst8))+(((-0.06)*gconst26*gconst30*gconst5*r01))+(((-1.0)*gconst18*gconst21*gconst27*gconst5))+((gconst18*gconst22*gconst24*gconst7))+((gconst18*gconst20*gconst25*gconst8))+(((-0.06)*gconst15*gconst16*gconst30*r01))+(((-1.0)*gconst17*gconst2*gconst23*gconst29))+(((0.06)*gconst1*gconst25*gconst29*r01))+(((0.06)*gconst27*gconst29*gconst5*r01))+(((-1.0)*gconst13*gconst24*gconst30*gconst6))+((gconst11*gconst16*gconst22*gconst23))+((gconst13*gconst16*gconst19*gconst23))+(((-0.0036)*gconst18*gconst25*(r01*r01)))+((gconst12*gconst25*gconst28*gconst9))+(((-1.0)*gconst11*gconst15*gconst20*gconst26))+(((-1.0)*gconst12*gconst25*gconst31*gconst6))+(((0.0072)*gconst13*gconst29*py*r01))+((gconst17*gconst20*gconst29*gconst5))+((gconst15*gconst20*gconst28*gconst9))+(((-1.0)*gconst15*gconst16*gconst19*gconst20))+(((0.12)*gconst10*gconst22*gconst26*py))+((gconst13*gconst26*gconst3*gconst31))+(((-1.0)*gconst0*gconst19*gconst25*gconst26))+((gconst18*gconst2*gconst24*gconst27))+((gconst10*gconst15*gconst21*gconst26))+(((0.06)*gconst21*gconst29*gconst5*r01))+(((0.12)*gconst13*gconst16*gconst30*py))+(((-1.0)*gconst1*gconst15*gconst27*gconst29))+(((-1.0)*gconst16*gconst22*gconst30*gconst4))+(((-1.0)*gconst18*gconst22*gconst28*gconst3))+(((-1.0)*gconst12*gconst16*gconst19*gconst25))+(((-1.0)*gconst10*gconst16*gconst22*gconst24))+((gconst11*gconst13*gconst23*gconst26))+(((-0.0144)*gconst13*gconst26*(py*py)))+(((-0.12)*gconst21*gconst25*gconst6*py))+(((-1.0)*gconst18*gconst2*gconst23*gconst28))+(((-0.12)*gconst22*gconst29*gconst7*py))+(((-0.12)*gconst21*gconst26*gconst5*py))+(((-0.0144)*gconst16*gconst22*(py*py)))+(((-1.0)*gconst13*gconst14*gconst18*gconst28))+(((0.12)*gconst22*gconst26*gconst4*py))+((gconst1*gconst15*gconst26*gconst30))+(((-1.0)*gconst12*gconst15*gconst19*gconst26))+(((-1.0)*gconst17*gconst22*gconst23*gconst9))+(((-0.12)*gconst13*gconst18*gconst27*py))+(((-1.0)*gconst15*gconst20*gconst31*gconst6))+(((-1.0)*gconst1*gconst18*gconst25*gconst27))+(((-1.0)*gconst13*gconst17*gconst18*gconst23))+(((0.12)*gconst13*gconst16*gconst24*py))+(((-1.0)*gconst15*gconst21*gconst29*gconst7))+(((-1.0)*gconst14*gconst17*gconst18*gconst22))+((gconst1*gconst16*gconst25*gconst30))+(((0.06)*gconst21*gconst25*gconst9*r01))+(((-1.0)*gconst18*gconst21*gconst25*gconst7))+((gconst12*gconst15*gconst18*gconst28))+(((-1.0)*gconst13*gconst23*gconst28*gconst9))+((gconst13*gconst23*gconst31*gconst6))+(((-1.0)*gconst13*gconst23*gconst29*gconst8))+(((-1.0)*gconst17*gconst22*gconst29*gconst3))+((gconst13*gconst27*gconst29*gconst4))+((gconst16*gconst22*gconst3*gconst31))+(((-0.12)*gconst15*gconst16*gconst21*py))+(((-1.0)*gconst16*gconst20*gconst31*gconst5))+(((-1.0)*gconst13*gconst14*gconst17*gconst29))+(((-0.12)*gconst22*gconst27*gconst9*py))+((gconst19*gconst22*gconst23*gconst6))+(((-1.0)*gconst12*gconst15*gconst16*gconst31))+(((-1.0)*gconst13*gconst26*gconst30*gconst4))+((gconst0*gconst17*gconst25*gconst29))+((gconst16*gconst2*gconst23*gconst31))+((gconst12*gconst28*gconst29*gconst5))+(((-0.12)*gconst1*gconst25*gconst26*py))+(((-0.06)*gconst22*gconst24*gconst9*r01))+(((0.12)*gconst22*gconst30*gconst6*py))+((gconst15*gconst17*gconst18*gconst20))+(((0.12)*gconst2*gconst24*gconst26*py))+(((-1.0)*gconst0*gconst16*gconst25*gconst31))+((gconst13*gconst14*gconst16*gconst31))+(((-1.0)*gconst10*gconst13*gconst24*gconst26))+(((0.12)*gconst2*gconst26*gconst30*py))+((gconst13*gconst14*gconst19*gconst26))+((gconst18*gconst20*gconst28*gconst5))+(((-0.06)*gconst25*gconst30*gconst6*r01))+((gconst11*gconst14*gconst22*gconst26))+((gconst12*gconst17*gconst18*gconst25))+(((-1.0)*gconst13*gconst28*gconst29*gconst3))+((gconst10*gconst16*gconst21*gconst25))+(((-1.0)*gconst14*gconst22*gconst28*gconst9))+(((0.0072)*gconst18*gconst22*py*r01))+((gconst12*gconst15*gconst17*gconst29))+(((0.12)*gconst22*gconst24*gconst6*py))+(((0.06)*gconst25*gconst27*gconst9*r01))+(((-1.0)*gconst16*gconst2*gconst24*gconst30))+((gconst14*gconst22*gconst31*gconst6))+(((0.06)*gconst15*gconst18*gconst21*r01))+((gconst19*gconst22*gconst26*gconst3))+(((-1.0)*gconst14*gconst22*gconst29*gconst8))+((gconst0*gconst18*gconst25*gconst28))+((gconst14*gconst16*gconst19*gconst22))+(((-0.06)*gconst10*gconst25*gconst26*r01))+(((-1.0)*gconst0*gconst15*gconst26*gconst31)));
op[4]=(((gconst0*gconst25*gconst28*gconst9))+(((-0.06)*gconst13*gconst24*gconst9*r01))+(((-0.0036)*gconst29*gconst5*(r01*r01)))+((gconst11*gconst13*gconst16*gconst23))+(((-1.0)*gconst10*gconst13*gconst16*gconst24))+((gconst11*gconst22*gconst26*gconst3))+((gconst1*gconst10*gconst25*gconst26))+(((-1.0)*gconst1*gconst15*gconst18*gconst27))+((gconst16*gconst19*gconst2*gconst23))+(((0.06)*gconst15*gconst27*gconst9*r01))+((gconst2*gconst27*gconst29*gconst4))+(((-0.12)*gconst16*gconst21*gconst5*py))+(((-0.0144)*gconst13*gconst16*(py*py)))+(((0.12)*gconst16*gconst2*gconst30*py))+(((-1.0)*gconst14*gconst18*gconst2*gconst28))+((gconst11*gconst22*gconst23*gconst6))+(((-1.0)*gconst2*gconst28*gconst29*gconst3))+(((-1.0)*gconst16*gconst19*gconst20*gconst5))+(((0.12)*gconst13*gconst24*gconst6*py))+(((-1.0)*gconst13*gconst16*gconst30*gconst4))+((gconst1*gconst25*gconst30*gconst6))+((gconst0*gconst28*gconst29*gconst5))+(((-1.0)*gconst13*gconst18*gconst28*gconst3))+((gconst20*gconst28*gconst5*gconst9))+(((-1.0)*gconst12*gconst19*gconst26*gconst5))+((gconst21*gconst30*gconst5*gconst6))+(((-0.06)*gconst10*gconst16*gconst25*r01))+(((0.12)*gconst13*gconst26*gconst4*py))+(((-0.12)*gconst13*gconst29*gconst7*py))+(((-0.0144)*gconst22*gconst6*(py*py)))+(((-0.12)*gconst15*gconst21*gconst6*py))+(((-1.0)*gconst0*gconst11*gconst25*gconst26))+((gconst14*gconst19*gconst22*gconst6))+((gconst13*gconst19*gconst26*gconst3))+(((0.0072)*gconst25*gconst6*py*r01))+((gconst0*gconst15*gconst18*gconst28))+(((-1.0)*gconst11*gconst20*gconst25*gconst6))+((gconst0*gconst25*gconst29*gconst8))+(((-1.0)*gconst2*gconst26*gconst30*gconst4))+(((-1.0)*gconst10*gconst22*gconst24*gconst6))+(((-1.0)*gconst14*gconst17*gconst22*gconst9))+((gconst17*gconst18*gconst20*gconst5))+((gconst1*gconst26*gconst30*gconst5))+(((-1.0)*gconst15*gconst18*gconst21*gconst7))+(((-0.06)*gconst18*gconst2*gconst24*r01))+(((-1.0)*gconst17*gconst18*gconst2*gconst23))+(((-1.0)*gconst15*gconst19*gconst20*gconst6))+(((0.06)*gconst15*gconst21*gconst9*r01))+(((-1.0)*gconst12*gconst19*gconst25*gconst6))+(((-1.0)*gconst2*gconst24*gconst30*gconst6))+(((-0.0144)*gconst2*gconst26*(py*py)))+(((-0.0036)*gconst25*gconst9*(r01*r01)))+(((-0.0036)*gconst15*gconst18*(r01*r01)))+((gconst15*gconst18*gconst20*gconst8))+(((-0.12)*gconst13*gconst27*gconst9*py))+((gconst13*gconst18*gconst27*gconst4))+(((0.12)*gconst10*gconst16*gconst22*py))+((gconst22*gconst24*gconst7*gconst9))+(((-0.06)*gconst15*gconst30*gconst6*r01))+(((-0.06)*gconst13*gconst29*gconst4*r01))+((gconst22*gconst27*gconst4*gconst9))+(((-1.0)*gconst0*gconst25*gconst31*gconst6))+(((0.0072)*gconst15*gconst16*py*r01))+((gconst1*gconst15*gconst16*gconst30))+((gconst2*gconst23*gconst31*gconst6))+(((-0.12)*gconst1*gconst15*gconst26*py))+(((-1.0)*gconst21*gconst29*gconst5*gconst7))+(((-1.0)*gconst1*gconst27*gconst29*gconst5))+((gconst14*gconst16*gconst2*gconst31))+(((-1.0)*gconst20*gconst31*gconst5*gconst6))+((gconst22*gconst29*gconst4*gconst7))+((gconst20*gconst25*gconst8*gconst9))+((gconst15*gconst17*gconst20*gconst9))+(((-0.12)*gconst18*gconst2*gconst27*py))+(((-1.0)*gconst1*gconst25*gconst27*gconst9))+(((-1.0)*gconst0*gconst15*gconst19*gconst26))+((gconst2*gconst24*gconst29*gconst7))+(((-1.0)*gconst14*gconst18*gconst22*gconst8))+((gconst14*gconst19*gconst2*gconst26))+(((0.06)*gconst15*gconst29*gconst7*r01))+(((-1.0)*gconst0*gconst16*gconst19*gconst25))+(((-0.06)*gconst16*gconst30*gconst5*r01))+(((-1.0)*gconst22*gconst23*gconst8*gconst9))+(((-1.0)*gconst13*gconst14*gconst29*gconst8))+(((0.0072)*gconst2*gconst29*py*r01))+(((-1.0)*gconst0*gconst26*gconst31*gconst5))+((gconst13*gconst16*gconst3*gconst31))+(((-1.0)*gconst11*gconst12*gconst15*gconst26))+(((-1.0)*gconst17*gconst18*gconst22*gconst3))+(((-1.0)*gconst21*gconst25*gconst7*gconst9))+(((-1.0)*gconst10*gconst22*gconst26*gconst4))+(((-0.06)*gconst18*gconst22*gconst4*r01))+((gconst0*gconst17*gconst18*gconst25))+(((-1.0)*gconst13*gconst18*gconst23*gconst8))+((gconst11*gconst14*gconst16*gconst22))+(((-1.0)*gconst22*gconst28*gconst3*gconst9))+(((-0.12)*gconst1*gconst16*gconst25*py))+((gconst16*gconst19*gconst22*gconst3))+(((0.12)*gconst13*gconst30*gconst6*py))+(((-1.0)*gconst14*gconst17*gconst2*gconst29))+(((-1.0)*gconst13*gconst14*gconst28*gconst9))+(((-1.0)*gconst12*gconst15*gconst31*gconst6))+(((-1.0)*gconst12*gconst15*gconst16*gconst19))+(((0.0072)*gconst22*gconst9*py*r01))+(((-1.0)*gconst11*gconst15*gconst16*gconst20))+(((-1.0)*gconst11*gconst12*gconst16*gconst25))+(((0.12)*gconst10*gconst13*gconst26*py))+(((0.06)*gconst18*gconst25*gconst7*r01))+((gconst20*gconst29*gconst5*gconst8))+(((0.06)*gconst18*gconst27*gconst5*r01))+(((-1.0)*gconst13*gconst17*gconst23*gconst9))+((gconst2*gconst26*gconst3*gconst31))+(((0.12)*gconst16*gconst22*gconst4*py))+(((-1.0)*gconst13*gconst14*gconst17*gconst18))+(((-1.0)*gconst22*gconst29*gconst3*gconst8))+((gconst11*gconst2*gconst23*gconst26))+((gconst10*gconst21*gconst25*gconst6))+(((0.12)*gconst16*gconst2*gconst24*py))+(((0.06)*gconst1*gconst15*gconst29*r01))+((gconst10*gconst15*gconst16*gconst21))+((gconst10*gconst21*gconst26*gconst5))+(((0.0072)*gconst13*gconst18*py*r01))+(((0.06)*gconst1*gconst18*gconst25*r01))+((gconst13*gconst19*gconst23*gconst6))+(((-1.0)*gconst2*gconst23*gconst29*gconst8))+((gconst2*gconst24*gconst27*gconst9))+((gconst13*gconst14*gconst31*gconst6))+(((-0.06)*gconst10*gconst15*gconst26*r01))+((gconst12*gconst18*gconst25*gconst8))+(((-1.0)*gconst0*gconst15*gconst16*gconst31))+(((-1.0)*gconst21*gconst27*gconst5*gconst9))+((gconst0*gconst15*gconst17*gconst29))+((gconst11*gconst13*gconst14*gconst26))+(((-1.0)*gconst10*gconst2*gconst24*gconst26))+((gconst12*gconst15*gconst17*gconst18))+((gconst12*gconst18*gconst28*gconst5))+((gconst12*gconst17*gconst29*gconst5))+(((-1.0)*gconst2*gconst23*gconst28*gconst9))+((gconst12*gconst15*gconst29*gconst8))+(((0.0072)*gconst26*gconst5*py*r01))+(((-1.0)*gconst22*gconst30*gconst4*gconst6))+(((0.06)*gconst18*gconst21*gconst5*r01))+((gconst12*gconst15*gconst28*gconst9))+((gconst12*gconst17*gconst25*gconst9))+(((-1.0)*gconst11*gconst20*gconst26*gconst5))+(((-1.0)*gconst12*gconst16*gconst31*gconst5))+(((-1.0)*gconst13*gconst17*gconst29*gconst3))+(((-0.12)*gconst18*gconst22*gconst7*py))+((gconst22*gconst3*gconst31*gconst6))+(((-1.0)*gconst1*gconst25*gconst29*gconst7))+((gconst13*gconst18*gconst24*gconst7))+((gconst13*gconst14*gconst16*gconst19)));
op[5]=((((-1.0)*gconst13*gconst30*gconst4*gconst6))+((gconst12*gconst25*gconst8*gconst9))+(((-1.0)*gconst13*gconst17*gconst18*gconst3))+(((0.12)*gconst2*gconst24*gconst6*py))+((gconst13*gconst29*gconst4*gconst7))+(((-1.0)*gconst17*gconst2*gconst23*gconst9))+((gconst1*gconst15*gconst30*gconst6))+((gconst11*gconst14*gconst22*gconst6))+(((-1.0)*gconst10*gconst16*gconst2*gconst24))+((gconst11*gconst13*gconst23*gconst6))+(((0.12)*gconst2*gconst26*gconst4*py))+(((-1.0)*gconst13*gconst14*gconst17*gconst9))+(((-1.0)*gconst1*gconst18*gconst25*gconst7))+(((-0.12)*gconst21*gconst5*gconst6*py))+(((-1.0)*gconst10*gconst13*gconst26*gconst4))+(((0.0072)*gconst18*gconst2*py*r01))+((gconst18*gconst2*gconst24*gconst7))+((gconst14*gconst2*gconst31*gconst6))+((gconst19*gconst22*gconst3*gconst6))+(((0.06)*gconst27*gconst5*gconst9*r01))+(((-1.0)*gconst12*gconst31*gconst5*gconst6))+(((0.06)*gconst1*gconst29*gconst5*r01))+((gconst12*gconst17*gconst18*gconst5))+(((-1.0)*gconst13*gconst28*gconst3*gconst9))+(((-1.0)*gconst12*gconst16*gconst19*gconst5))+(((-1.0)*gconst0*gconst19*gconst25*gconst6))+(((0.06)*gconst21*gconst5*gconst9*r01))+((gconst16*gconst2*gconst3*gconst31))+((gconst1*gconst16*gconst30*gconst5))+(((0.0072)*gconst15*gconst6*py*r01))+(((-0.06)*gconst2*gconst29*gconst4*r01))+((gconst13*gconst14*gconst19*gconst6))+(((-0.0144)*gconst16*gconst2*(py*py)))+((gconst10*gconst15*gconst21*gconst6))+(((-1.0)*gconst0*gconst19*gconst26*gconst5))+((gconst11*gconst16*gconst2*gconst23))+((gconst11*gconst14*gconst2*gconst26))+(((-1.0)*gconst13*gconst14*gconst18*gconst8))+((gconst0*gconst18*gconst25*gconst8))+((gconst10*gconst16*gconst21*gconst5))+((gconst0*gconst17*gconst29*gconst5))+(((-0.06)*gconst22*gconst4*gconst9*r01))+((gconst1*gconst10*gconst16*gconst25))+(((-1.0)*gconst17*gconst22*gconst3*gconst9))+((gconst19*gconst2*gconst23*gconst6))+((gconst17*gconst20*gconst5*gconst9))+(((0.0072)*gconst13*gconst9*py*r01))+(((-0.12)*gconst2*gconst29*gconst7*py))+((gconst0*gconst18*gconst28*gconst5))+((gconst18*gconst2*gconst27*gconst4))+(((-1.0)*gconst13*gconst29*gconst3*gconst8))+(((-1.0)*gconst11*gconst15*gconst20*gconst6))+((gconst13*gconst24*gconst7*gconst9))+((gconst13*gconst16*gconst19*gconst3))+(((-0.06)*gconst13*gconst18*gconst4*r01))+(((-1.0)*gconst13*gconst23*gconst8*gconst9))+(((-0.0036)*gconst18*gconst5*(r01*r01)))+(((-1.0)*gconst18*gconst2*gconst23*gconst8))+((gconst12*gconst15*gconst18*gconst8))+(((-0.0144)*gconst13*gconst6*(py*py)))+(((-1.0)*gconst0*gconst11*gconst16*gconst25))+(((0.12)*gconst2*gconst30*gconst6*py))+(((0.12)*gconst10*gconst13*gconst16*py))+((gconst12*gconst29*gconst5*gconst8))+((gconst18*gconst20*gconst5*gconst8))+(((-1.0)*gconst18*gconst21*gconst5*gconst7))+(((0.06)*gconst29*gconst5*gconst7*r01))+(((-1.0)*gconst14*gconst2*gconst29*gconst8))+(((-1.0)*gconst11*gconst16*gconst20*gconst5))+(((-0.12)*gconst1*gconst15*gconst16*py))+(((-0.06)*gconst10*gconst25*gconst6*r01))+(((-1.0)*gconst11*gconst12*gconst15*gconst16))+((gconst13*gconst3*gconst31*gconst6))+((gconst11*gconst13*gconst26*gconst3))+(((-1.0)*gconst11*gconst12*gconst26*gconst5))+(((0.06)*gconst15*gconst18*gconst7*r01))+(((-1.0)*gconst18*gconst2*gconst28*gconst3))+(((-1.0)*gconst1*gconst18*gconst27*gconst5))+(((-1.0)*gconst1*gconst15*gconst27*gconst9))+(((-1.0)*gconst14*gconst2*gconst28*gconst9))+(((-1.0)*gconst14*gconst17*gconst18*gconst2))+(((-1.0)*gconst11*gconst12*gconst25*gconst6))+(((-0.06)*gconst10*gconst15*gconst16*r01))+(((0.0072)*gconst16*gconst5*py*r01))+(((0.06)*gconst1*gconst25*gconst9*r01))+(((-0.12)*gconst1*gconst25*gconst6*py))+(((-1.0)*gconst0*gconst15*gconst16*gconst19))+((gconst12*gconst15*gconst17*gconst9))+((gconst15*gconst20*gconst8*gconst9))+(((-1.0)*gconst18*gconst22*gconst3*gconst8))+((gconst12*gconst28*gconst5*gconst9))+(((-0.06)*gconst2*gconst24*gconst9*r01))+(((-0.12)*gconst2*gconst27*gconst9*py))+((gconst11*gconst16*gconst22*gconst3))+(((-1.0)*gconst10*gconst13*gconst24*gconst6))+(((-1.0)*gconst17*gconst2*gconst29*gconst3))+(((-0.12)*gconst13*gconst18*gconst7*py))+(((-0.06)*gconst30*gconst5*gconst6*r01))+(((0.12)*gconst13*gconst16*gconst4*py))+(((0.06)*gconst1*gconst15*gconst18*r01))+(((-1.0)*gconst0*gconst11*gconst15*gconst26))+(((0.06)*gconst25*gconst7*gconst9*r01))+(((0.12)*gconst10*gconst22*gconst6*py))+((gconst13*gconst27*gconst4*gconst9))+((gconst19*gconst2*gconst26*gconst3))+(((-1.0)*gconst19*gconst20*gconst5*gconst6))+(((-0.0036)*gconst15*gconst9*(r01*r01)))+(((0.12)*gconst22*gconst4*gconst6*py))+(((-1.0)*gconst1*gconst15*gconst29*gconst7))+(((-1.0)*gconst10*gconst16*gconst22*gconst4))+(((-1.0)*gconst14*gconst22*gconst8*gconst9))+((gconst11*gconst13*gconst14*gconst16))+(((-0.06)*gconst10*gconst26*gconst5*r01))+(((-1.0)*gconst15*gconst21*gconst7*gconst9))+((gconst18*gconst22*gconst4*gconst7))+(((-1.0)*gconst16*gconst2*gconst30*gconst4))+((gconst0*gconst15*gconst28*gconst9))+(((-0.12)*gconst1*gconst26*gconst5*py))+(((0.12)*gconst10*gconst2*gconst26*py))+((gconst14*gconst16*gconst19*gconst2))+((gconst0*gconst15*gconst17*gconst18))+((gconst0*gconst15*gconst29*gconst8))+((gconst1*gconst10*gconst15*gconst26))+(((-0.12)*gconst22*gconst7*gconst9*py))+(((-1.0)*gconst0*gconst16*gconst31*gconst5))+((gconst0*gconst17*gconst25*gconst9))+(((-1.0)*gconst12*gconst15*gconst19*gconst6))+(((-1.0)*gconst0*gconst15*gconst31*gconst6)));
op[6]=((((0.12)*gconst10*gconst16*gconst2*py))+(((-1.0)*gconst2*gconst29*gconst3*gconst8))+((gconst1*gconst10*gconst26*gconst5))+((gconst11*gconst2*gconst23*gconst6))+((gconst1*gconst10*gconst25*gconst6))+((gconst12*gconst15*gconst8*gconst9))+(((-0.0144)*gconst2*gconst6*(py*py)))+((gconst0*gconst15*gconst18*gconst8))+(((0.06)*gconst18*gconst5*gconst7*r01))+((gconst0*gconst17*gconst18*gconst5))+(((-0.06)*gconst18*gconst2*gconst4*r01))+(((-1.0)*gconst2*gconst30*gconst4*gconst6))+(((-1.0)*gconst17*gconst18*gconst2*gconst3))+(((-1.0)*gconst14*gconst17*gconst2*gconst9))+((gconst12*gconst18*gconst5*gconst8))+(((0.12)*gconst10*gconst13*gconst6*py))+(((-1.0)*gconst1*gconst27*gconst5*gconst9))+(((-1.0)*gconst0*gconst11*gconst26*gconst5))+((gconst11*gconst14*gconst16*gconst2))+((gconst2*gconst3*gconst31*gconst6))+((gconst13*gconst18*gconst4*gconst7))+(((-1.0)*gconst10*gconst2*gconst26*gconst4))+((gconst13*gconst19*gconst3*gconst6))+(((-1.0)*gconst11*gconst12*gconst15*gconst6))+((gconst2*gconst24*gconst7*gconst9))+(((0.0072)*gconst5*gconst6*py*r01))+((gconst10*gconst21*gconst5*gconst6))+(((-1.0)*gconst13*gconst18*gconst3*gconst8))+(((-1.0)*gconst12*gconst19*gconst5*gconst6))+(((-0.06)*gconst10*gconst15*gconst6*r01))+((gconst11*gconst13*gconst14*gconst6))+(((-1.0)*gconst11*gconst20*gconst5*gconst6))+(((-0.12)*gconst1*gconst15*gconst6*py))+(((-1.0)*gconst2*gconst23*gconst8*gconst9))+((gconst11*gconst2*gconst26*gconst3))+((gconst16*gconst19*gconst2*gconst3))+((gconst0*gconst25*gconst8*gconst9))+(((-1.0)*gconst2*gconst28*gconst3*gconst9))+(((-1.0)*gconst0*gconst11*gconst25*gconst6))+(((-1.0)*gconst0*gconst16*gconst19*gconst5))+(((-0.06)*gconst10*gconst16*gconst5*r01))+(((0.0072)*gconst2*gconst9*py*r01))+(((-1.0)*gconst14*gconst18*gconst2*gconst8))+(((-1.0)*gconst22*gconst3*gconst8*gconst9))+((gconst11*gconst22*gconst3*gconst6))+(((-0.12)*gconst1*gconst16*gconst5*py))+((gconst12*gconst17*gconst5*gconst9))+((gconst0*gconst15*gconst17*gconst9))+(((-1.0)*gconst0*gconst15*gconst19*gconst6))+(((-1.0)*gconst10*gconst13*gconst16*gconst4))+((gconst22*gconst4*gconst7*gconst9))+(((-1.0)*gconst1*gconst29*gconst5*gconst7))+((gconst11*gconst13*gconst16*gconst3))+(((-1.0)*gconst13*gconst14*gconst8*gconst9))+(((0.12)*gconst16*gconst2*gconst4*py))+(((-1.0)*gconst10*gconst22*gconst4*gconst6))+(((-1.0)*gconst10*gconst2*gconst24*gconst6))+(((-1.0)*gconst0*gconst11*gconst15*gconst16))+(((0.06)*gconst1*gconst15*gconst9*r01))+(((-1.0)*gconst1*gconst25*gconst7*gconst9))+(((-1.0)*gconst0*gconst31*gconst5*gconst6))+(((-1.0)*gconst21*gconst5*gconst7*gconst9))+(((0.06)*gconst1*gconst18*gconst5*r01))+((gconst14*gconst19*gconst2*gconst6))+((gconst0*gconst29*gconst5*gconst8))+((gconst1*gconst10*gconst15*gconst16))+(((0.12)*gconst13*gconst4*gconst6*py))+(((-0.06)*gconst13*gconst4*gconst9*r01))+(((-0.12)*gconst13*gconst7*gconst9*py))+(((-0.12)*gconst18*gconst2*gconst7*py))+(((-0.0036)*gconst5*gconst9*(r01*r01)))+(((-1.0)*gconst11*gconst12*gconst16*gconst5))+((gconst2*gconst29*gconst4*gconst7))+((gconst0*gconst28*gconst5*gconst9))+(((0.06)*gconst15*gconst7*gconst9*r01))+(((-1.0)*gconst1*gconst15*gconst18*gconst7))+(((-1.0)*gconst13*gconst17*gconst3*gconst9))+((gconst20*gconst5*gconst8*gconst9))+((gconst2*gconst27*gconst4*gconst9))+((gconst1*gconst30*gconst5*gconst6)));
op[7]=(((x71*x90))+((gconst17*gconst9*x71))+(((-1.0)*gconst1*x77*x94))+((gconst0*gconst15*x103))+(((-1.0)*gconst8*x105*x86))+((x82*x91))+(((-1.0)*gconst0*x85*x97))+(((-1.0)*x70*x71))+((gconst1*x100*x72))+((x70*x82))+(((-1.0)*x71*x91))+(((-1.0)*gconst9*x72*x76))+((x85*x98))+(((-1.0)*x82*x90))+((gconst12*gconst8*x100))+((x73*x87))+(((-1.0)*gconst1*x101*x84))+((gconst10*gconst2*gconst6*x84))+((gconst15*x110))+(((-1.0)*gconst1*x73*x97))+(((-1.0)*x106*x76))+((x76*x77))+(((-1.0)*gconst2*x73*x84))+((gconst6*x76*x84))+((gconst5*x72*x73))+(((-1.0)*x108*x87))+(((-1.0)*gconst8*x86*x98))+(((-1.0)*gconst12*x85*x94))+(((-1.0)*gconst10*x101*x72))+(((-1.0)*gconst17*x82*x86))+((x105*x85))+((gconst1*gconst5*x106)));
op[8]=(((gconst1*gconst10*x101))+((x82*x85))+(((-1.0)*x108*x76))+(((-1.0)*x71*x85))+(((-1.0)*gconst1*x73*x94))+((x73*x76))+(((-1.0)*gconst8*x82*x86))+((x103*x71)));
polyroots8(op,zeror,numroots);
IkReal j11array[8], cj11array[8], sj11array[8], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[8]={true,true,true,true,true,true,true,true};
_nj11 = 8;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
IkReal j12eval[2];
IkReal x111=((0.06611688)*sj11);
IkReal x112=(py*r02);
IkReal x113=(pz*r01);
IkReal x114=(cj11*px*r02);
IkReal x115=(cj11*pz*r00);
j12eval[0]=(x115+((sj11*x113))+(((-1.0)*x114))+(((-1.0)*sj11*x112)));
j12eval[1]=IKsign(((((-0.06611688)*x114))+(((-1.0)*x111*x112))+((x111*x113))+(((0.06611688)*x115))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x116=pz*pz;
IkReal x117=(px*r02);
IkReal x118=((2.0)*pz);
IkReal x119=(py*r02);
IkReal x120=(((pz*r00))+(((-1.0)*x117)));
IkReal x121=(((pz*r01))+(((-1.0)*x119)));
IkReal x123 = ((((-1.0)*r00*x117*x118))+(((r02*r02)*(((px*px)+(py*py)+(((-1.0)*x116))))))+x116+(((-1.0)*r01*x118*x119)));
if(IKabs(x123)==0){
continue;
}
IkReal x122=pow(x123,-0.5);
CheckValue<IkReal> x124 = IKatan2WithCheck(IkReal(x120),IkReal(x121),IKFAST_ATAN2_MAGTHRESH);
if(!x124.valid){
continue;
}
IkReal gconst48=((-1.0)*(x124.value));
IkReal gconst49=((-1.0)*x120*x122);
IkReal gconst50=(x121*x122);
IkReal x125=j11;
IkReal x126=((1.0)*r02);
CheckValue<IkReal> x129 = IKatan2WithCheck(IkReal(((((-1.0)*px*x126))+((pz*r00)))),IkReal(((((-1.0)*py*x126))+((pz*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x129.valid){
continue;
}
IkReal x127=x129.value;
IkReal x128=x127;
if(((((j11*x128))+((j11*x125))+((x125*x127))+((x127*x128)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j11*x128))+((j11*x125))+((x125*x127))+((x127*x128)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x130=pz*pz;
IkReal x131=py*py;
IkReal x132=px*px;
IkReal x133=gconst49*gconst49;
IkReal x134=gconst50*gconst50;
IkReal x135=(gconst50*r00);
IkReal x136=(pz*r01);
IkReal x137=((3.9e-6)*gconst50);
IkReal x138=((0.06611688)*gconst49);
IkReal x139=(py*r00);
IkReal x140=(py*r02);
IkReal x141=(gconst49*px);
IkReal x142=((0.1812)*r02);
IkReal x143=((0.03)*py);
IkReal x144=(px*r01);
IkReal x145=((0.015)*r02);
IkReal x146=(gconst49*r01);
IkReal x147=(gconst49*pz);
IkReal x148=((0.3624)*py);
IkReal x149=((4.7112e-5)*gconst50);
IkReal x150=((0.03)*pz);
IkReal x151=((0.3624)*pz);
IkReal x152=(px*r00);
IkReal x153=((0.1812)*x131);
IkReal x154=((3.9e-6)*x133);
IkReal x155=((0.015)*x132);
IkReal x156=((4.7112e-5)*x134);
IkReal x157=((3.9e-6)*x134);
IkReal x158=(gconst50*px*r02);
IkReal x159=((0.1812)*x130);
IkReal x160=((4.7112e-5)*x133);
IkReal x161=((0.015)*x131);
IkReal x162=((0.015)*x130);
IkReal x163=((0.1812)*x132);
CheckValue<IkReal> x164 = IKatan2WithCheck(IkReal((((x139*x156))+(((0.00191319239028)*x135))+(((-1.0)*x137*x140))+(((-0.0001583768535)*r02))+((x139*x160))+(((-1.0)*x131*x145))+(((-1.0)*x132*x145))+(((-1.0)*x144*x160))+((x136*x143))+(((-1.0)*x151*x158))+((x150*x152))+(((-1.0)*x144*x156))+(((3.9e-6)*r02*x141))+((x135*x153))+((x135*x159))+(((0.00191319239028)*x146))+((x136*x137))+(((-1.0)*gconst50*x144*x148))+(((-0.3624)*x139*x141))+(((-3.9e-6)*r00*x147))+((x146*x163))+(((-0.3624)*x140*x147))+((x146*x159))+(((-1.0)*x146*x153))+(((-1.0)*x135*x163))+((x130*x145)))),IkReal(((((-1.0)*x131*x142))+(((-1.0)*x140*x149))+((x144*x157))+((x144*x154))+(((-1.0)*x132*x142))+((x136*x149))+((x136*x148))+((x150*x158))+((x135*x155))+((x151*x152))+(((-1.0)*x139*x154))+(((-1.0)*x139*x157))+(((-1.0)*x146*x162))+(((-0.0001583768535)*x146))+((x146*x161))+(((-0.0001583768535)*x135))+((gconst50*x143*x144))+(((-1.0)*x146*x155))+(((-0.00191319239028)*r02))+(((4.7112e-5)*r02*x141))+(((-1.0)*x135*x162))+(((-1.0)*x135*x161))+(((-4.7112e-5)*r00*x147))+(((0.03)*x140*x147))+((x130*x142))+(((0.03)*x139*x141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x164.valid){
continue;
}
CheckValue<IkReal> x165=IKPowWithIntegerCheck(IKsign(((((-1.0)*x138*x140))+(((-0.06611688)*x158))+((x136*x138))+(((0.06611688)*pz*x135)))),-1);
if(!x165.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x164.value)+(((1.5707963267949)*(x165.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x166=IKcos(j12);
IkReal x167=IKsin(j12);
IkReal x168=pz*pz;
IkReal x169=px*px;
IkReal x170=py*py;
IkReal x171=(gconst49*r00);
IkReal x172=(gconst49*r02);
IkReal x173=(py*r01);
IkReal x174=((0.0564347265350685)*r01);
IkReal x175=((1.97537696490918)*py);
IkReal x176=(gconst50*py);
IkReal x177=(px*r00);
IkReal x178=(gconst50*r01);
IkReal x179=(pz*r02);
IkReal x180=((0.0564347265350685)*py);
IkReal x181=((0.312867138744518)*px);
IkReal x182=((1.97537696490918)*gconst50);
IkReal x183=((0.0296306544736378)*gconst50);
IkReal x184=((0.156433569372259)*x168);
IkReal x185=((0.156433569372259)*x178);
IkReal x186=(px*x166);
IkReal x187=((0.987688482454592)*x170);
IkReal x188=(pz*x167);
IkReal x189=(gconst50*x167);
IkReal x190=(r02*x167);
IkReal x191=((0.987688482454592)*x169);
IkReal x192=(r02*x166);
IkReal x193=(py*x167);
IkReal x194=((0.987688482454592)*x168);
IkReal x195=(px*x167);
IkReal x196=(pz*x166);
IkReal x197=(gconst49*r01*x166);
IkReal x198=(gconst50*r00*x166);
IkReal x199=(gconst49*r01*x167);
evalcond[0]=((((-0.00013)*x171))+(((-0.1812)*x198))+(((-0.1812)*x190))+(((-0.1812)*x197))+(((-0.015)*x199))+(((0.00013)*x178))+x179+x173+x177+(((0.015)*x192))+(((-0.015)*r00*x189)));
evalcond[1]=((0.0105584569)+(((-0.00026)*gconst49*px))+(((-0.03)*gconst49*x193))+(((0.03)*x196))+(((0.00026)*x176))+x170+x168+x169+(((-0.03)*px*x189))+(((-0.3624)*gconst49*py*x166))+(((-0.3624)*gconst50*x186))+(((-0.3624)*x188)));
evalcond[2]=((((0.0564347265350685)*x171*x188))+((x173*x182*x186))+(((0.0296306544736378)*py*x172))+((x169*x185))+((pz*x172*x181))+(((-1.0)*x194*x198))+(((-1.0)*x194*x197))+((x178*x184))+(((0.00469300708116777)*x172*x186))+(((-1.0)*x191*x197))+((x187*x197))+((px*r02*x183))+(((0.00469300708116777)*x178*x196))+(((0.0564347265350685)*x176*x190))+(((-1.0)*x190*x191))+(((0.00536968468154371)*r00*x189))+((x171*x175*x186))+(((1.97537696490918)*x177*x188))+(((-0.00536968468154371)*x192))+(((-1.0)*x171*x184))+(((-0.156433569372259)*x170*x171))+(((-0.00469300708116777)*r01*x195))+((x179*x182*x186))+(((1.97537696490918)*x173*x188))+(((-1.0)*x187*x198))+(((-1.0)*x187*x190))+(((-1.0)*x170*x185))+(((0.156433569372259)*x169*x171))+(((-0.00469300708116777)*x176*x192))+(((-0.00469300708116777)*x171*x196))+(((-0.0564347265350685)*x172*x195))+(((0.00536968468154371)*x199))+(((0.00160515983269011)*x178))+(((-1.0)*pz*r00*x183))+(((-0.357978978769581)*x179))+(((-0.357978978769581)*x173))+(((-0.357978978769581)*x177))+((x191*x198))+(((0.00469300708116777)*r00*x193))+(((0.0544373246804248)*x198))+(((0.0544373246804248)*x197))+(((0.0544373246804248)*x190))+(((-0.00160515983269011)*x171))+((x190*x194))+((x172*x175*x196))+(((-0.312867138744518)*x176*x177))+(((-0.312867138744518)*x176*x179))+((r00*x166*x180))+((gconst49*x173*x181))+(((-0.0296306544736378)*gconst49*pz*r01))+(((-1.0)*x174*x186))+(((-1.0)*gconst50*x174*x188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
IkReal x200=((5.54387622575087)*cj12);
j13eval[0]=((1.0)+(((-1.0)*py*sj11*x200))+(((-35.0028623542932)*cj11*py))+(((-5.54387622575087)*pz*sj12))+(((35.0028623542932)*px*sj11))+(((-1.0)*cj11*px*x200)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
IkReal x201=py*py;
IkReal x202=cj11*cj11;
IkReal x203=px*px;
IkReal x204=cj12*cj12;
IkReal x205=pz*pz;
IkReal x206=(cj11*px);
IkReal x207=((0.0353131428337124)*cj12);
IkReal x208=(py*sj11);
IkReal x209=(cj11*py);
IkReal x210=((0.156433569372259)*cj12);
IkReal x211=((1.23606107790593)*cj12);
IkReal x212=(cj11*sj11);
IkReal x213=(cj12*pz);
IkReal x214=((7.80422830698764)*sj12);
IkReal x215=((0.12)*sj12);
IkReal x216=(pz*sj12);
IkReal x217=(px*py);
IkReal x218=(px*sj11);
IkReal x219=((3.90211415349382)*x203);
IkReal x220=((3.90211415349382)*x204);
IkReal x221=(x201*x202);
CheckValue<IkReal> x228=IKPowWithIntegerCheck(((0.0282173632675343)+(((0.987688482454592)*x218))+(((-1.0)*x206*x210))+(((-0.987688482454592)*x209))+(((-1.0)*x208*x210))+(((-0.156433569372259)*x216))),-1);
if(!x228.valid){
continue;
}
IkReal x222=x228.value;
IkReal x223=((0.015)*x222);
IkReal x224=(sj12*x222);
IkReal x225=((1.0)*x222);
IkReal x226=((1.0)*x224);
if((((0.00408487835908797)+((x205*x220))+(((0.12)*x213))+(((-0.0978858465061816)*x221))+(((-1.0)*x203*x211*x212))+(((-1.0)*x206*x215))+(((0.222959717636647)*x218))+(((1.23606107790593)*x209*x216))+((x201*x211*x212))+(((-1.0)*x206*x207))+(((-0.222959717636647)*x209))+(((-1.0)*x207*x208))+x219+(((-1.0)*x206*x213*x214))+((x220*x221))+(((-7.80422830698764)*x204*x206*x208))+(((-1.0)*x201*x220))+(((4.0)*x201))+(((0.0978858465061816)*x205))+(((-1.0)*x211*x217))+(((0.0978858465061816)*x202*x203))+(((-1.0)*x208*x215))+(((-1.23606107790593)*x216*x218))+(((-1.0)*x202*x204*x219))+(((-0.0353131428337124)*x216))+(((0.195771693012363)*x206*x208))+(((2.47212215581187)*cj12*x202*x217))+(((-1.0)*x208*x213*x214)))) < -0.00001)
continue;
IkReal x227=((0.5)*x222*(IKsqrt(((0.00408487835908797)+((x205*x220))+(((0.12)*x213))+(((-0.0978858465061816)*x221))+(((-1.0)*x203*x211*x212))+(((-1.0)*x206*x215))+(((0.222959717636647)*x218))+(((1.23606107790593)*x209*x216))+((x201*x211*x212))+(((-1.0)*x206*x207))+(((-0.222959717636647)*x209))+(((-1.0)*x207*x208))+x219+(((-1.0)*x206*x213*x214))+((x220*x221))+(((-7.80422830698764)*x204*x206*x208))+(((-1.0)*x201*x220))+(((4.0)*x201))+(((0.0978858465061816)*x205))+(((-1.0)*x211*x217))+(((0.0978858465061816)*x202*x203))+(((-1.0)*x208*x215))+(((-1.23606107790593)*x216*x218))+(((-1.0)*x202*x204*x219))+(((-0.0353131428337124)*x216))+(((0.195771693012363)*x206*x208))+(((2.47212215581187)*cj12*x202*x217))+(((-1.0)*x208*x213*x214))))));
CheckValue<IkReal> x229=IKPowWithIntegerCheck(((0.0282173632675343)+(((0.987688482454592)*x218))+(((-1.0)*cj11*px*x210))+(((-0.987688482454592)*x209))+(((-1.0)*x208*x210))+(((-0.156433569372259)*x216))),-1);
if(!x229.valid){
continue;
}
CheckValue<IkReal> x230=IKPowWithIntegerCheck(((0.0282173632675343)+(((0.987688482454592)*x218))+(((-1.0)*x206*x210))+(((-0.987688482454592)*x209))+(((-1.0)*py*sj11*x210))+(((-0.156433569372259)*x216))),-1);
if(!x230.valid){
continue;
}
j13array[0]=((2.0)*(atan(((((-1.0)*x213*x225))+x227+((sj12*x206*(x229.value)))+((sj12*x208*(x230.value)))+(((-1.0)*x223))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
CheckValue<IkReal> x231=IKPowWithIntegerCheck(((0.0282173632675343)+(((0.987688482454592)*x218))+(((-1.0)*x206*x210))+(((-0.987688482454592)*x209))+(((-1.0)*py*sj11*x210))+(((-0.156433569372259)*x216))),-1);
if(!x231.valid){
continue;
}
CheckValue<IkReal> x232=IKPowWithIntegerCheck(((0.0282173632675343)+(((0.987688482454592)*x218))+(((-1.0)*cj11*px*x210))+(((-0.987688482454592)*x209))+(((-1.0)*x208*x210))+(((-0.156433569372259)*x216))),-1);
if(!x232.valid){
continue;
}
j13array[1]=((-2.0)*(atan(((((-1.0)*sj12*x208*(x231.value)))+((x213*x222))+x223+x227+(((-1.0)*sj12*x206*(x232.value)))))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

innerfn(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1322=pz*pz;
IkReal x1323=(px*r02);
IkReal x1324=(pz*r01);
IkReal x1325=(py*r02);
IkReal x1326=(pz*r00);
IkReal x1327=(x1326+(((-1.0)*x1323)));
IkReal x1328=(x1324+(((-1.0)*x1325)));
IkReal x1330 = (x1322+(((-2.0)*x1323*x1326))+(((-2.0)*x1324*x1325))+(((r02*r02)*(((px*px)+(((-1.0)*x1322))+(py*py))))));
if(IKabs(x1330)==0){
continue;
}
IkReal x1329=pow(x1330,-0.5);
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal(x1327),IkReal(x1328),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x1331.value))));
IkReal gconst52=((1.0)*x1327*x1329);
IkReal gconst53=((-1.0)*x1328*x1329);
IkReal x1332=j11;
IkReal x1333=((1.0)*r02);
CheckValue<IkReal> x1336 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1333))+((pz*r00)))),IkReal(((((-1.0)*py*x1333))+((pz*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1336.valid){
continue;
}
IkReal x1334=x1336.value;
IkReal x1335=x1334;
if((((9.86960440108936)+((j11*x1332))+((j11*x1335))+(((-3.14159265358979)*x1332))+(((-3.14159265358979)*x1334))+(((-3.14159265358979)*x1335))+(((-3.14159265358979)*j11))+((x1334*x1335))+((x1332*x1334)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((j11*x1332))+((j11*x1335))+(((-3.14159265358979)*x1332))+(((-3.14159265358979)*x1334))+(((-3.14159265358979)*x1335))+(((-3.14159265358979)*j11))+((x1334*x1335))+((x1332*x1334)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1337=pz*pz;
IkReal x1338=gconst53*gconst53;
IkReal x1339=py*py;
IkReal x1340=gconst52*gconst52;
IkReal x1341=px*px;
IkReal x1342=(gconst53*py);
IkReal x1343=(px*r01);
IkReal x1344=((3.9e-6)*r02);
IkReal x1345=(gconst52*r01);
IkReal x1346=(gconst53*pz);
IkReal x1347=((0.3624)*r02);
IkReal x1348=(gconst52*py);
IkReal x1349=((0.06611688)*r02);
IkReal x1350=(gconst53*r00);
IkReal x1351=(py*r00);
IkReal x1352=(pz*r00);
IkReal x1353=(px*r02);
IkReal x1354=((4.7112e-5)*gconst52);
IkReal x1355=(px*r00);
IkReal x1356=((0.015)*x1337);
IkReal x1357=((4.7112e-5)*x1338);
IkReal x1358=(r02*x1341);
IkReal x1359=(py*pz*r01);
IkReal x1360=((0.015)*x1339);
IkReal x1361=((3.9e-6)*x1340);
IkReal x1362=((0.1812)*x1339);
IkReal x1363=((4.7112e-5)*x1340);
IkReal x1364=((0.015)*x1341);
IkReal x1365=((3.9e-6)*x1338);
IkReal x1366=((0.1812)*x1337);
IkReal x1367=((0.1812)*x1341);
IkReal x1368=(x1339*x1350);
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign(((((0.06611688)*pz*x1345))+(((0.06611688)*r00*x1346))+(((-1.0)*gconst53*px*x1349))+(((-1.0)*x1348*x1349)))),-1);
if(!x1369.valid){
continue;
}
CheckValue<IkReal> x1370 = IKatan2WithCheck(IkReal(((((3.9e-6)*r01*x1346))+(((0.00191319239028)*x1345))+(((-0.0001583768535)*r02))+(((-1.0)*px*x1346*x1347))+(((-0.3624)*x1342*x1343))+(((-1.0)*r02*x1360))+(((-1.0)*x1345*x1362))+((x1345*x1366))+((x1345*x1367))+(((-0.3624)*x1348*x1355))+(((0.00191319239028)*x1350))+(((0.03)*x1359))+(((-1.0)*x1350*x1367))+((r02*x1356))+((gconst52*px*x1344))+((x1350*x1366))+((x1350*x1362))+(((-1.0)*x1342*x1344))+(((-3.9e-6)*gconst52*x1352))+((x1351*x1357))+(((-0.015)*x1358))+(((-1.0)*pz*x1347*x1348))+((x1351*x1363))+(((-1.0)*x1343*x1363))+(((-1.0)*x1343*x1357))+(((0.03)*px*x1352)))),IkReal(((((4.7112e-5)*r01*x1346))+(((0.03)*pz*r02*x1348))+(((0.03)*x1346*x1353))+(((-1.0)*x1352*x1354))+(((-1.0)*x1345*x1356))+(((-4.7112e-5)*r02*x1342))+(((0.03)*x1342*x1343))+(((0.03)*x1348*x1355))+(((-1.0)*r02*x1362))+(((-1.0)*x1345*x1364))+((x1345*x1360))+(((0.3624)*px*x1352))+(((-0.1812)*x1358))+(((-1.0)*x1350*x1360))+((r02*x1366))+(((-1.0)*x1350*x1356))+(((-0.0001583768535)*x1345))+(((-0.0001583768535)*x1350))+(((0.3624)*x1359))+((x1350*x1364))+(((-0.00191319239028)*r02))+((x1343*x1365))+((x1343*x1361))+((x1353*x1354))+(((-1.0)*x1351*x1365))+(((-1.0)*x1351*x1361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1370.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1369.value)))+(x1370.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1371=IKcos(j12);
IkReal x1372=IKsin(j12);
IkReal x1373=px*px;
IkReal x1374=pz*pz;
IkReal x1375=py*py;
IkReal x1376=(py*r02);
IkReal x1377=((0.0564347265350685)*px);
IkReal x1378=(gconst53*r01);
IkReal x1379=(gconst52*r00);
IkReal x1380=(pz*r01);
IkReal x1381=((0.0296306544736378)*gconst52);
IkReal x1382=((1.97537696490918)*py);
IkReal x1383=(gconst53*r00);
IkReal x1384=(py*r01);
IkReal x1385=(gconst52*px);
IkReal x1386=(px*r00);
IkReal x1387=(gconst53*px);
IkReal x1388=(pz*r02);
IkReal x1389=(gconst52*r01);
IkReal x1390=((0.00469300708116777)*x1371);
IkReal x1391=(r01*x1371);
IkReal x1392=(r02*x1372);
IkReal x1393=((0.156433569372259)*x1375);
IkReal x1394=((0.156433569372259)*x1374);
IkReal x1395=((0.00536968468154371)*x1372);
IkReal x1396=((0.987688482454592)*x1373);
IkReal x1397=(px*x1372);
IkReal x1398=(r02*x1387);
IkReal x1399=(py*x1371);
IkReal x1400=((0.0564347265350685)*x1372);
IkReal x1401=(r02*x1371);
IkReal x1402=((0.015)*x1372);
IkReal x1403=((0.156433569372259)*x1373);
IkReal x1404=(py*x1372);
IkReal x1405=((0.987688482454592)*x1374);
IkReal x1406=((0.987688482454592)*x1375);
IkReal x1407=((1.97537696490918)*pz*x1371);
evalcond[0]=((((-0.00013)*x1379))+x1388+x1384+x1386+(((-1.0)*x1389*x1402))+(((0.015)*x1401))+(((0.00013)*x1378))+(((-1.0)*x1383*x1402))+(((-0.1812)*x1371*x1389))+(((-0.1812)*x1371*x1383))+(((-0.1812)*x1392)));
evalcond[1]=((0.0105584569)+x1373+x1375+x1374+(((0.00026)*gconst53*py))+(((-0.3624)*x1371*x1387))+(((-0.03)*gconst52*x1404))+(((-0.00026)*x1385))+(((-0.03)*x1372*x1387))+(((-0.3624)*pz*x1372))+(((-0.3624)*gconst52*x1399))+(((0.03)*pz*x1371)));
evalcond[2]=((((-1.0)*x1371*x1383*x1406))+(((-1.0)*x1371*x1383*x1405))+(((-1.0)*x1392*x1396))+((x1379*x1403))+((pz*x1378*x1390))+(((-0.00160515983269011)*x1379))+((gconst53*x1376*x1400))+((x1371*x1389*x1406))+((px*x1371*x1379*x1382))+((x1392*x1405))+(((1.97537696490918)*x1371*x1387*x1388))+(((-1.0)*pz*x1379*x1390))+((r02*x1385*x1390))+((pz*x1379*x1400))+(((1.97537696490918)*pz*x1372*x1386))+(((-1.0)*gconst52*x1377*x1392))+((px*x1371*x1378*x1382))+(((-1.0)*x1377*x1391))+(((-0.00536968468154371)*x1401))+(((-1.0)*gconst53*x1376*x1390))+(((-0.312867138744518)*px*py*x1383))+(((-0.00469300708116777)*r01*x1397))+(((0.0544373246804248)*x1371*x1383))+(((0.0544373246804248)*x1371*x1389))+((x1372*x1380*x1382))+(((-0.357978978769581)*x1386))+(((-0.357978978769581)*x1384))+(((-0.357978978769581)*x1388))+(((-0.312867138744518)*gconst53*pz*x1376))+(((-1.0)*x1371*x1389*x1405))+(((0.00160515983269011)*x1378))+((gconst52*x1376*x1407))+(((-0.0296306544736378)*pz*x1383))+((x1376*x1381))+(((0.0544373246804248)*x1392))+(((-1.0)*x1380*x1381))+((x1389*x1395))+(((-1.0)*x1392*x1406))+(((-1.0)*x1371*x1389*x1396))+((x1378*x1403))+(((-1.0)*x1378*x1393))+(((0.312867138744518)*x1384*x1385))+(((0.00469300708116777)*r00*x1404))+(((0.312867138744518)*x1385*x1388))+(((0.0296306544736378)*x1398))+((x1383*x1395))+(((0.0564347265350685)*r00*x1399))+(((-1.0)*pz*x1378*x1400))+((x1378*x1394))+(((-1.0)*x1379*x1393))+(((-1.0)*x1379*x1394))+((x1371*x1383*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
IkReal x1408=((5.54387622575087)*cj12);
j13eval[0]=((1.0)+(((-35.0028623542932)*cj11*py))+(((-1.0)*cj11*px*x1408))+(((-5.54387622575087)*pz*sj12))+(((35.0028623542932)*px*sj11))+(((-1.0)*py*sj11*x1408)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
IkReal x1409=py*py;
IkReal x1410=cj11*cj11;
IkReal x1411=px*px;
IkReal x1412=cj12*cj12;
IkReal x1413=pz*pz;
IkReal x1414=(cj11*px);
IkReal x1415=((0.0353131428337124)*cj12);
IkReal x1416=(py*sj11);
IkReal x1417=(cj11*py);
IkReal x1418=((0.156433569372259)*cj12);
IkReal x1419=((1.23606107790593)*cj12);
IkReal x1420=(cj11*sj11);
IkReal x1421=(cj12*pz);
IkReal x1422=((7.80422830698764)*sj12);
IkReal x1423=((0.12)*sj12);
IkReal x1424=(pz*sj12);
IkReal x1425=(px*py);
IkReal x1426=(px*sj11);
IkReal x1427=((3.90211415349382)*x1411);
IkReal x1428=((3.90211415349382)*x1412);
IkReal x1429=(x1409*x1410);
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.987688482454592)*x1417))+(((0.987688482454592)*x1426))+(((-1.0)*x1414*x1418))+(((-1.0)*x1416*x1418))+(((-0.156433569372259)*x1424))),-1);
if(!x1436.valid){
continue;
}
IkReal x1430=x1436.value;
IkReal x1431=((0.015)*x1430);
IkReal x1432=(sj12*x1430);
IkReal x1433=((1.0)*x1430);
IkReal x1434=((1.0)*x1432);
if((((0.00408487835908797)+(((-1.0)*x1415*x1416))+(((4.0)*x1409))+(((-1.0)*x1416*x1421*x1422))+(((-1.0)*x1416*x1423))+(((-1.0)*x1409*x1428))+(((0.12)*x1421))+(((-1.0)*x1414*x1421*x1422))+(((0.222959717636647)*x1426))+(((-1.0)*x1414*x1415))+(((-1.0)*x1411*x1419*x1420))+(((-7.80422830698764)*x1412*x1414*x1416))+(((0.0978858465061816)*x1413))+(((-0.222959717636647)*x1417))+((x1428*x1429))+(((0.195771693012363)*x1414*x1416))+(((-1.0)*x1419*x1425))+(((-1.0)*x1410*x1412*x1427))+x1427+(((-1.0)*x1414*x1423))+((x1409*x1419*x1420))+(((1.23606107790593)*x1417*x1424))+(((0.0978858465061816)*x1410*x1411))+(((-0.0353131428337124)*x1424))+(((2.47212215581187)*cj12*x1410*x1425))+(((-0.0978858465061816)*x1429))+(((-1.23606107790593)*x1424*x1426))+((x1413*x1428)))) < -0.00001)
continue;
IkReal x1435=((0.5)*x1430*(IKsqrt(((0.00408487835908797)+(((-1.0)*x1415*x1416))+(((4.0)*x1409))+(((-1.0)*x1416*x1421*x1422))+(((-1.0)*x1416*x1423))+(((-1.0)*x1409*x1428))+(((0.12)*x1421))+(((-1.0)*x1414*x1421*x1422))+(((0.222959717636647)*x1426))+(((-1.0)*x1414*x1415))+(((-1.0)*x1411*x1419*x1420))+(((-7.80422830698764)*x1412*x1414*x1416))+(((0.0978858465061816)*x1413))+(((-0.222959717636647)*x1417))+((x1428*x1429))+(((0.195771693012363)*x1414*x1416))+(((-1.0)*x1419*x1425))+(((-1.0)*x1410*x1412*x1427))+x1427+(((-1.0)*x1414*x1423))+((x1409*x1419*x1420))+(((1.23606107790593)*x1417*x1424))+(((0.0978858465061816)*x1410*x1411))+(((-0.0353131428337124)*x1424))+(((2.47212215581187)*cj12*x1410*x1425))+(((-0.0978858465061816)*x1429))+(((-1.23606107790593)*x1424*x1426))+((x1413*x1428))))));
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.987688482454592)*x1417))+(((0.987688482454592)*x1426))+(((-1.0)*x1416*x1418))+(((-1.0)*cj11*px*x1418))+(((-0.156433569372259)*x1424))),-1);
if(!x1437.valid){
continue;
}
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.987688482454592)*x1417))+(((0.987688482454592)*x1426))+(((-1.0)*x1414*x1418))+(((-1.0)*py*sj11*x1418))+(((-0.156433569372259)*x1424))),-1);
if(!x1438.valid){
continue;
}
j13array[0]=((2.0)*(atan((((sj12*x1414*(x1437.value)))+((sj12*x1416*(x1438.value)))+(((-1.0)*x1431))+(((-1.0)*x1421*x1433))+x1435))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.987688482454592)*x1417))+(((0.987688482454592)*x1426))+(((-1.0)*x1414*x1418))+(((-1.0)*py*sj11*x1418))+(((-0.156433569372259)*x1424))),-1);
if(!x1439.valid){
continue;
}
CheckValue<IkReal> x1440=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.987688482454592)*x1417))+(((0.987688482454592)*x1426))+(((-1.0)*x1416*x1418))+(((-1.0)*cj11*px*x1418))+(((-0.156433569372259)*x1424))),-1);
if(!x1440.valid){
continue;
}
j13array[1]=((-2.0)*(atan(((((-1.0)*sj12*x1416*(x1439.value)))+(((-1.0)*sj12*x1414*(x1440.value)))+((x1421*x1430))+x1435+x1431))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

innerfn(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1441=pz*pz;
IkReal x1442=py*py;
IkReal x1443=px*px;
IkReal x1444=(r01*sj11);
IkReal x1445=(pz*r01);
IkReal x1446=((3.9e-6)*cj11);
IkReal x1447=(pz*sj11);
IkReal x1448=((4.7112e-5)*r00);
IkReal x1449=(px*r01);
IkReal x1450=(cj11*r00);
IkReal x1451=((3.9e-6)*r00);
IkReal x1452=((0.03)*py);
IkReal x1453=((0.06611688)*r02);
IkReal x1454=(py*sj11);
IkReal x1455=((4.7112e-5)*cj11);
IkReal x1456=((0.06611688)*pz);
IkReal x1457=((0.3624)*py);
IkReal x1458=(cj11*px);
IkReal x1459=(py*r02);
IkReal x1460=(pz*r02);
IkReal x1461=(px*r00);
IkReal x1462=((0.1812)*x1442);
IkReal x1463=((0.1812)*x1443);
IkReal x1464=((0.015)*x1441);
IkReal x1465=((0.1812)*x1441);
IkReal x1466=((0.015)*x1443);
IkReal x1467=((0.015)*x1442);
IkReal x1468=(px*r02*sj11);
IkReal x1469=((0.3624)*x1461);
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(IKsign((((x1450*x1456))+(((-1.0)*x1453*x1454))+(((-1.0)*x1453*x1458))+((x1444*x1456)))),-1);
if(!x1470.valid){
continue;
}
CheckValue<IkReal> x1471 = IKatan2WithCheck(IkReal((((x1445*x1446))+(((3.9e-6)*x1468))+((x1445*x1452))+(((-0.0001583768535)*r02))+(((-1.0)*x1447*x1451))+(((-1.0)*r02*x1466))+(((-1.0)*r02*x1467))+(((0.00191319239028)*x1444))+(((-1.0)*x1454*x1469))+((x1450*x1462))+((x1450*x1465))+(((-1.0)*x1444*x1462))+(((-0.3624)*x1458*x1460))+(((0.03)*pz*x1461))+(((-1.0)*x1446*x1459))+((x1444*x1465))+((x1444*x1463))+(((0.00191319239028)*x1450))+(((-4.7112e-5)*x1449))+((py*x1448))+(((-1.0)*x1450*x1463))+((r02*x1464))+(((-1.0)*cj11*x1449*x1457))+(((-1.0)*r02*x1447*x1457)))),IkReal((((cj11*x1449*x1452))+((x1445*x1457))+((x1445*x1455))+((sj11*x1452*x1461))+(((-1.0)*r02*x1462))+(((-1.0)*r02*x1463))+((pz*x1469))+(((-1.0)*x1455*x1459))+((x1450*x1466))+(((4.7112e-5)*x1468))+(((-0.0001583768535)*x1450))+(((-1.0)*x1444*x1464))+(((-1.0)*x1444*x1466))+(((-1.0)*x1447*x1448))+(((-0.0001583768535)*x1444))+(((3.9e-6)*x1449))+(((0.03)*x1458*x1460))+((x1444*x1467))+((r02*x1447*x1452))+(((-1.0)*py*x1451))+(((-0.00191319239028)*r02))+(((-1.0)*x1450*x1464))+(((-1.0)*x1450*x1467))+((r02*x1465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1471.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1470.value)))+(x1471.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1472=IKcos(j12);
IkReal x1473=IKsin(j12);
IkReal x1474=px*px;
IkReal x1475=pz*pz;
IkReal x1476=py*py;
IkReal x1477=(r00*sj11);
IkReal x1478=((0.0564347265350685)*r01);
IkReal x1479=(cj11*r01);
IkReal x1480=(py*r01);
IkReal x1481=(cj11*py);
IkReal x1482=(r01*sj11);
IkReal x1483=((0.0296306544736378)*pz);
IkReal x1484=((1.97537696490918)*py);
IkReal x1485=(cj11*r00);
IkReal x1486=(py*r00);
IkReal x1487=(px*r00);
IkReal x1488=(pz*r02);
IkReal x1489=(py*sj11);
IkReal x1490=((0.0296306544736378)*r02);
IkReal x1491=(r02*sj11);
IkReal x1492=((0.987688482454592)*x1474);
IkReal x1493=((1.97537696490918)*x1480);
IkReal x1494=(pz*x1473);
IkReal x1495=((0.987688482454592)*x1476);
IkReal x1496=((0.156433569372259)*x1476);
IkReal x1497=(px*x1472);
IkReal x1498=(px*x1473);
IkReal x1499=((0.156433569372259)*x1475);
IkReal x1500=(r02*x1473);
IkReal x1501=((0.015)*x1473);
IkReal x1502=((0.156433569372259)*x1474);
IkReal x1503=((0.987688482454592)*x1475);
IkReal x1504=(r02*x1472);
IkReal x1505=((0.00536968468154371)*x1473);
IkReal x1506=((0.312867138744518)*px*sj11);
IkReal x1507=(x1472*x1482);
IkReal x1508=((0.00469300708116777)*pz*x1472);
evalcond[0]=((((-1.0)*x1485*x1501))+(((-0.1812)*x1500))+(((-0.1812)*x1507))+(((-1.0)*x1482*x1501))+(((-0.00013)*x1477))+(((0.00013)*x1479))+x1480+x1487+x1488+(((-0.1812)*x1472*x1485))+(((0.015)*x1504)));
evalcond[1]=((0.0105584569)+(((0.03)*pz*x1472))+(((-0.3624)*x1494))+(((-0.03)*cj11*x1498))+(((-0.03)*x1473*x1489))+(((-0.3624)*cj11*x1497))+x1476+x1474+x1475+(((0.00026)*x1481))+(((-0.3624)*x1472*x1489))+(((-0.00026)*px*sj11)));
evalcond[2]=(((sj11*x1472*x1484*x1488))+((x1479*x1499))+(((-1.0)*x1479*x1496))+(((-0.00160515983269011)*x1477))+(((-0.357978978769581)*x1488))+(((-0.357978978769581)*x1487))+(((-0.357978978769581)*x1480))+(((0.00160515983269011)*x1479))+(((-1.0)*x1482*x1483))+(((0.0564347265350685)*x1477*x1494))+((x1488*x1506))+((x1489*x1490))+(((-0.312867138744518)*x1481*x1488))+(((-0.312867138744518)*x1481*x1487))+(((0.0564347265350685)*x1472*x1486))+(((0.00469300708116777)*x1491*x1497))+(((-0.00469300708116777)*r01*x1498))+((x1479*x1508))+((x1479*x1502))+(((-1.0)*x1472*x1485*x1495))+((x1477*x1502))+(((0.0564347265350685)*x1481*x1500))+(((-0.0564347265350685)*x1491*x1498))+((cj11*px*x1490))+((x1479*x1484*x1497))+((x1477*x1484*x1497))+(((-1.0)*x1477*x1508))+((x1472*x1485*x1492))+((x1500*x1503))+((x1482*x1505))+((x1495*x1507))+(((-1.0)*x1477*x1496))+(((-1.0)*x1477*x1499))+((x1493*x1494))+(((-1.0)*x1483*x1485))+(((0.0544373246804248)*x1472*x1485))+(((0.00469300708116777)*x1473*x1486))+((x1485*x1505))+((x1480*x1506))+(((-1.0)*x1503*x1507))+(((-0.00536968468154371)*x1504))+(((-0.00469300708116777)*x1481*x1504))+(((1.97537696490918)*cj11*x1488*x1497))+(((-1.0)*x1472*x1485*x1503))+(((-1.0)*cj11*x1478*x1494))+(((1.97537696490918)*x1487*x1494))+(((-1.0)*x1495*x1500))+(((-1.0)*x1492*x1507))+(((-1.0)*x1492*x1500))+(((0.0544373246804248)*x1500))+(((0.0544373246804248)*x1507))+(((-1.0)*x1478*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
IkReal x1509=((5.54387622575087)*cj12);
j13eval[0]=((1.0)+(((-35.0028623542932)*cj11*py))+(((-5.54387622575087)*pz*sj12))+(((35.0028623542932)*px*sj11))+(((-1.0)*cj11*px*x1509))+(((-1.0)*py*sj11*x1509)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
IkReal x1510=py*py;
IkReal x1511=cj11*cj11;
IkReal x1512=px*px;
IkReal x1513=cj12*cj12;
IkReal x1514=pz*pz;
IkReal x1515=(cj11*px);
IkReal x1516=((0.0353131428337124)*cj12);
IkReal x1517=(py*sj11);
IkReal x1518=(cj11*py);
IkReal x1519=((0.156433569372259)*cj12);
IkReal x1520=((1.23606107790593)*cj12);
IkReal x1521=(cj11*sj11);
IkReal x1522=(cj12*pz);
IkReal x1523=((7.80422830698764)*sj12);
IkReal x1524=((0.12)*sj12);
IkReal x1525=(pz*sj12);
IkReal x1526=(px*py);
IkReal x1527=(px*sj11);
IkReal x1528=((3.90211415349382)*x1512);
IkReal x1529=((3.90211415349382)*x1513);
IkReal x1530=(x1510*x1511);
CheckValue<IkReal> x1537=IKPowWithIntegerCheck(((0.0282173632675343)+(((-1.0)*x1515*x1519))+(((-0.156433569372259)*x1525))+(((0.987688482454592)*x1527))+(((-0.987688482454592)*x1518))+(((-1.0)*x1517*x1519))),-1);
if(!x1537.valid){
continue;
}
IkReal x1531=x1537.value;
IkReal x1532=((0.015)*x1531);
IkReal x1533=(sj12*x1531);
IkReal x1534=((1.0)*x1531);
IkReal x1535=((1.0)*x1533);
if((((0.00408487835908797)+((x1510*x1520*x1521))+(((-1.0)*x1516*x1517))+(((-1.0)*x1515*x1516))+(((-1.0)*x1517*x1522*x1523))+(((-1.0)*x1515*x1522*x1523))+(((-1.0)*x1515*x1524))+(((-0.222959717636647)*x1518))+(((-7.80422830698764)*x1513*x1515*x1517))+(((0.0978858465061816)*x1511*x1512))+(((-1.0)*x1510*x1529))+x1528+(((-1.0)*x1512*x1520*x1521))+(((-0.0353131428337124)*x1525))+((x1529*x1530))+(((1.23606107790593)*x1518*x1525))+(((0.12)*x1522))+(((0.195771693012363)*x1515*x1517))+(((-1.0)*x1517*x1524))+(((-1.23606107790593)*x1525*x1527))+(((-0.0978858465061816)*x1530))+(((-1.0)*x1520*x1526))+(((4.0)*x1510))+(((2.47212215581187)*cj12*x1511*x1526))+(((0.222959717636647)*x1527))+((x1514*x1529))+(((-1.0)*x1511*x1513*x1528))+(((0.0978858465061816)*x1514)))) < -0.00001)
continue;
IkReal x1536=((0.5)*x1531*(IKsqrt(((0.00408487835908797)+((x1510*x1520*x1521))+(((-1.0)*x1516*x1517))+(((-1.0)*x1515*x1516))+(((-1.0)*x1517*x1522*x1523))+(((-1.0)*x1515*x1522*x1523))+(((-1.0)*x1515*x1524))+(((-0.222959717636647)*x1518))+(((-7.80422830698764)*x1513*x1515*x1517))+(((0.0978858465061816)*x1511*x1512))+(((-1.0)*x1510*x1529))+x1528+(((-1.0)*x1512*x1520*x1521))+(((-0.0353131428337124)*x1525))+((x1529*x1530))+(((1.23606107790593)*x1518*x1525))+(((0.12)*x1522))+(((0.195771693012363)*x1515*x1517))+(((-1.0)*x1517*x1524))+(((-1.23606107790593)*x1525*x1527))+(((-0.0978858465061816)*x1530))+(((-1.0)*x1520*x1526))+(((4.0)*x1510))+(((2.47212215581187)*cj12*x1511*x1526))+(((0.222959717636647)*x1527))+((x1514*x1529))+(((-1.0)*x1511*x1513*x1528))+(((0.0978858465061816)*x1514))))));
CheckValue<IkReal> x1538=IKPowWithIntegerCheck(((0.0282173632675343)+(((-1.0)*x1515*x1519))+(((-0.156433569372259)*x1525))+(((0.987688482454592)*x1527))+(((-0.987688482454592)*x1518))+(((-1.0)*py*sj11*x1519))),-1);
if(!x1538.valid){
continue;
}
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.156433569372259)*x1525))+(((0.987688482454592)*x1527))+(((-0.987688482454592)*x1518))+(((-1.0)*x1517*x1519))+(((-1.0)*cj11*px*x1519))),-1);
if(!x1539.valid){
continue;
}
j13array[0]=((2.0)*(atan(((((-1.0)*x1532))+((sj12*x1517*(x1538.value)))+x1536+(((-1.0)*x1522*x1534))+((sj12*x1515*(x1539.value)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
CheckValue<IkReal> x1540=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.156433569372259)*x1525))+(((0.987688482454592)*x1527))+(((-0.987688482454592)*x1518))+(((-1.0)*x1517*x1519))+(((-1.0)*cj11*px*x1519))),-1);
if(!x1540.valid){
continue;
}
CheckValue<IkReal> x1541=IKPowWithIntegerCheck(((0.0282173632675343)+(((-1.0)*x1515*x1519))+(((-0.156433569372259)*x1525))+(((0.987688482454592)*x1527))+(((-0.987688482454592)*x1518))+(((-1.0)*py*sj11*x1519))),-1);
if(!x1541.valid){
continue;
}
j13array[1]=((-2.0)*(atan(((((-1.0)*sj12*x1515*(x1540.value)))+((x1522*x1531))+x1536+x1532+(((-1.0)*sj12*x1517*(x1541.value)))))));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j14eval[1];
j14eval[0]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
j14eval[0]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x233=(cj11*px);
IkReal x234=((6.58458988303061)*cj12);
IkReal x235=((6.66666666666667)*sj12);
IkReal x236=(py*sj11);
if( IKabs(((0.1)+(((-1.0)*x233*x235))+(((6.66666666666667)*cj12*pz))+(((-1.0)*x235*x236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+((x234*x236))+((x233*x234))+(((-1.04289046248173)*cj11*py))+(((6.58458988303061)*pz*sj12))+(((1.04289046248173)*px*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.1)+(((-1.0)*x233*x235))+(((6.66666666666667)*cj12*pz))+(((-1.0)*x235*x236))))+IKsqr(((-1.19326326256527)+((x234*x236))+((x233*x234))+(((-1.04289046248173)*cj11*py))+(((6.58458988303061)*pz*sj12))+(((1.04289046248173)*px*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.1)+(((-1.0)*x233*x235))+(((6.66666666666667)*cj12*pz))+(((-1.0)*x235*x236))), ((-1.19326326256527)+((x234*x236))+((x233*x234))+(((-1.04289046248173)*cj11*py))+(((6.58458988303061)*pz*sj12))+(((1.04289046248173)*px*sj11))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x237=(py*sj11);
IkReal x238=((0.987688482454592)*cj12);
IkReal x239=((1.0)*sj12);
IkReal x240=(cj11*px);
evalcond[0]=((0.015)+((cj12*pz))+(((-0.15)*(IKsin(j14))))+(((-1.0)*x237*x239))+(((-1.0)*x239*x240)));
evalcond[1]=((-0.17898948938479)+((x237*x238))+((x238*x240))+(((0.987688482454592)*pz*sj12))+(((-0.15)*(IKcos(j14))))+(((0.156433569372259)*px*sj11))+(((-0.156433569372259)*cj11*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
sj13=0;
cj13=1.0;
j13=0;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=0;
cj13=1.0;
j13=0;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x241=(r01*sj11);
IkReal x242=((0.156433569372259)*cj12);
IkReal x243=(cj11*r00);
if( IKabs(((((-1.0)*cj12*r02))+((sj12*x241))+((sj12*x243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x242*x243))+(((-1.0)*x241*x242))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r02))+((sj12*x241))+((sj12*x243))))+IKsqr(((((-1.0)*x242*x243))+(((-1.0)*x241*x242))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*r02))+((sj12*x241))+((sj12*x243))), ((((-1.0)*x242*x243))+(((-1.0)*x241*x242))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x244=(cj11*r00);
IkReal x245=((0.156433569372259)*cj12);
IkReal x246=((1.0)*sj12);
IkReal x247=(r01*sj11);
evalcond[0]=((IKsin(j15))+((cj12*r02))+(((-1.0)*x246*x247))+(((-1.0)*x244*x246)));
evalcond[1]=(((x244*x245))+(((-0.987688482454592)*r00*sj11))+(IKcos(j15))+(((0.987688482454592)*cj11*r01))+((x245*x247))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x248=(cj11*r00);
IkReal x249=((0.156433569372259)*cj12);
IkReal x250=((1.0)*sj12);
IkReal x251=(r01*sj11);
if( IKabs(((((-1.0)*x250*x251))+(((-1.0)*x248*x250))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x248*x249))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x249*x251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x250*x251))+(((-1.0)*x248*x250))+((cj12*r02))))+IKsqr(((((-1.0)*x248*x249))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x249*x251))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*x250*x251))+(((-1.0)*x248*x250))+((cj12*r02))), ((((-1.0)*x248*x249))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x249*x251))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x252=(cj11*r00);
IkReal x253=((0.156433569372259)*cj12);
IkReal x254=((1.0)*sj12);
IkReal x255=(r01*sj11);
evalcond[0]=((((-1.0)*x252*x254))+(((-1.0)*(IKsin(j15))))+(((-1.0)*x254*x255))+((cj12*r02)));
evalcond[1]=(((x253*x255))+(((-0.987688482454592)*r00*sj11))+(IKcos(j15))+(((0.987688482454592)*cj11*r01))+((x252*x253))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x256=((0.987688482454592)*r01);
IkReal x257=((0.156433569372259)*sj11);
IkReal x258=(r02*sj12);
IkReal x259=(cj11*cj12*r00);
if( IKabs((((r00*x257))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x256))+(((0.987688482454592)*x259))+(((0.987688482454592)*x258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r01*x257))+(((-0.156433569372259)*x259))+(((-0.156433569372259)*x258))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj11*x256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x257))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x256))+(((0.987688482454592)*x259))+(((0.987688482454592)*x258))))+IKsqr(((((-1.0)*cj12*r01*x257))+(((-0.156433569372259)*x259))+(((-0.156433569372259)*x258))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj11*x256))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((r00*x257))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x256))+(((0.987688482454592)*x259))+(((0.987688482454592)*x258))), ((((-1.0)*cj12*r01*x257))+(((-0.156433569372259)*x259))+(((-0.156433569372259)*x258))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj11*x256))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x260=((0.156433569372259)*r00);
IkReal x261=(cj11*cj12);
IkReal x262=((0.987688482454592)*r01);
IkReal x263=(cj12*sj11);
IkReal x264=((0.156433569372259)*r01);
IkReal x265=((0.987688482454592)*r00);
IkReal x266=(r02*sj12);
evalcond[0]=((((0.156433569372259)*x266))+((x260*x261))+((x263*x264))+((cj11*x262))+(IKcos(j15))+(((-1.0)*sj11*x265)));
evalcond[1]=((((0.987688482454592)*x266))+(((-1.0)*(IKsin(j15))))+((x262*x263))+((sj11*x260))+(((-1.0)*cj11*x264))+((x261*x265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x267=((0.987688482454592)*r01);
IkReal x268=((0.156433569372259)*sj11);
IkReal x269=(r02*sj12);
IkReal x270=(cj11*cj12*r00);
if( IKabs(((((-1.0)*r00*x268))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x269))+(((-0.987688482454592)*x270))+(((-1.0)*cj12*sj11*x267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r01*x268))+(((-1.0)*cj11*x267))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x270))+(((-0.156433569372259)*x269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x268))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x269))+(((-0.987688482454592)*x270))+(((-1.0)*cj12*sj11*x267))))+IKsqr(((((-1.0)*cj12*r01*x268))+(((-1.0)*cj11*x267))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x270))+(((-0.156433569372259)*x269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*r00*x268))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x269))+(((-0.987688482454592)*x270))+(((-1.0)*cj12*sj11*x267))), ((((-1.0)*cj12*r01*x268))+(((-1.0)*cj11*x267))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x270))+(((-0.156433569372259)*x269))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x271=((0.987688482454592)*r01);
IkReal x272=((0.156433569372259)*sj11);
IkReal x273=(r02*sj12);
IkReal x274=(cj11*cj12*r00);
evalcond[0]=((IKsin(j15))+((cj12*sj11*x271))+(((-0.156433569372259)*cj11*r01))+((r00*x272))+(((0.987688482454592)*x273))+(((0.987688482454592)*x274)));
evalcond[1]=((((0.156433569372259)*x274))+(((0.156433569372259)*x273))+((cj12*r01*x272))+((cj11*x271))+(((-0.987688482454592)*r00*sj11))+(IKcos(j15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x275=((0.987688482454592)*r01);
IkReal x276=((0.156433569372259)*sj11);
IkReal x277=(r02*sj12);
IkReal x278=(cj11*cj12*r00);
CheckValue<IkReal> x279=IKPowWithIntegerCheck(sj14,-1);
if(!x279.valid){
continue;
}
if( IKabs(((x279.value)*((((cj12*sj11*x275))+(((-0.156433569372259)*cj11*r01))+((r00*x276))+(((0.987688482454592)*x277))+(((0.987688482454592)*x278)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r01*x276))+(((-1.0)*cj11*x275))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x278))+(((-0.156433569372259)*x277)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x279.value)*((((cj12*sj11*x275))+(((-0.156433569372259)*cj11*r01))+((r00*x276))+(((0.987688482454592)*x277))+(((0.987688482454592)*x278))))))+IKsqr(((((-1.0)*cj12*r01*x276))+(((-1.0)*cj11*x275))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x278))+(((-0.156433569372259)*x277))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x279.value)*((((cj12*sj11*x275))+(((-0.156433569372259)*cj11*r01))+((r00*x276))+(((0.987688482454592)*x277))+(((0.987688482454592)*x278))))), ((((-1.0)*cj12*r01*x276))+(((-1.0)*cj11*x275))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x278))+(((-0.156433569372259)*x277))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x280=IKsin(j15);
IkReal x281=(cj11*r00);
IkReal x282=((0.156433569372259)*cj12);
IkReal x283=((1.0)*sj12);
IkReal x284=(r00*sj11);
IkReal x285=(r01*sj11);
IkReal x286=((0.987688482454592)*cj12);
IkReal x287=(cj11*r01);
IkReal x288=(r02*sj12);
evalcond[0]=((((-1.0)*x281*x283))+((cj14*x280))+((cj12*r02))+(((-1.0)*x283*x285)));
evalcond[1]=((((0.156433569372259)*x288))+(((0.987688482454592)*x287))+(IKcos(j15))+(((-0.987688482454592)*x284))+((x281*x282))+((x282*x285)));
evalcond[2]=((((-1.0)*sj14*x280))+(((-0.156433569372259)*x287))+((x285*x286))+(((0.156433569372259)*x284))+(((0.987688482454592)*x288))+((x281*x286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x289=(r01*sj11);
IkReal x290=((0.156433569372259)*cj12);
IkReal x291=(cj11*r00);
CheckValue<IkReal> x292=IKPowWithIntegerCheck(cj14,-1);
if(!x292.valid){
continue;
}
if( IKabs(((x292.value)*(((((-1.0)*cj12*r02))+((sj12*x291))+((sj12*x289)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x290*x291))+(((-1.0)*x289*x290))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x292.value)*(((((-1.0)*cj12*r02))+((sj12*x291))+((sj12*x289))))))+IKsqr(((((-1.0)*x290*x291))+(((-1.0)*x289*x290))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x292.value)*(((((-1.0)*cj12*r02))+((sj12*x291))+((sj12*x289))))), ((((-1.0)*x290*x291))+(((-1.0)*x289*x290))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x293=IKsin(j15);
IkReal x294=(cj11*r00);
IkReal x295=((0.156433569372259)*cj12);
IkReal x296=((1.0)*sj12);
IkReal x297=(r00*sj11);
IkReal x298=(r01*sj11);
IkReal x299=((0.987688482454592)*cj12);
IkReal x300=(cj11*r01);
IkReal x301=(r02*sj12);
evalcond[0]=((((-1.0)*x296*x298))+((cj14*x293))+((cj12*r02))+(((-1.0)*x294*x296)));
evalcond[1]=((((-0.987688482454592)*x297))+((x295*x298))+(IKcos(j15))+((x294*x295))+(((0.987688482454592)*x300))+(((0.156433569372259)*x301)));
evalcond[2]=(((x298*x299))+(((-1.0)*sj14*x293))+(((-0.156433569372259)*x300))+(((0.156433569372259)*x297))+((x294*x299))+(((0.987688482454592)*x301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x302=(cj11*px);
IkReal x303=((6.58458988303061)*cj12);
IkReal x304=((6.66666666666667)*sj12);
IkReal x305=(py*sj11);
if( IKabs(((-0.1)+(((-6.66666666666667)*cj12*pz))+((x302*x304))+((x304*x305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+((x303*x305))+(((-1.04289046248173)*cj11*py))+((x302*x303))+(((6.58458988303061)*pz*sj12))+(((1.04289046248173)*px*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.1)+(((-6.66666666666667)*cj12*pz))+((x302*x304))+((x304*x305))))+IKsqr(((-1.19326326256527)+((x303*x305))+(((-1.04289046248173)*cj11*py))+((x302*x303))+(((6.58458988303061)*pz*sj12))+(((1.04289046248173)*px*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-0.1)+(((-6.66666666666667)*cj12*pz))+((x302*x304))+((x304*x305))), ((-1.19326326256527)+((x303*x305))+(((-1.04289046248173)*cj11*py))+((x302*x303))+(((6.58458988303061)*pz*sj12))+(((1.04289046248173)*px*sj11))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x306=(py*sj11);
IkReal x307=((0.987688482454592)*cj12);
IkReal x308=((1.0)*sj12);
IkReal x309=(cj11*px);
evalcond[0]=((0.015)+((cj12*pz))+(((-1.0)*x308*x309))+(((-1.0)*x306*x308))+(((0.15)*(IKsin(j14)))));
evalcond[1]=((-0.17898948938479)+(((0.987688482454592)*pz*sj12))+(((-0.15)*(IKcos(j14))))+(((0.156433569372259)*px*sj11))+((x307*x309))+((x306*x307))+(((-0.156433569372259)*cj11*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x310=(cj11*r00);
IkReal x311=((0.156433569372259)*cj12);
IkReal x312=((1.0)*sj12);
IkReal x313=(r01*sj11);
if( IKabs(((((-1.0)*x310*x312))+(((-1.0)*x312*x313))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x310*x311))+(((-0.987688482454592)*r00*sj11))+((x311*x313))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x310*x312))+(((-1.0)*x312*x313))+((cj12*r02))))+IKsqr((((x310*x311))+(((-0.987688482454592)*r00*sj11))+((x311*x313))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*x310*x312))+(((-1.0)*x312*x313))+((cj12*r02))), (((x310*x311))+(((-0.987688482454592)*r00*sj11))+((x311*x313))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x314=(cj11*r00);
IkReal x315=((0.156433569372259)*cj12);
IkReal x316=((1.0)*sj12);
IkReal x317=(r01*sj11);
evalcond[0]=((((-1.0)*(IKsin(j15))))+(((-1.0)*x314*x316))+((cj12*r02))+(((-1.0)*x316*x317)));
evalcond[1]=(((x315*x317))+(((-0.987688482454592)*r00*sj11))+(((-1.0)*(IKcos(j15))))+(((0.987688482454592)*cj11*r01))+((x314*x315))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x318=(r01*sj11);
IkReal x319=((0.156433569372259)*cj12);
IkReal x320=(cj11*r00);
if( IKabs(((((-1.0)*cj12*r02))+((sj12*x320))+((sj12*x318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x318*x319))+((x319*x320))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r02))+((sj12*x320))+((sj12*x318))))+IKsqr(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x318*x319))+((x319*x320))+(((0.156433569372259)*r02*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*r02))+((sj12*x320))+((sj12*x318))), ((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x318*x319))+((x319*x320))+(((0.156433569372259)*r02*sj12))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x321=(cj11*r00);
IkReal x322=((0.156433569372259)*cj12);
IkReal x323=((1.0)*sj12);
IkReal x324=(r01*sj11);
evalcond[0]=((IKsin(j15))+(((-1.0)*x321*x323))+(((-1.0)*x323*x324))+((cj12*r02)));
evalcond[1]=(((x322*x324))+(((-0.987688482454592)*r00*sj11))+(((-1.0)*(IKcos(j15))))+(((0.987688482454592)*cj11*r01))+((x321*x322))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x325=((0.987688482454592)*r01);
IkReal x326=((0.156433569372259)*sj11);
IkReal x327=(r02*sj12);
IkReal x328=(cj11*cj12*r00);
if( IKabs((((r00*x326))+(((0.987688482454592)*x327))+(((0.987688482454592)*x328))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj12*r01*x326))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x327))+(((0.156433569372259)*x328))+((cj11*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x326))+(((0.987688482454592)*x327))+(((0.987688482454592)*x328))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x325))))+IKsqr((((cj12*r01*x326))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x327))+(((0.156433569372259)*x328))+((cj11*x325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((r00*x326))+(((0.987688482454592)*x327))+(((0.987688482454592)*x328))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x325))), (((cj12*r01*x326))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x327))+(((0.156433569372259)*x328))+((cj11*x325))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x329=((0.987688482454592)*r01);
IkReal x330=((0.156433569372259)*sj11);
IkReal x331=(r02*sj12);
IkReal x332=(cj11*cj12*r00);
evalcond[0]=(((r00*x330))+(((0.987688482454592)*x331))+(((0.987688482454592)*x332))+(((-1.0)*(IKsin(j15))))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x329)));
evalcond[1]=(((cj12*r01*x330))+(((-0.987688482454592)*r00*sj11))+(((-1.0)*(IKcos(j15))))+(((0.156433569372259)*x331))+(((0.156433569372259)*x332))+((cj11*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x333=((0.987688482454592)*r01);
IkReal x334=((0.156433569372259)*sj11);
IkReal x335=(r02*sj12);
IkReal x336=(cj11*cj12*r00);
if( IKabs(((((-1.0)*r00*x334))+(((-1.0)*cj12*sj11*x333))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x335))+(((-0.987688482454592)*x336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj12*r01*x334))+(((-0.987688482454592)*r00*sj11))+((cj11*x333))+(((0.156433569372259)*x335))+(((0.156433569372259)*x336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x334))+(((-1.0)*cj12*sj11*x333))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x335))+(((-0.987688482454592)*x336))))+IKsqr((((cj12*r01*x334))+(((-0.987688482454592)*r00*sj11))+((cj11*x333))+(((0.156433569372259)*x335))+(((0.156433569372259)*x336))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*r00*x334))+(((-1.0)*cj12*sj11*x333))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x335))+(((-0.987688482454592)*x336))), (((cj12*r01*x334))+(((-0.987688482454592)*r00*sj11))+((cj11*x333))+(((0.156433569372259)*x335))+(((0.156433569372259)*x336))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x337=((0.987688482454592)*r01);
IkReal x338=((0.156433569372259)*sj11);
IkReal x339=(r02*sj12);
IkReal x340=(cj11*cj12*r00);
evalcond[0]=(((cj12*sj11*x337))+((r00*x338))+(IKsin(j15))+(((0.987688482454592)*x339))+(((0.987688482454592)*x340))+(((-0.156433569372259)*cj11*r01)));
evalcond[1]=(((cj12*r01*x338))+(((-0.987688482454592)*r00*sj11))+((cj11*x337))+(((-1.0)*(IKcos(j15))))+(((0.156433569372259)*x339))+(((0.156433569372259)*x340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x341=((0.987688482454592)*r01);
IkReal x342=((0.156433569372259)*sj11);
IkReal x343=(r02*sj12);
IkReal x344=(cj11*cj12*r00);
CheckValue<IkReal> x345=IKPowWithIntegerCheck(sj14,-1);
if(!x345.valid){
continue;
}
if( IKabs(((x345.value)*((((cj12*sj11*x341))+((r00*x342))+(((0.987688482454592)*x344))+(((0.987688482454592)*x343))+(((-0.156433569372259)*cj11*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x341))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x343))+(((0.156433569372259)*x344))+((cj12*r01*x342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x345.value)*((((cj12*sj11*x341))+((r00*x342))+(((0.987688482454592)*x344))+(((0.987688482454592)*x343))+(((-0.156433569372259)*cj11*r01))))))+IKsqr((((cj11*x341))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x343))+(((0.156433569372259)*x344))+((cj12*r01*x342))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x345.value)*((((cj12*sj11*x341))+((r00*x342))+(((0.987688482454592)*x344))+(((0.987688482454592)*x343))+(((-0.156433569372259)*cj11*r01))))), (((cj11*x341))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x343))+(((0.156433569372259)*x344))+((cj12*r01*x342))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x346=IKsin(j15);
IkReal x347=(cj11*r00);
IkReal x348=((0.156433569372259)*cj12);
IkReal x349=((1.0)*sj12);
IkReal x350=(r00*sj11);
IkReal x351=(cj11*r01);
IkReal x352=(r01*sj11);
IkReal x353=((0.987688482454592)*cj12);
IkReal x354=(r02*sj12);
IkReal x355=((1.0)*x346);
evalcond[0]=((((-1.0)*cj14*x355))+(((-1.0)*x349*x352))+(((-1.0)*x347*x349))+((cj12*r02)));
evalcond[1]=((((-0.987688482454592)*x350))+(((0.987688482454592)*x351))+((x347*x348))+(((-1.0)*(IKcos(j15))))+((x348*x352))+(((0.156433569372259)*x354)));
evalcond[2]=((((-0.156433569372259)*x351))+(((-1.0)*sj14*x355))+(((0.987688482454592)*x354))+((x352*x353))+((x347*x353))+(((0.156433569372259)*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x356=(cj11*r00);
IkReal x357=((0.156433569372259)*cj12);
IkReal x358=((1.0)*sj12);
IkReal x359=(r01*sj11);
CheckValue<IkReal> x360=IKPowWithIntegerCheck(cj14,-1);
if(!x360.valid){
continue;
}
if( IKabs(((x360.value)*(((((-1.0)*x356*x358))+(((-1.0)*x358*x359))+((cj12*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x356*x357))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x357*x359))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x360.value)*(((((-1.0)*x356*x358))+(((-1.0)*x358*x359))+((cj12*r02))))))+IKsqr((((x356*x357))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x357*x359))+(((0.156433569372259)*r02*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x360.value)*(((((-1.0)*x356*x358))+(((-1.0)*x358*x359))+((cj12*r02))))), (((x356*x357))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x357*x359))+(((0.156433569372259)*r02*sj12))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x361=IKsin(j15);
IkReal x362=(cj11*r00);
IkReal x363=((0.156433569372259)*cj12);
IkReal x364=((1.0)*sj12);
IkReal x365=(r00*sj11);
IkReal x366=(cj11*r01);
IkReal x367=(r01*sj11);
IkReal x368=((0.987688482454592)*cj12);
IkReal x369=(r02*sj12);
IkReal x370=((1.0)*x361);
evalcond[0]=((((-1.0)*x362*x364))+(((-1.0)*cj14*x370))+(((-1.0)*x364*x367))+((cj12*r02)));
evalcond[1]=((((0.156433569372259)*x369))+(((0.987688482454592)*x366))+(((-0.987688482454592)*x365))+(((-1.0)*(IKcos(j15))))+((x363*x367))+((x362*x363)));
evalcond[2]=((((-0.156433569372259)*x366))+(((0.156433569372259)*x365))+(((0.987688482454592)*x369))+(((-1.0)*sj14*x370))+((x362*x368))+((x367*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x371=((1.04289046248173)*px);
IkReal x372=(pz*sj12);
IkReal x373=(cj11*cj12);
IkReal x374=((6.58458988303061)*px);
IkReal x375=(cj11*py);
IkReal x376=(cj12*py*sj11);
if( IKabs(((0.188115755116895)+(((-1.04289046248173)*x376))+(((-1.04289046248173)*x372))+((sj11*x374))+(((-1.0)*x371*x373))+(((-6.58458988303061)*x375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+(((-1.04289046248173)*x375))+((sj11*x371))+((x373*x374))+(((6.58458988303061)*x372))+(((6.58458988303061)*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.188115755116895)+(((-1.04289046248173)*x376))+(((-1.04289046248173)*x372))+((sj11*x374))+(((-1.0)*x371*x373))+(((-6.58458988303061)*x375))))+IKsqr(((-1.19326326256527)+(((-1.04289046248173)*x375))+((sj11*x371))+((x373*x374))+(((6.58458988303061)*x372))+(((6.58458988303061)*x376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.188115755116895)+(((-1.04289046248173)*x376))+(((-1.04289046248173)*x372))+((sj11*x374))+(((-1.0)*x371*x373))+(((-6.58458988303061)*x375))), ((-1.19326326256527)+(((-1.04289046248173)*x375))+((sj11*x371))+((x373*x374))+(((6.58458988303061)*x372))+(((6.58458988303061)*x376))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x377=((0.987688482454592)*py);
IkReal x378=(cj12*sj11);
IkReal x379=(pz*sj12);
IkReal x380=((0.156433569372259)*cj11);
IkReal x381=(cj12*px);
IkReal x382=(px*sj11);
evalcond[0]=((-0.17898948938479)+(((-1.0)*py*x380))+(((0.987688482454592)*x379))+(((-0.15)*(IKcos(j14))))+(((0.156433569372259)*x382))+((x377*x378))+(((0.987688482454592)*cj11*x381)));
evalcond[1]=((-0.0282173632675343)+(((0.156433569372259)*x379))+((cj11*x377))+(((0.15)*(IKsin(j14))))+(((0.156433569372259)*py*x378))+((x380*x381))+(((-0.987688482454592)*x382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x383=(r01*sj11);
IkReal x384=((0.987688482454592)*cj12);
IkReal x385=(cj11*r00);
if( IKabs((((x384*x385))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x383*x384))+(((0.156433569372259)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x383))+((sj12*x385)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x384*x385))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x383*x384))+(((0.156433569372259)*r00*sj11))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x383))+((sj12*x385))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((x384*x385))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x383*x384))+(((0.156433569372259)*r00*sj11))), ((((-1.0)*cj12*r02))+((sj12*x383))+((sj12*x385))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x386=(cj11*r00);
IkReal x387=((1.0)*sj12);
IkReal x388=((0.987688482454592)*cj12);
IkReal x389=(r01*sj11);
evalcond[0]=((((-1.0)*x387*x389))+(IKcos(j15))+(((-1.0)*x386*x387))+((cj12*r02)));
evalcond[1]=((((-1.0)*(IKsin(j15))))+(((0.987688482454592)*r02*sj12))+((x386*x388))+((x388*x389))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x390=(r01*sj11);
IkReal x391=((0.987688482454592)*cj12);
IkReal x392=(cj11*r00);
if( IKabs(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x391*x392))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x390*x391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x392))+((sj12*x390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x391*x392))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x390*x391))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x392))+((sj12*x390))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x391*x392))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x390*x391))), ((((-1.0)*cj12*r02))+((sj12*x392))+((sj12*x390))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x393=(cj11*r00);
IkReal x394=((1.0)*sj12);
IkReal x395=((0.987688482454592)*cj12);
IkReal x396=(r01*sj11);
evalcond[0]=((((-1.0)*x394*x396))+(IKcos(j15))+((cj12*r02))+(((-1.0)*x393*x394)));
evalcond[1]=((IKsin(j15))+(((0.987688482454592)*r02*sj12))+((x395*x396))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x393*x395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x397=((0.156433569372259)*cj12);
IkReal x398=(cj11*r00);
IkReal x399=(r01*sj11);
if( IKabs(((((-0.987688482454592)*r00*sj11))+((x397*x398))+((x397*x399))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x398))+((sj12*x399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r00*sj11))+((x397*x398))+((x397*x399))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x398))+((sj12*x399))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r00*sj11))+((x397*x398))+((x397*x399))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))), ((((-1.0)*cj12*r02))+((sj12*x398))+((sj12*x399))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x400=(cj11*r00);
IkReal x401=((0.156433569372259)*cj12);
IkReal x402=((1.0)*sj12);
IkReal x403=(r01*sj11);
evalcond[0]=((((-1.0)*x402*x403))+(((-1.0)*x400*x402))+(IKcos(j15))+((cj12*r02)));
evalcond[1]=((((-1.0)*(IKsin(j15))))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x400*x401))+(((0.156433569372259)*r02*sj12))+((x401*x403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x404=((0.156433569372259)*cj12);
IkReal x405=(cj11*r00);
IkReal x406=(r01*sj11);
if( IKabs(((((-0.987688482454592)*cj11*r01))+(((-1.0)*x404*x406))+(((-1.0)*x404*x405))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x406))+((sj12*x405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*cj11*r01))+(((-1.0)*x404*x406))+(((-1.0)*x404*x405))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x406))+((sj12*x405))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*cj11*r01))+(((-1.0)*x404*x406))+(((-1.0)*x404*x405))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))), ((((-1.0)*cj12*r02))+((sj12*x406))+((sj12*x405))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x407=(cj11*r00);
IkReal x408=((0.156433569372259)*cj12);
IkReal x409=((1.0)*sj12);
IkReal x410=(r01*sj11);
evalcond[0]=((((-1.0)*x407*x409))+(IKcos(j15))+((cj12*r02))+(((-1.0)*x409*x410)));
evalcond[1]=(((x407*x408))+(IKsin(j15))+((x408*x410))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x411=((0.156433569372259)*cj12);
IkReal x412=(cj11*r00);
IkReal x413=(r01*sj11);
CheckValue<IkReal> x414=IKPowWithIntegerCheck(cj14,-1);
if(!x414.valid){
continue;
}
if( IKabs(((x414.value)*((((x411*x412))+((x411*x413))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x413))+((sj12*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x414.value)*((((x411*x412))+((x411*x413))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x413))+((sj12*x412))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x414.value)*((((x411*x412))+((x411*x413))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))), ((((-1.0)*cj12*r02))+((sj12*x413))+((sj12*x412))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x415=IKsin(j15);
IkReal x416=(cj11*r00);
IkReal x417=((0.156433569372259)*cj12);
IkReal x418=((1.0)*sj12);
IkReal x419=((0.987688482454592)*cj12);
IkReal x420=(r01*sj11);
IkReal x421=(r00*sj11);
IkReal x422=(cj11*r01);
IkReal x423=(r02*sj12);
IkReal x424=((1.0)*x415);
evalcond[0]=((((-1.0)*x416*x418))+(IKcos(j15))+(((-1.0)*x418*x420))+((cj12*r02)));
evalcond[1]=(((x416*x419))+(((-0.156433569372259)*x422))+(((0.156433569372259)*x421))+((x419*x420))+(((-1.0)*sj14*x424))+(((0.987688482454592)*x423)));
evalcond[2]=(((x416*x417))+(((-1.0)*cj14*x424))+(((0.156433569372259)*x423))+(((-0.987688482454592)*x421))+(((0.987688482454592)*x422))+((x417*x420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x425=(r01*sj11);
IkReal x426=((0.987688482454592)*cj12);
IkReal x427=(cj11*r00);
CheckValue<IkReal> x428=IKPowWithIntegerCheck(sj14,-1);
if(!x428.valid){
continue;
}
if( IKabs(((x428.value)*((((x426*x427))+((x425*x426))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x425))+((sj12*x427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x428.value)*((((x426*x427))+((x425*x426))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x425))+((sj12*x427))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x428.value)*((((x426*x427))+((x425*x426))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))))), ((((-1.0)*cj12*r02))+((sj12*x425))+((sj12*x427))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x429=IKsin(j15);
IkReal x430=(cj11*r00);
IkReal x431=((0.156433569372259)*cj12);
IkReal x432=((1.0)*sj12);
IkReal x433=((0.987688482454592)*cj12);
IkReal x434=(r01*sj11);
IkReal x435=(r00*sj11);
IkReal x436=(cj11*r01);
IkReal x437=(r02*sj12);
IkReal x438=((1.0)*x429);
evalcond[0]=((((-1.0)*x430*x432))+(((-1.0)*x432*x434))+(IKcos(j15))+((cj12*r02)));
evalcond[1]=((((0.987688482454592)*x437))+(((0.156433569372259)*x435))+(((-0.156433569372259)*x436))+((x430*x433))+(((-1.0)*sj14*x438))+((x433*x434)));
evalcond[2]=((((0.987688482454592)*x436))+(((0.156433569372259)*x437))+(((-1.0)*cj14*x438))+(((-0.987688482454592)*x435))+((x430*x431))+((x431*x434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x439=((1.04289046248173)*px);
IkReal x440=(pz*sj12);
IkReal x441=(cj11*cj12);
IkReal x442=((6.58458988303061)*px);
IkReal x443=(cj11*py);
IkReal x444=(cj12*py*sj11);
if( IKabs(((-0.188115755116895)+((x439*x441))+(((1.04289046248173)*x440))+(((1.04289046248173)*x444))+(((6.58458988303061)*x443))+(((-1.0)*sj11*x442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+(((-1.04289046248173)*x443))+(((6.58458988303061)*x440))+(((6.58458988303061)*x444))+((x441*x442))+((sj11*x439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.188115755116895)+((x439*x441))+(((1.04289046248173)*x440))+(((1.04289046248173)*x444))+(((6.58458988303061)*x443))+(((-1.0)*sj11*x442))))+IKsqr(((-1.19326326256527)+(((-1.04289046248173)*x443))+(((6.58458988303061)*x440))+(((6.58458988303061)*x444))+((x441*x442))+((sj11*x439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-0.188115755116895)+((x439*x441))+(((1.04289046248173)*x440))+(((1.04289046248173)*x444))+(((6.58458988303061)*x443))+(((-1.0)*sj11*x442))), ((-1.19326326256527)+(((-1.04289046248173)*x443))+(((6.58458988303061)*x440))+(((6.58458988303061)*x444))+((x441*x442))+((sj11*x439))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x445=((0.987688482454592)*py);
IkReal x446=(cj12*sj11);
IkReal x447=(pz*sj12);
IkReal x448=((0.156433569372259)*cj11);
IkReal x449=(cj12*px);
IkReal x450=(px*sj11);
evalcond[0]=((-0.17898948938479)+(((0.987688482454592)*cj11*x449))+(((-0.15)*(IKcos(j14))))+(((0.156433569372259)*x450))+((x445*x446))+(((-1.0)*py*x448))+(((0.987688482454592)*x447)));
evalcond[1]=((-0.0282173632675343)+(((0.156433569372259)*x447))+((cj11*x445))+(((0.156433569372259)*py*x446))+(((-0.15)*(IKsin(j14))))+((x448*x449))+(((-0.987688482454592)*x450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x451=((0.156433569372259)*cj12);
IkReal x452=(cj11*r00);
IkReal x453=(r01*sj11);
IkReal x454=((1.0)*sj12);
if( IKabs(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x451*x452))+(((-1.0)*x451*x453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x452*x454))+(((-1.0)*x453*x454))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x451*x452))+(((-1.0)*x451*x453))))+IKsqr(((((-1.0)*x452*x454))+(((-1.0)*x453*x454))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x451*x452))+(((-1.0)*x451*x453))), ((((-1.0)*x452*x454))+(((-1.0)*x453*x454))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x455=(cj11*r00);
IkReal x456=((0.156433569372259)*cj12);
IkReal x457=((1.0)*sj12);
IkReal x458=(r01*sj11);
evalcond[0]=((((-1.0)*x455*x457))+(((-1.0)*(IKcos(j15))))+(((-1.0)*x457*x458))+((cj12*r02)));
evalcond[1]=((IKsin(j15))+((x455*x456))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x456*x458))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x459=((0.156433569372259)*cj12);
IkReal x460=(cj11*r00);
IkReal x461=(r01*sj11);
IkReal x462=((1.0)*sj12);
if( IKabs(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x459*x461))+((x459*x460))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x460*x462))+(((-1.0)*x461*x462))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x459*x461))+((x459*x460))+(((0.156433569372259)*r02*sj12))))+IKsqr(((((-1.0)*x460*x462))+(((-1.0)*x461*x462))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x459*x461))+((x459*x460))+(((0.156433569372259)*r02*sj12))), ((((-1.0)*x460*x462))+(((-1.0)*x461*x462))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x463=(cj11*r00);
IkReal x464=((0.156433569372259)*cj12);
IkReal x465=((1.0)*sj12);
IkReal x466=(r01*sj11);
evalcond[0]=((((-1.0)*x465*x466))+(((-1.0)*x463*x465))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=((((-1.0)*(IKsin(j15))))+((x463*x464))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x464*x466))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x467=(cj11*r00);
IkReal x468=((1.0)*sj12);
IkReal x469=((0.987688482454592)*cj12);
IkReal x470=(r01*sj11);
if( IKabs((((x469*x470))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x467*x469))+(((0.156433569372259)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x468*x470))+(((-1.0)*x467*x468))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x469*x470))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x467*x469))+(((0.156433569372259)*r00*sj11))))+IKsqr(((((-1.0)*x468*x470))+(((-1.0)*x467*x468))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((x469*x470))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x467*x469))+(((0.156433569372259)*r00*sj11))), ((((-1.0)*x468*x470))+(((-1.0)*x467*x468))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x471=(cj11*r00);
IkReal x472=((1.0)*sj12);
IkReal x473=((0.987688482454592)*cj12);
IkReal x474=(r01*sj11);
evalcond[0]=((((-1.0)*x472*x474))+(((-1.0)*x471*x472))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=(((x471*x473))+((x473*x474))+(((-1.0)*(IKsin(j15))))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x475=(cj11*r00);
IkReal x476=((1.0)*sj12);
IkReal x477=((0.987688482454592)*cj12);
IkReal x478=(r01*sj11);
if( IKabs(((((-0.987688482454592)*r02*sj12))+(((-1.0)*x477*x478))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x475*x477))+(((0.156433569372259)*cj11*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x475*x476))+(((-1.0)*x476*x478))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r02*sj12))+(((-1.0)*x477*x478))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x475*x477))+(((0.156433569372259)*cj11*r01))))+IKsqr(((((-1.0)*x475*x476))+(((-1.0)*x476*x478))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r02*sj12))+(((-1.0)*x477*x478))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x475*x477))+(((0.156433569372259)*cj11*r01))), ((((-1.0)*x475*x476))+(((-1.0)*x476*x478))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x479=(cj11*r00);
IkReal x480=((1.0)*sj12);
IkReal x481=((0.987688482454592)*cj12);
IkReal x482=(r01*sj11);
evalcond[0]=((((-1.0)*x480*x482))+(((-1.0)*x479*x480))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=((IKsin(j15))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x481*x482))+(((0.156433569372259)*r00*sj11))+((x479*x481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x483=(cj11*r00);
IkReal x484=((1.0)*sj12);
IkReal x485=((0.987688482454592)*cj12);
IkReal x486=(r01*sj11);
CheckValue<IkReal> x487=IKPowWithIntegerCheck(sj14,-1);
if(!x487.valid){
continue;
}
if( IKabs(((x487.value)*((((x485*x486))+((x483*x485))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x484*x486))+(((-1.0)*x483*x484))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x487.value)*((((x485*x486))+((x483*x485))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))))))+IKsqr(((((-1.0)*x484*x486))+(((-1.0)*x483*x484))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x487.value)*((((x485*x486))+((x483*x485))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))))), ((((-1.0)*x484*x486))+(((-1.0)*x483*x484))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x488=IKsin(j15);
IkReal x489=(cj11*r00);
IkReal x490=((0.156433569372259)*cj12);
IkReal x491=((1.0)*sj12);
IkReal x492=(r00*sj11);
IkReal x493=(cj11*r01);
IkReal x494=(r01*sj11);
IkReal x495=((0.987688482454592)*cj12);
IkReal x496=(r02*sj12);
evalcond[0]=((((-1.0)*x489*x491))+(((-1.0)*x491*x494))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=((((-0.987688482454592)*x492))+(((0.987688482454592)*x493))+((x489*x490))+((x490*x494))+(((0.156433569372259)*x496))+((cj14*x488)));
evalcond[2]=((((0.987688482454592)*x496))+((x489*x495))+((x494*x495))+(((-1.0)*sj14*x488))+(((-0.156433569372259)*x493))+(((0.156433569372259)*x492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x497=((0.156433569372259)*cj12);
IkReal x498=(cj11*r00);
IkReal x499=(r01*sj11);
IkReal x500=((1.0)*sj12);
CheckValue<IkReal> x501=IKPowWithIntegerCheck(cj14,-1);
if(!x501.valid){
continue;
}
if( IKabs(((x501.value)*(((((-1.0)*x497*x498))+(((-1.0)*x497*x499))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x499*x500))+((cj12*r02))+(((-1.0)*x498*x500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x501.value)*(((((-1.0)*x497*x498))+(((-1.0)*x497*x499))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))))+IKsqr(((((-1.0)*x499*x500))+((cj12*r02))+(((-1.0)*x498*x500))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x501.value)*(((((-1.0)*x497*x498))+(((-1.0)*x497*x499))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))), ((((-1.0)*x499*x500))+((cj12*r02))+(((-1.0)*x498*x500))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x502=IKsin(j15);
IkReal x503=(cj11*r00);
IkReal x504=((0.156433569372259)*cj12);
IkReal x505=((1.0)*sj12);
IkReal x506=(r00*sj11);
IkReal x507=(cj11*r01);
IkReal x508=(r01*sj11);
IkReal x509=((0.987688482454592)*cj12);
IkReal x510=(r02*sj12);
evalcond[0]=((((-1.0)*x505*x508))+(((-1.0)*x503*x505))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=((((0.156433569372259)*x510))+(((0.987688482454592)*x507))+((cj14*x502))+((x503*x504))+(((-0.987688482454592)*x506))+((x504*x508)));
evalcond[2]=((((0.987688482454592)*x510))+(((0.156433569372259)*x506))+((x508*x509))+(((-1.0)*sj14*x502))+((x503*x509))+(((-0.156433569372259)*x507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14, j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x511=(cj11*py);
IkReal x512=(px*sj11);
IkReal x513=((3.12867138744518)*cj12);
IkReal x514=(cj11*px);
IkReal x515=(pz*sj12);
IkReal x516=(py*sj11);
IkReal x517=((6.58458988303061)*cj12);
CheckValue<IkReal> x518=IKPowWithIntegerCheck(sj13,-1);
if(!x518.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x518.value)*(((0.564347265350685)+(((-1.0)*x513*x516))+(((-1.0)*x513*x514))+(((-19.7537696490918)*x511))+(((-3.12867138744518)*x515))+(((19.7537696490918)*x512)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+(((1.04289046248173)*x512))+((x514*x517))+(((6.58458988303061)*x515))+(((-1.04289046248173)*x511))+((x516*x517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x518.value)*(((0.564347265350685)+(((-1.0)*x513*x516))+(((-1.0)*x513*x514))+(((-19.7537696490918)*x511))+(((-3.12867138744518)*x515))+(((19.7537696490918)*x512))))))+IKsqr(((-1.19326326256527)+(((1.04289046248173)*x512))+((x514*x517))+(((6.58458988303061)*x515))+(((-1.04289046248173)*x511))+((x516*x517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.333333333333333)*(x518.value)*(((0.564347265350685)+(((-1.0)*x513*x516))+(((-1.0)*x513*x514))+(((-19.7537696490918)*x511))+(((-3.12867138744518)*x515))+(((19.7537696490918)*x512))))), ((-1.19326326256527)+(((1.04289046248173)*x512))+((x514*x517))+(((6.58458988303061)*x515))+(((-1.04289046248173)*x511))+((x516*x517))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x519=IKsin(j14);
IkReal x520=((0.987688482454592)*py);
IkReal x521=(cj12*sj11);
IkReal x522=(px*sj11);
IkReal x523=(pz*sj12);
IkReal x524=((1.0)*sj12);
IkReal x525=((0.156433569372259)*cj11);
IkReal x526=(cj12*px);
IkReal x527=((0.15)*x519);
evalcond[0]=((0.015)+((cj12*pz))+(((-1.0)*cj13*x527))+(((-1.0)*cj11*px*x524))+(((-1.0)*py*sj11*x524)));
evalcond[1]=((-0.17898948938479)+(((-0.15)*(IKcos(j14))))+(((0.156433569372259)*x522))+((x520*x521))+(((-1.0)*py*x525))+(((0.987688482454592)*cj11*x526))+(((0.987688482454592)*x523)));
evalcond[2]=((-0.0282173632675343)+(((0.156433569372259)*x523))+((x525*x526))+((cj11*x520))+(((-0.987688482454592)*x522))+((sj13*x527))+(((0.156433569372259)*py*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=sj14;
j15eval[1]=sj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=sj14;
j15eval[1]=cj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x528=(r00*sj13);
IkReal x529=((0.987688482454592)*sj11);
IkReal x530=((0.156433569372259)*cj12);
IkReal x531=(cj11*sj12);
IkReal x532=(cj13*r00);
IkReal x533=((0.156433569372259)*r02*sj12);
IkReal x534=((0.987688482454592)*cj11*r01);
IkReal x535=(cj13*r01*sj11);
IkReal x536=((1.0)*cj12*r02);
IkReal x537=(r01*sj11*sj13);
if( IKabs(((((-1.0)*cj13*x536))+((x531*x532))+(((-1.0)*x528*x529))+((cj11*x528*x530))+((x530*x537))+((sj12*x535))+((sj13*x533))+((sj13*x534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x530*x535))+(((-1.0)*cj13*x533))+(((-1.0)*cj13*x534))+(((-1.0)*sj13*x536))+((x528*x531))+((sj12*x537))+((x529*x532))+(((-1.0)*cj11*x530*x532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj13*x536))+((x531*x532))+(((-1.0)*x528*x529))+((cj11*x528*x530))+((x530*x537))+((sj12*x535))+((sj13*x533))+((sj13*x534))))+IKsqr(((((-1.0)*x530*x535))+(((-1.0)*cj13*x533))+(((-1.0)*cj13*x534))+(((-1.0)*sj13*x536))+((x528*x531))+((sj12*x537))+((x529*x532))+(((-1.0)*cj11*x530*x532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj13*x536))+((x531*x532))+(((-1.0)*x528*x529))+((cj11*x528*x530))+((x530*x537))+((sj12*x535))+((sj13*x533))+((sj13*x534))), ((((-1.0)*x530*x535))+(((-1.0)*cj13*x533))+(((-1.0)*cj13*x534))+(((-1.0)*sj13*x536))+((x528*x531))+((sj12*x537))+((x529*x532))+(((-1.0)*cj11*x530*x532))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x538=IKcos(j15);
IkReal x539=IKsin(j15);
IkReal x540=(cj11*r00);
IkReal x541=((0.156433569372259)*cj12);
IkReal x542=((1.0)*sj12);
IkReal x543=(r01*sj11);
evalcond[0]=((((-1.0)*x542*x543))+((cj13*x539))+(((-1.0)*x540*x542))+((cj12*r02))+((sj13*x538)));
evalcond[1]=(((x541*x543))+((cj13*x538))+((x540*x541))+(((-1.0)*sj13*x539))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x544=(r00*sj13);
IkReal x545=((0.987688482454592)*sj11);
IkReal x546=(cj12*cj13);
IkReal x547=((0.156433569372259)*cj11);
IkReal x548=(r01*sj11);
IkReal x549=(cj12*sj13);
IkReal x550=((0.156433569372259)*r02*sj12);
IkReal x551=((0.987688482454592)*cj11*r01);
IkReal x552=((1.0)*cj13*sj12);
if( IKabs(((((-1.0)*cj12*x544*x547))+(((-1.0)*sj13*x551))+(((-1.0)*sj13*x550))+((r02*x546))+((x544*x545))+(((-1.0)*x548*x552))+(((-1.0)*cj11*r00*x552))+(((-0.156433569372259)*x548*x549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj13*x551))+(((-1.0)*cj13*x550))+((cj13*r00*x545))+(((-0.156433569372259)*x546*x548))+((sj12*sj13*x548))+((cj11*sj12*x544))+(((-1.0)*r00*x546*x547))+(((-1.0)*r02*x549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*x544*x547))+(((-1.0)*sj13*x551))+(((-1.0)*sj13*x550))+((r02*x546))+((x544*x545))+(((-1.0)*x548*x552))+(((-1.0)*cj11*r00*x552))+(((-0.156433569372259)*x548*x549))))+IKsqr(((((-1.0)*cj13*x551))+(((-1.0)*cj13*x550))+((cj13*r00*x545))+(((-0.156433569372259)*x546*x548))+((sj12*sj13*x548))+((cj11*sj12*x544))+(((-1.0)*r00*x546*x547))+(((-1.0)*r02*x549))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*x544*x547))+(((-1.0)*sj13*x551))+(((-1.0)*sj13*x550))+((r02*x546))+((x544*x545))+(((-1.0)*x548*x552))+(((-1.0)*cj11*r00*x552))+(((-0.156433569372259)*x548*x549))), ((((-1.0)*cj13*x551))+(((-1.0)*cj13*x550))+((cj13*r00*x545))+(((-0.156433569372259)*x546*x548))+((sj12*sj13*x548))+((cj11*sj12*x544))+(((-1.0)*r00*x546*x547))+(((-1.0)*r02*x549))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x553=IKsin(j15);
IkReal x554=IKcos(j15);
IkReal x555=(cj11*r00);
IkReal x556=((0.156433569372259)*cj12);
IkReal x557=((1.0)*sj12);
IkReal x558=(r01*sj11);
evalcond[0]=((((-1.0)*x555*x557))+((sj13*x554))+((cj12*r02))+(((-1.0)*x557*x558))+(((-1.0)*cj13*x553)));
evalcond[1]=(((sj13*x553))+((cj13*x554))+((x555*x556))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x556*x558))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x559=(r01*sj11);
IkReal x560=((0.987688482454592)*cj12);
IkReal x561=(cj11*r00);
if( IKabs(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x560*x561))+(((0.156433569372259)*r00*sj11))+((x559*x560)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x561))+((sj12*x559)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x560*x561))+(((0.156433569372259)*r00*sj11))+((x559*x560))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x561))+((sj12*x559))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x560*x561))+(((0.156433569372259)*r00*sj11))+((x559*x560))), ((((-1.0)*cj12*r02))+((sj12*x561))+((sj12*x559))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x562=(cj11*r00);
IkReal x563=((1.0)*sj12);
IkReal x564=((0.987688482454592)*cj12);
IkReal x565=(r01*sj11);
evalcond[0]=((((-1.0)*x562*x563))+(IKcos(j15))+(((-1.0)*x563*x565))+((cj12*r02)));
evalcond[1]=(((x564*x565))+(((-1.0)*(IKsin(j15))))+(((0.987688482454592)*r02*sj12))+((x562*x564))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x566=(r01*sj11);
IkReal x567=((0.987688482454592)*cj12);
IkReal x568=(cj11*r00);
if( IKabs(((((-0.987688482454592)*r02*sj12))+(((-1.0)*x566*x567))+(((-0.156433569372259)*r00*sj11))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x567*x568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x566))+((sj12*x568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r02*sj12))+(((-1.0)*x566*x567))+(((-0.156433569372259)*r00*sj11))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x567*x568))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x566))+((sj12*x568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r02*sj12))+(((-1.0)*x566*x567))+(((-0.156433569372259)*r00*sj11))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x567*x568))), ((((-1.0)*cj12*r02))+((sj12*x566))+((sj12*x568))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x569=(cj11*r00);
IkReal x570=((1.0)*sj12);
IkReal x571=((0.987688482454592)*cj12);
IkReal x572=(r01*sj11);
evalcond[0]=((((-1.0)*x569*x570))+(((-1.0)*x570*x572))+(IKcos(j15))+((cj12*r02)));
evalcond[1]=(((x571*x572))+(IKsin(j15))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x569*x571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x573=((0.156433569372259)*cj12);
IkReal x574=(cj11*r00);
IkReal x575=(r01*sj11);
if( IKabs((((x573*x574))+((x573*x575))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x574))+((sj12*x575)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x573*x574))+((x573*x575))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x574))+((sj12*x575))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((x573*x574))+((x573*x575))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))), ((((-1.0)*cj12*r02))+((sj12*x574))+((sj12*x575))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x576=(cj11*r00);
IkReal x577=((0.156433569372259)*cj12);
IkReal x578=((1.0)*sj12);
IkReal x579=(r01*sj11);
evalcond[0]=((((-1.0)*x578*x579))+(((-1.0)*x576*x578))+(IKcos(j15))+((cj12*r02)));
evalcond[1]=(((x576*x577))+(((-1.0)*(IKsin(j15))))+(((-0.987688482454592)*r00*sj11))+((x577*x579))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x580=((0.156433569372259)*cj12);
IkReal x581=(cj11*r00);
IkReal x582=(r01*sj11);
if( IKabs(((((-1.0)*x580*x581))+(((-1.0)*x580*x582))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x582))+((sj12*x581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x580*x581))+(((-1.0)*x580*x582))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x582))+((sj12*x581))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*x580*x581))+(((-1.0)*x580*x582))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))), ((((-1.0)*cj12*r02))+((sj12*x582))+((sj12*x581))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x583=(cj11*r00);
IkReal x584=((0.156433569372259)*cj12);
IkReal x585=((1.0)*sj12);
IkReal x586=(r01*sj11);
evalcond[0]=((((-1.0)*x583*x585))+(((-1.0)*x585*x586))+(IKcos(j15))+((cj12*r02)));
evalcond[1]=(((x584*x586))+(IKsin(j15))+((x583*x584))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x587=((0.156433569372259)*cj12);
IkReal x588=(cj11*r00);
IkReal x589=(r01*sj11);
CheckValue<IkReal> x590=IKPowWithIntegerCheck(cj14,-1);
if(!x590.valid){
continue;
}
if( IKabs(((x590.value)*((((x587*x588))+((x587*x589))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x588))+((sj12*x589)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x590.value)*((((x587*x588))+((x587*x589))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x588))+((sj12*x589))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x590.value)*((((x587*x588))+((x587*x589))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))), ((((-1.0)*cj12*r02))+((sj12*x588))+((sj12*x589))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x591=IKsin(j15);
IkReal x592=(cj11*r00);
IkReal x593=((0.156433569372259)*cj12);
IkReal x594=((1.0)*sj12);
IkReal x595=((0.987688482454592)*cj12);
IkReal x596=(r01*sj11);
IkReal x597=(r00*sj11);
IkReal x598=(cj11*r01);
IkReal x599=(r02*sj12);
IkReal x600=((1.0)*x591);
evalcond[0]=((((-1.0)*x592*x594))+(((-1.0)*x594*x596))+(IKcos(j15))+((cj12*r02)));
evalcond[1]=((((0.156433569372259)*x597))+(((-1.0)*sj14*x600))+((x595*x596))+(((0.987688482454592)*x599))+(((-0.156433569372259)*x598))+((x592*x595)));
evalcond[2]=((((0.156433569372259)*x599))+(((-0.987688482454592)*x597))+(((0.987688482454592)*x598))+((x593*x596))+(((-1.0)*cj14*x600))+((x592*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x601=(r01*sj11);
IkReal x602=((0.987688482454592)*cj12);
IkReal x603=(cj11*r00);
CheckValue<IkReal> x604=IKPowWithIntegerCheck(sj14,-1);
if(!x604.valid){
continue;
}
if( IKabs(((x604.value)*((((x601*x602))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x602*x603)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x601))+((sj12*x603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x604.value)*((((x601*x602))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x602*x603))))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x601))+((sj12*x603))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x604.value)*((((x601*x602))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x602*x603))))), ((((-1.0)*cj12*r02))+((sj12*x601))+((sj12*x603))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x605=IKsin(j15);
IkReal x606=(cj11*r00);
IkReal x607=((0.156433569372259)*cj12);
IkReal x608=((1.0)*sj12);
IkReal x609=((0.987688482454592)*cj12);
IkReal x610=(r01*sj11);
IkReal x611=(r00*sj11);
IkReal x612=(cj11*r01);
IkReal x613=(r02*sj12);
IkReal x614=((1.0)*x605);
evalcond[0]=((IKcos(j15))+(((-1.0)*x606*x608))+((cj12*r02))+(((-1.0)*x608*x610)));
evalcond[1]=((((0.156433569372259)*x611))+(((-1.0)*sj14*x614))+(((0.987688482454592)*x613))+((x606*x609))+((x609*x610))+(((-0.156433569372259)*x612)));
evalcond[2]=((((0.156433569372259)*x613))+(((-1.0)*cj14*x614))+(((0.987688482454592)*x612))+(((-0.987688482454592)*x611))+((x606*x607))+((x607*x610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x615=((0.156433569372259)*cj12);
IkReal x616=(cj11*r00);
IkReal x617=(r01*sj11);
IkReal x618=((1.0)*sj12);
if( IKabs(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x615*x617))+(((-1.0)*x615*x616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x617*x618))+((cj12*r02))+(((-1.0)*x616*x618)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x615*x617))+(((-1.0)*x615*x616))))+IKsqr(((((-1.0)*x617*x618))+((cj12*r02))+(((-1.0)*x616*x618))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x615*x617))+(((-1.0)*x615*x616))), ((((-1.0)*x617*x618))+((cj12*r02))+(((-1.0)*x616*x618))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x619=(cj11*r00);
IkReal x620=((0.156433569372259)*cj12);
IkReal x621=((1.0)*sj12);
IkReal x622=(r01*sj11);
evalcond[0]=((((-1.0)*x621*x622))+(((-1.0)*(IKcos(j15))))+(((-1.0)*x619*x621))+((cj12*r02)));
evalcond[1]=((IKsin(j15))+((x619*x620))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))+((x620*x622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x623=((0.156433569372259)*cj12);
IkReal x624=(cj11*r00);
IkReal x625=(r01*sj11);
IkReal x626=((1.0)*sj12);
if( IKabs(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x623*x624))+((x623*x625))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x624*x626))+(((-1.0)*x625*x626))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x623*x624))+((x623*x625))+(((0.156433569372259)*r02*sj12))))+IKsqr(((((-1.0)*x624*x626))+(((-1.0)*x625*x626))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x623*x624))+((x623*x625))+(((0.156433569372259)*r02*sj12))), ((((-1.0)*x624*x626))+(((-1.0)*x625*x626))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x627=(cj11*r00);
IkReal x628=((0.156433569372259)*cj12);
IkReal x629=((1.0)*sj12);
IkReal x630=(r01*sj11);
evalcond[0]=((((-1.0)*x629*x630))+(((-1.0)*x627*x629))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=(((x628*x630))+(((-1.0)*(IKsin(j15))))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x627*x628))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x631=(cj11*r00);
IkReal x632=((1.0)*sj12);
IkReal x633=((0.987688482454592)*cj12);
IkReal x634=(r01*sj11);
if( IKabs(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x631*x633))+((x633*x634)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x631*x632))+((cj12*r02))+(((-1.0)*x632*x634)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x631*x633))+((x633*x634))))+IKsqr(((((-1.0)*x631*x632))+((cj12*r02))+(((-1.0)*x632*x634))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x631*x633))+((x633*x634))), ((((-1.0)*x631*x632))+((cj12*r02))+(((-1.0)*x632*x634))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x635=(cj11*r00);
IkReal x636=((1.0)*sj12);
IkReal x637=((0.987688482454592)*cj12);
IkReal x638=(r01*sj11);
evalcond[0]=((((-1.0)*x636*x638))+(((-1.0)*x635*x636))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=(((x635*x637))+(((-1.0)*(IKsin(j15))))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x637*x638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x639=(cj11*r00);
IkReal x640=((1.0)*sj12);
IkReal x641=((0.987688482454592)*cj12);
IkReal x642=(r01*sj11);
if( IKabs(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x641*x642))+(((-1.0)*x639*x641))+(((0.156433569372259)*cj11*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x640*x642))+(((-1.0)*x639*x640))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x641*x642))+(((-1.0)*x639*x641))+(((0.156433569372259)*cj11*r01))))+IKsqr(((((-1.0)*x640*x642))+(((-1.0)*x639*x640))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x641*x642))+(((-1.0)*x639*x641))+(((0.156433569372259)*cj11*r01))), ((((-1.0)*x640*x642))+(((-1.0)*x639*x640))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x643=(cj11*r00);
IkReal x644=((1.0)*sj12);
IkReal x645=((0.987688482454592)*cj12);
IkReal x646=(r01*sj11);
evalcond[0]=((((-1.0)*x644*x646))+(((-1.0)*x643*x644))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=((IKsin(j15))+((x643*x645))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x645*x646))+(((0.156433569372259)*r00*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x647=(cj11*r00);
IkReal x648=((1.0)*sj12);
IkReal x649=((0.987688482454592)*cj12);
IkReal x650=(r01*sj11);
CheckValue<IkReal> x651=IKPowWithIntegerCheck(sj14,-1);
if(!x651.valid){
continue;
}
if( IKabs(((x651.value)*(((((0.987688482454592)*r02*sj12))+((x649*x650))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x647*x649)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x647*x648))+(((-1.0)*x648*x650))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x651.value)*(((((0.987688482454592)*r02*sj12))+((x649*x650))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x647*x649))))))+IKsqr(((((-1.0)*x647*x648))+(((-1.0)*x648*x650))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x651.value)*(((((0.987688482454592)*r02*sj12))+((x649*x650))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x647*x649))))), ((((-1.0)*x647*x648))+(((-1.0)*x648*x650))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x652=IKsin(j15);
IkReal x653=(cj11*r00);
IkReal x654=((0.156433569372259)*cj12);
IkReal x655=((1.0)*sj12);
IkReal x656=(r00*sj11);
IkReal x657=(cj11*r01);
IkReal x658=(r01*sj11);
IkReal x659=((0.987688482454592)*cj12);
IkReal x660=(r02*sj12);
evalcond[0]=((((-1.0)*x655*x658))+(((-1.0)*(IKcos(j15))))+((cj12*r02))+(((-1.0)*x653*x655)));
evalcond[1]=((((0.987688482454592)*x657))+(((-0.987688482454592)*x656))+((x653*x654))+((x654*x658))+((cj14*x652))+(((0.156433569372259)*x660)));
evalcond[2]=(((x653*x659))+(((0.987688482454592)*x660))+(((-0.156433569372259)*x657))+(((0.156433569372259)*x656))+(((-1.0)*sj14*x652))+((x658*x659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x661=((0.156433569372259)*cj12);
IkReal x662=(cj11*r00);
IkReal x663=(r01*sj11);
IkReal x664=((1.0)*sj12);
CheckValue<IkReal> x665=IKPowWithIntegerCheck(cj14,-1);
if(!x665.valid){
continue;
}
if( IKabs(((x665.value)*(((((-1.0)*x661*x663))+(((-1.0)*x661*x662))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x662*x664))+(((-1.0)*x663*x664))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x665.value)*(((((-1.0)*x661*x663))+(((-1.0)*x661*x662))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))))+IKsqr(((((-1.0)*x662*x664))+(((-1.0)*x663*x664))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x665.value)*(((((-1.0)*x661*x663))+(((-1.0)*x661*x662))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))), ((((-1.0)*x662*x664))+(((-1.0)*x663*x664))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x666=IKsin(j15);
IkReal x667=(cj11*r00);
IkReal x668=((0.156433569372259)*cj12);
IkReal x669=((1.0)*sj12);
IkReal x670=(r00*sj11);
IkReal x671=(cj11*r01);
IkReal x672=(r01*sj11);
IkReal x673=((0.987688482454592)*cj12);
IkReal x674=(r02*sj12);
evalcond[0]=((((-1.0)*x669*x672))+(((-1.0)*(IKcos(j15))))+(((-1.0)*x667*x669))+((cj12*r02)));
evalcond[1]=((((-0.987688482454592)*x670))+((x667*x668))+(((0.156433569372259)*x674))+((cj14*x666))+(((0.987688482454592)*x671))+((x668*x672)));
evalcond[2]=((((-1.0)*sj14*x666))+((x672*x673))+(((0.156433569372259)*x670))+((x667*x673))+(((0.987688482454592)*x674))+(((-0.156433569372259)*x671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj13=0;
cj13=1.0;
j13=0;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=0;
cj13=1.0;
j13=0;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x675=(r01*sj11);
IkReal x676=((0.156433569372259)*cj12);
IkReal x677=(cj11*r00);
if( IKabs(((((-1.0)*cj12*r02))+((sj12*x677))+((sj12*x675)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x675*x676))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x676*x677)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r02))+((sj12*x677))+((sj12*x675))))+IKsqr(((((-1.0)*x675*x676))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x676*x677))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*r02))+((sj12*x677))+((sj12*x675))), ((((-1.0)*x675*x676))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x676*x677))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x678=(cj11*r00);
IkReal x679=((0.156433569372259)*cj12);
IkReal x680=((1.0)*sj12);
IkReal x681=(r01*sj11);
evalcond[0]=((IKsin(j15))+(((-1.0)*x680*x681))+(((-1.0)*x678*x680))+((cj12*r02)));
evalcond[1]=(((x679*x681))+((x678*x679))+(((-0.987688482454592)*r00*sj11))+(IKcos(j15))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x682=(cj11*r00);
IkReal x683=((0.156433569372259)*cj12);
IkReal x684=((1.0)*sj12);
IkReal x685=(r01*sj11);
if( IKabs(((((-1.0)*x684*x685))+(((-1.0)*x682*x684))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x682*x683))+(((-1.0)*x683*x685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x684*x685))+(((-1.0)*x682*x684))+((cj12*r02))))+IKsqr(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x682*x683))+(((-1.0)*x683*x685))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*x684*x685))+(((-1.0)*x682*x684))+((cj12*r02))), ((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x682*x683))+(((-1.0)*x683*x685))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x686=(cj11*r00);
IkReal x687=((0.156433569372259)*cj12);
IkReal x688=((1.0)*sj12);
IkReal x689=(r01*sj11);
evalcond[0]=((((-1.0)*x688*x689))+(((-1.0)*(IKsin(j15))))+(((-1.0)*x686*x688))+((cj12*r02)));
evalcond[1]=(((x686*x687))+((x687*x689))+(((-0.987688482454592)*r00*sj11))+(IKcos(j15))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x690=((0.987688482454592)*r01);
IkReal x691=((0.156433569372259)*sj11);
IkReal x692=(r02*sj12);
IkReal x693=(cj11*cj12*r00);
if( IKabs(((((0.987688482454592)*x693))+(((0.987688482454592)*x692))+(((-0.156433569372259)*cj11*r01))+((r00*x691))+((cj12*sj11*x690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r01*x691))+(((-0.156433569372259)*x693))+(((-0.156433569372259)*x692))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj11*x690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*x693))+(((0.987688482454592)*x692))+(((-0.156433569372259)*cj11*r01))+((r00*x691))+((cj12*sj11*x690))))+IKsqr(((((-1.0)*cj12*r01*x691))+(((-0.156433569372259)*x693))+(((-0.156433569372259)*x692))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj11*x690))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((0.987688482454592)*x693))+(((0.987688482454592)*x692))+(((-0.156433569372259)*cj11*r01))+((r00*x691))+((cj12*sj11*x690))), ((((-1.0)*cj12*r01*x691))+(((-0.156433569372259)*x693))+(((-0.156433569372259)*x692))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj11*x690))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x694=((0.156433569372259)*r00);
IkReal x695=(cj11*cj12);
IkReal x696=((0.987688482454592)*r01);
IkReal x697=(cj12*sj11);
IkReal x698=((0.156433569372259)*r01);
IkReal x699=((0.987688482454592)*r00);
IkReal x700=(r02*sj12);
evalcond[0]=(((x694*x695))+(((0.156433569372259)*x700))+((cj11*x696))+((x697*x698))+(IKcos(j15))+(((-1.0)*sj11*x699)));
evalcond[1]=(((x695*x699))+((x696*x697))+(((-1.0)*(IKsin(j15))))+(((0.987688482454592)*x700))+((sj11*x694))+(((-1.0)*cj11*x698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x701=((0.987688482454592)*r01);
IkReal x702=((0.156433569372259)*sj11);
IkReal x703=(r02*sj12);
IkReal x704=(cj11*cj12*r00);
if( IKabs(((((-1.0)*cj12*sj11*x701))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x704))+(((-0.987688482454592)*x703))+(((-1.0)*r00*x702)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj11*x701))+(((-1.0)*cj12*r01*x702))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x704))+(((-0.156433569372259)*x703)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*sj11*x701))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x704))+(((-0.987688482454592)*x703))+(((-1.0)*r00*x702))))+IKsqr(((((-1.0)*cj11*x701))+(((-1.0)*cj12*r01*x702))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x704))+(((-0.156433569372259)*x703))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*sj11*x701))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x704))+(((-0.987688482454592)*x703))+(((-1.0)*r00*x702))), ((((-1.0)*cj11*x701))+(((-1.0)*cj12*r01*x702))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x704))+(((-0.156433569372259)*x703))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x705=((0.987688482454592)*r01);
IkReal x706=((0.156433569372259)*sj11);
IkReal x707=(r02*sj12);
IkReal x708=(cj11*cj12*r00);
evalcond[0]=((IKsin(j15))+((r00*x706))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x708))+(((0.987688482454592)*x707))+((cj12*sj11*x705)));
evalcond[1]=((((0.156433569372259)*x708))+(((0.156433569372259)*x707))+((cj11*x705))+((cj12*r01*x706))+(((-0.987688482454592)*r00*sj11))+(IKcos(j15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x709=((0.987688482454592)*r01);
IkReal x710=((0.156433569372259)*sj11);
IkReal x711=(r02*sj12);
IkReal x712=(cj11*cj12*r00);
CheckValue<IkReal> x713=IKPowWithIntegerCheck(sj14,-1);
if(!x713.valid){
continue;
}
if( IKabs(((x713.value)*((((r00*x710))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x712))+(((0.987688482454592)*x711))+((cj12*sj11*x709)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj11*x709))+(((-1.0)*cj12*r01*x710))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x712))+(((-0.156433569372259)*x711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x713.value)*((((r00*x710))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x712))+(((0.987688482454592)*x711))+((cj12*sj11*x709))))))+IKsqr(((((-1.0)*cj11*x709))+(((-1.0)*cj12*r01*x710))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x712))+(((-0.156433569372259)*x711))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x713.value)*((((r00*x710))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x712))+(((0.987688482454592)*x711))+((cj12*sj11*x709))))), ((((-1.0)*cj11*x709))+(((-1.0)*cj12*r01*x710))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x712))+(((-0.156433569372259)*x711))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x714=IKsin(j15);
IkReal x715=(cj11*r00);
IkReal x716=((0.156433569372259)*cj12);
IkReal x717=((1.0)*sj12);
IkReal x718=(r00*sj11);
IkReal x719=(r01*sj11);
IkReal x720=((0.987688482454592)*cj12);
IkReal x721=(cj11*r01);
IkReal x722=(r02*sj12);
evalcond[0]=(((cj14*x714))+(((-1.0)*x717*x719))+((cj12*r02))+(((-1.0)*x715*x717)));
evalcond[1]=(((x715*x716))+(((0.156433569372259)*x722))+(((-0.987688482454592)*x718))+(IKcos(j15))+((x716*x719))+(((0.987688482454592)*x721)));
evalcond[2]=((((-0.156433569372259)*x721))+(((0.156433569372259)*x718))+(((-1.0)*sj14*x714))+((x719*x720))+(((0.987688482454592)*x722))+((x715*x720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x723=(r01*sj11);
IkReal x724=((0.156433569372259)*cj12);
IkReal x725=(cj11*r00);
CheckValue<IkReal> x726=IKPowWithIntegerCheck(cj14,-1);
if(!x726.valid){
continue;
}
if( IKabs(((x726.value)*(((((-1.0)*cj12*r02))+((sj12*x725))+((sj12*x723)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x724*x725))+(((-1.0)*x723*x724))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x726.value)*(((((-1.0)*cj12*r02))+((sj12*x725))+((sj12*x723))))))+IKsqr(((((-1.0)*x724*x725))+(((-1.0)*x723*x724))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x726.value)*(((((-1.0)*cj12*r02))+((sj12*x725))+((sj12*x723))))), ((((-1.0)*x724*x725))+(((-1.0)*x723*x724))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x727=IKsin(j15);
IkReal x728=(cj11*r00);
IkReal x729=((0.156433569372259)*cj12);
IkReal x730=((1.0)*sj12);
IkReal x731=(r00*sj11);
IkReal x732=(r01*sj11);
IkReal x733=((0.987688482454592)*cj12);
IkReal x734=(cj11*r01);
IkReal x735=(r02*sj12);
evalcond[0]=(((cj14*x727))+(((-1.0)*x730*x732))+((cj12*r02))+(((-1.0)*x728*x730)));
evalcond[1]=(((x728*x729))+(((0.156433569372259)*x735))+(((-0.987688482454592)*x731))+((x729*x732))+(IKcos(j15))+(((0.987688482454592)*x734)));
evalcond[2]=((((-0.156433569372259)*x734))+((x728*x733))+(((0.156433569372259)*x731))+(((-1.0)*sj14*x727))+((x732*x733))+(((0.987688482454592)*x735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x736=(cj11*r00);
IkReal x737=((0.156433569372259)*cj12);
IkReal x738=((1.0)*sj12);
IkReal x739=(r01*sj11);
if( IKabs(((((-1.0)*x736*x738))+(((-1.0)*x738*x739))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x736*x737))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x737*x739))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x736*x738))+(((-1.0)*x738*x739))+((cj12*r02))))+IKsqr((((x736*x737))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x737*x739))+(((0.156433569372259)*r02*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*x736*x738))+(((-1.0)*x738*x739))+((cj12*r02))), (((x736*x737))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x737*x739))+(((0.156433569372259)*r02*sj12))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x740=(cj11*r00);
IkReal x741=((0.156433569372259)*cj12);
IkReal x742=((1.0)*sj12);
IkReal x743=(r01*sj11);
evalcond[0]=((((-1.0)*(IKsin(j15))))+(((-1.0)*x742*x743))+(((-1.0)*x740*x742))+((cj12*r02)));
evalcond[1]=(((x740*x741))+((x741*x743))+(((-0.987688482454592)*r00*sj11))+(((-1.0)*(IKcos(j15))))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x744=(r01*sj11);
IkReal x745=((0.156433569372259)*cj12);
IkReal x746=(cj11*r00);
if( IKabs(((((-1.0)*cj12*r02))+((sj12*x744))+((sj12*x746)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x745*x746))+((x744*x745))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r02))+((sj12*x744))+((sj12*x746))))+IKsqr((((x745*x746))+((x744*x745))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*r02))+((sj12*x744))+((sj12*x746))), (((x745*x746))+((x744*x745))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x747=(cj11*r00);
IkReal x748=((0.156433569372259)*cj12);
IkReal x749=((1.0)*sj12);
IkReal x750=(r01*sj11);
evalcond[0]=((IKsin(j15))+(((-1.0)*x747*x749))+(((-1.0)*x749*x750))+((cj12*r02)));
evalcond[1]=(((x747*x748))+(((-0.987688482454592)*r00*sj11))+(((-1.0)*(IKcos(j15))))+(((0.987688482454592)*cj11*r01))+((x748*x750))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x751=((0.987688482454592)*r01);
IkReal x752=((0.156433569372259)*sj11);
IkReal x753=(r02*sj12);
IkReal x754=(cj11*cj12*r00);
if( IKabs(((((0.987688482454592)*x754))+(((0.987688482454592)*x753))+(((-0.156433569372259)*cj11*r01))+((r00*x752))+((cj12*sj11*x751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x751))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x754))+(((0.156433569372259)*x753))+((cj12*r01*x752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*x754))+(((0.987688482454592)*x753))+(((-0.156433569372259)*cj11*r01))+((r00*x752))+((cj12*sj11*x751))))+IKsqr((((cj11*x751))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x754))+(((0.156433569372259)*x753))+((cj12*r01*x752))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((0.987688482454592)*x754))+(((0.987688482454592)*x753))+(((-0.156433569372259)*cj11*r01))+((r00*x752))+((cj12*sj11*x751))), (((cj11*x751))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x754))+(((0.156433569372259)*x753))+((cj12*r01*x752))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x755=((0.987688482454592)*r01);
IkReal x756=((0.156433569372259)*sj11);
IkReal x757=(r02*sj12);
IkReal x758=(cj11*cj12*r00);
evalcond[0]=((((0.987688482454592)*x758))+(((0.987688482454592)*x757))+(((-1.0)*(IKsin(j15))))+(((-0.156433569372259)*cj11*r01))+((r00*x756))+((cj12*sj11*x755)));
evalcond[1]=(((cj11*x755))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x757))+(((0.156433569372259)*x758))+(((-1.0)*(IKcos(j15))))+((cj12*r01*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x759=((0.987688482454592)*r01);
IkReal x760=((0.156433569372259)*sj11);
IkReal x761=(r02*sj12);
IkReal x762=(cj11*cj12*r00);
if( IKabs(((((-1.0)*r00*x760))+(((-1.0)*cj12*sj11*x759))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x762))+(((-0.987688482454592)*x761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x759))+(((0.156433569372259)*x762))+(((0.156433569372259)*x761))+(((-0.987688482454592)*r00*sj11))+((cj12*r01*x760)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x760))+(((-1.0)*cj12*sj11*x759))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x762))+(((-0.987688482454592)*x761))))+IKsqr((((cj11*x759))+(((0.156433569372259)*x762))+(((0.156433569372259)*x761))+(((-0.987688482454592)*r00*sj11))+((cj12*r01*x760))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*r00*x760))+(((-1.0)*cj12*sj11*x759))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x762))+(((-0.987688482454592)*x761))), (((cj11*x759))+(((0.156433569372259)*x762))+(((0.156433569372259)*x761))+(((-0.987688482454592)*r00*sj11))+((cj12*r01*x760))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x763=((0.987688482454592)*r01);
IkReal x764=((0.156433569372259)*sj11);
IkReal x765=(r02*sj12);
IkReal x766=(cj11*cj12*r00);
evalcond[0]=((IKsin(j15))+(((0.987688482454592)*x766))+(((0.987688482454592)*x765))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x763))+((r00*x764)));
evalcond[1]=(((cj11*x763))+(((0.156433569372259)*x766))+(((0.156433569372259)*x765))+(((-0.987688482454592)*r00*sj11))+(((-1.0)*(IKcos(j15))))+((cj12*r01*x764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x767=((0.987688482454592)*r01);
IkReal x768=((0.156433569372259)*sj11);
IkReal x769=(r02*sj12);
IkReal x770=(cj11*cj12*r00);
CheckValue<IkReal> x771=IKPowWithIntegerCheck(sj14,-1);
if(!x771.valid){
continue;
}
if( IKabs(((x771.value)*(((((0.987688482454592)*x770))+(((0.987688482454592)*x769))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x767))+((r00*x768)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x767))+(((0.156433569372259)*x770))+(((0.156433569372259)*x769))+(((-0.987688482454592)*r00*sj11))+((cj12*r01*x768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x771.value)*(((((0.987688482454592)*x770))+(((0.987688482454592)*x769))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x767))+((r00*x768))))))+IKsqr((((cj11*x767))+(((0.156433569372259)*x770))+(((0.156433569372259)*x769))+(((-0.987688482454592)*r00*sj11))+((cj12*r01*x768))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x771.value)*(((((0.987688482454592)*x770))+(((0.987688482454592)*x769))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x767))+((r00*x768))))), (((cj11*x767))+(((0.156433569372259)*x770))+(((0.156433569372259)*x769))+(((-0.987688482454592)*r00*sj11))+((cj12*r01*x768))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x772=IKsin(j15);
IkReal x773=(cj11*r00);
IkReal x774=((0.156433569372259)*cj12);
IkReal x775=((1.0)*sj12);
IkReal x776=(r00*sj11);
IkReal x777=(cj11*r01);
IkReal x778=(r01*sj11);
IkReal x779=((0.987688482454592)*cj12);
IkReal x780=(r02*sj12);
IkReal x781=((1.0)*x772);
evalcond[0]=((((-1.0)*cj14*x781))+(((-1.0)*x775*x778))+(((-1.0)*x773*x775))+((cj12*r02)));
evalcond[1]=(((x774*x778))+(((0.987688482454592)*x777))+((x773*x774))+(((0.156433569372259)*x780))+(((-1.0)*(IKcos(j15))))+(((-0.987688482454592)*x776)));
evalcond[2]=((((-0.156433569372259)*x777))+((x773*x779))+(((-1.0)*sj14*x781))+((x778*x779))+(((0.156433569372259)*x776))+(((0.987688482454592)*x780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x782=(cj11*r00);
IkReal x783=((0.156433569372259)*cj12);
IkReal x784=((1.0)*sj12);
IkReal x785=(r01*sj11);
CheckValue<IkReal> x786=IKPowWithIntegerCheck(cj14,-1);
if(!x786.valid){
continue;
}
if( IKabs(((x786.value)*(((((-1.0)*x782*x784))+(((-1.0)*x784*x785))+((cj12*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x782*x783))+((x783*x785))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x786.value)*(((((-1.0)*x782*x784))+(((-1.0)*x784*x785))+((cj12*r02))))))+IKsqr((((x782*x783))+((x783*x785))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x786.value)*(((((-1.0)*x782*x784))+(((-1.0)*x784*x785))+((cj12*r02))))), (((x782*x783))+((x783*x785))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x787=IKsin(j15);
IkReal x788=(cj11*r00);
IkReal x789=((0.156433569372259)*cj12);
IkReal x790=((1.0)*sj12);
IkReal x791=(r00*sj11);
IkReal x792=(cj11*r01);
IkReal x793=(r01*sj11);
IkReal x794=((0.987688482454592)*cj12);
IkReal x795=(r02*sj12);
IkReal x796=((1.0)*x787);
evalcond[0]=((((-1.0)*x788*x790))+(((-1.0)*cj14*x796))+(((-1.0)*x790*x793))+((cj12*r02)));
evalcond[1]=((((0.156433569372259)*x795))+((x788*x789))+(((0.987688482454592)*x792))+(((-1.0)*(IKcos(j15))))+(((-0.987688482454592)*x791))+((x789*x793)));
evalcond[2]=(((x793*x794))+(((0.156433569372259)*x791))+((x788*x794))+(((-1.0)*sj14*x796))+(((0.987688482454592)*x795))+(((-0.156433569372259)*x792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj14=1.0;
cj14=0;
j14=1.5707963267949;
j15eval[0]=sj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj14=1.0;
cj14=0;
j14=1.5707963267949;
j15eval[0]=cj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x797=((0.987688482454592)*r01);
IkReal x798=((0.156433569372259)*sj11);
IkReal x799=(r02*sj12);
IkReal x800=(cj11*cj12*r00);
CheckValue<IkReal> x801=IKPowWithIntegerCheck(cj13,-1);
if(!x801.valid){
continue;
}
if( IKabs((((r00*x798))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x799))+((cj12*sj11*x797))+(((0.987688482454592)*x800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x801.value)*(((((-1.0)*cj12*r01*x798))+(((-1.0)*cj11*x797))+(((-0.156433569372259)*x800))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x799)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x798))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x799))+((cj12*sj11*x797))+(((0.987688482454592)*x800))))+IKsqr(((x801.value)*(((((-1.0)*cj12*r01*x798))+(((-1.0)*cj11*x797))+(((-0.156433569372259)*x800))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x799))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((r00*x798))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x799))+((cj12*sj11*x797))+(((0.987688482454592)*x800))), ((x801.value)*(((((-1.0)*cj12*r01*x798))+(((-1.0)*cj11*x797))+(((-0.156433569372259)*x800))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x799))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x802=IKcos(j15);
IkReal x803=(cj11*r00);
IkReal x804=((0.156433569372259)*cj12);
IkReal x805=((1.0)*sj12);
IkReal x806=(r00*sj11);
IkReal x807=(r01*sj11);
IkReal x808=((0.987688482454592)*cj12);
IkReal x809=(cj11*r01);
IkReal x810=(r02*sj12);
evalcond[0]=((((-1.0)*x805*x807))+(((-1.0)*x803*x805))+((cj12*r02))+((sj13*x802)));
evalcond[1]=((((0.156433569372259)*x806))+(((-1.0)*(IKsin(j15))))+(((0.987688482454592)*x810))+(((-0.156433569372259)*x809))+((x803*x808))+((x807*x808)));
evalcond[2]=(((x804*x807))+((cj13*x802))+((x803*x804))+(((-0.987688482454592)*x806))+(((0.156433569372259)*x810))+(((0.987688482454592)*x809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x811=((0.987688482454592)*cj12);
IkReal x812=(cj11*r00);
IkReal x813=(r01*sj11);
CheckValue<IkReal> x814=IKPowWithIntegerCheck(sj13,-1);
if(!x814.valid){
continue;
}
if( IKabs(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x811*x813))+((x811*x812))+(((0.156433569372259)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x814.value)*(((((-1.0)*cj12*r02))+((sj12*x813))+((sj12*x812)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x811*x813))+((x811*x812))+(((0.156433569372259)*r00*sj11))))+IKsqr(((x814.value)*(((((-1.0)*cj12*r02))+((sj12*x813))+((sj12*x812))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x811*x813))+((x811*x812))+(((0.156433569372259)*r00*sj11))), ((x814.value)*(((((-1.0)*cj12*r02))+((sj12*x813))+((sj12*x812))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x815=IKcos(j15);
IkReal x816=(cj11*r00);
IkReal x817=((0.156433569372259)*cj12);
IkReal x818=((1.0)*sj12);
IkReal x819=(r00*sj11);
IkReal x820=(r01*sj11);
IkReal x821=((0.987688482454592)*cj12);
IkReal x822=(cj11*r01);
IkReal x823=(r02*sj12);
evalcond[0]=((((-1.0)*x818*x820))+(((-1.0)*x816*x818))+((sj13*x815))+((cj12*r02)));
evalcond[1]=((((-0.156433569372259)*x822))+((x820*x821))+(((-1.0)*(IKsin(j15))))+((x816*x821))+(((0.987688482454592)*x823))+(((0.156433569372259)*x819)));
evalcond[2]=((((-0.987688482454592)*x819))+((x816*x817))+((x817*x820))+(((0.987688482454592)*x822))+((cj13*x815))+(((0.156433569372259)*x823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
j15eval[0]=sj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
j15eval[0]=cj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x824=((0.987688482454592)*r01);
IkReal x825=((0.156433569372259)*sj11);
IkReal x826=(r02*sj12);
IkReal x827=(cj11*cj12*r00);
CheckValue<IkReal> x828=IKPowWithIntegerCheck(cj13,-1);
if(!x828.valid){
continue;
}
if( IKabs(((((-1.0)*cj12*sj11*x824))+(((0.156433569372259)*cj11*r01))+(((-1.0)*r00*x825))+(((-0.987688482454592)*x826))+(((-0.987688482454592)*x827)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x828.value)*(((((-0.156433569372259)*x827))+(((-0.156433569372259)*x826))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj12*r01*x825))+(((-1.0)*cj11*x824)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*sj11*x824))+(((0.156433569372259)*cj11*r01))+(((-1.0)*r00*x825))+(((-0.987688482454592)*x826))+(((-0.987688482454592)*x827))))+IKsqr(((x828.value)*(((((-0.156433569372259)*x827))+(((-0.156433569372259)*x826))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj12*r01*x825))+(((-1.0)*cj11*x824))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*sj11*x824))+(((0.156433569372259)*cj11*r01))+(((-1.0)*r00*x825))+(((-0.987688482454592)*x826))+(((-0.987688482454592)*x827))), ((x828.value)*(((((-0.156433569372259)*x827))+(((-0.156433569372259)*x826))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj12*r01*x825))+(((-1.0)*cj11*x824))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x829=IKcos(j15);
IkReal x830=(cj11*r00);
IkReal x831=((0.156433569372259)*cj12);
IkReal x832=((1.0)*sj12);
IkReal x833=(r00*sj11);
IkReal x834=(r01*sj11);
IkReal x835=((0.987688482454592)*cj12);
IkReal x836=(cj11*r01);
IkReal x837=(r02*sj12);
evalcond[0]=((((-1.0)*x832*x834))+((sj13*x829))+(((-1.0)*x830*x832))+((cj12*r02)));
evalcond[1]=((IKsin(j15))+(((-0.156433569372259)*x836))+((x830*x835))+((x834*x835))+(((0.987688482454592)*x837))+(((0.156433569372259)*x833)));
evalcond[2]=(((x831*x834))+(((-0.987688482454592)*x833))+((x830*x831))+(((0.987688482454592)*x836))+((cj13*x829))+(((0.156433569372259)*x837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x838=((0.987688482454592)*cj12);
IkReal x839=(cj11*r00);
IkReal x840=(r01*sj11);
CheckValue<IkReal> x841=IKPowWithIntegerCheck(sj13,-1);
if(!x841.valid){
continue;
}
if( IKabs(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x838*x839))+(((-1.0)*x838*x840)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x841.value)*(((((-1.0)*cj12*r02))+((sj12*x840))+((sj12*x839)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x838*x839))+(((-1.0)*x838*x840))))+IKsqr(((x841.value)*(((((-1.0)*cj12*r02))+((sj12*x840))+((sj12*x839))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x838*x839))+(((-1.0)*x838*x840))), ((x841.value)*(((((-1.0)*cj12*r02))+((sj12*x840))+((sj12*x839))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x842=IKcos(j15);
IkReal x843=(cj11*r00);
IkReal x844=((0.156433569372259)*cj12);
IkReal x845=((1.0)*sj12);
IkReal x846=(r00*sj11);
IkReal x847=(r01*sj11);
IkReal x848=((0.987688482454592)*cj12);
IkReal x849=(cj11*r01);
IkReal x850=(r02*sj12);
evalcond[0]=((((-1.0)*x843*x845))+((sj13*x842))+(((-1.0)*x845*x847))+((cj12*r02)));
evalcond[1]=((((0.987688482454592)*x850))+(((-0.156433569372259)*x849))+(IKsin(j15))+((x843*x848))+((x847*x848))+(((0.156433569372259)*x846)));
evalcond[2]=((((-0.987688482454592)*x846))+(((0.156433569372259)*x850))+((x843*x844))+(((0.987688482454592)*x849))+((cj13*x842))+((x844*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x862=IKPowWithIntegerCheck(sj14,-1);
if(!x862.valid){
continue;
}
IkReal x851=x862.value;
IkReal x852=(cj11*r01);
IkReal x853=(r00*sj11);
IkReal x854=((0.987688482454592)*cj12);
IkReal x855=(cj11*r00);
IkReal x856=(r01*sj11);
IkReal x857=(cj14*sj13);
IkReal x858=((0.987688482454592)*sj14);
IkReal x859=(r02*sj12);
IkReal x860=((0.156433569372259)*sj14);
IkReal x861=((0.156433569372259)*x857);
CheckValue<IkReal> x863=IKPowWithIntegerCheck(cj13,-1);
if(!x863.valid){
continue;
}
if( IKabs((x851*(((((0.987688482454592)*x859))+(((0.156433569372259)*x853))+(((-0.156433569372259)*x852))+((x854*x855))+((x854*x856)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x851*(x863.value)*(((((-1.0)*cj12*x856*x860))+((x854*x856*x857))+(((-1.0)*x852*x858))+(((-1.0)*x852*x861))+(((0.987688482454592)*x857*x859))+((x854*x855*x857))+((x853*x861))+(((-1.0)*x859*x860))+((x853*x858))+(((-1.0)*cj12*x855*x860)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x851*(((((0.987688482454592)*x859))+(((0.156433569372259)*x853))+(((-0.156433569372259)*x852))+((x854*x855))+((x854*x856))))))+IKsqr((x851*(x863.value)*(((((-1.0)*cj12*x856*x860))+((x854*x856*x857))+(((-1.0)*x852*x858))+(((-1.0)*x852*x861))+(((0.987688482454592)*x857*x859))+((x854*x855*x857))+((x853*x861))+(((-1.0)*x859*x860))+((x853*x858))+(((-1.0)*cj12*x855*x860))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x851*(((((0.987688482454592)*x859))+(((0.156433569372259)*x853))+(((-0.156433569372259)*x852))+((x854*x855))+((x854*x856))))), (x851*(x863.value)*(((((-1.0)*cj12*x856*x860))+((x854*x856*x857))+(((-1.0)*x852*x858))+(((-1.0)*x852*x861))+(((0.987688482454592)*x857*x859))+((x854*x855*x857))+((x853*x861))+(((-1.0)*x859*x860))+((x853*x858))+(((-1.0)*cj12*x855*x860))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x864=IKsin(j15);
IkReal x865=IKcos(j15);
IkReal x866=(cj11*r00);
IkReal x867=((0.156433569372259)*cj12);
IkReal x868=((1.0)*sj12);
IkReal x869=(r00*sj11);
IkReal x870=(r01*sj11);
IkReal x871=((0.987688482454592)*cj12);
IkReal x872=(cj11*r01);
IkReal x873=(r02*sj12);
IkReal x874=((1.0)*x864);
evalcond[0]=((((-1.0)*x866*x868))+(((-1.0)*x868*x870))+((cj13*cj14*x864))+((cj12*r02))+((sj13*x865)));
evalcond[1]=((((-1.0)*sj14*x874))+(((0.987688482454592)*x873))+((x870*x871))+(((0.156433569372259)*x869))+((x866*x871))+(((-0.156433569372259)*x872)));
evalcond[2]=(((x867*x870))+(((0.987688482454592)*x872))+(((0.156433569372259)*x873))+(((-1.0)*cj14*sj13*x874))+((x866*x867))+((cj13*x865))+(((-0.987688482454592)*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x883=IKPowWithIntegerCheck(sj14,-1);
if(!x883.valid){
continue;
}
IkReal x875=x883.value;
IkReal x876=(cj13*cj14);
IkReal x877=(sj12*sj14);
IkReal x878=((0.987688482454592)*r02*sj12);
IkReal x879=((0.156433569372259)*r00*sj11);
IkReal x880=((0.156433569372259)*cj11*r01);
IkReal x881=((0.987688482454592)*cj11*cj12*r00);
IkReal x882=((0.987688482454592)*cj12*r01*sj11);
CheckValue<IkReal> x884=IKPowWithIntegerCheck(sj13,-1);
if(!x884.valid){
continue;
}
if( IKabs((x875*(((((-1.0)*x880))+x878+x879+x881+x882)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x875*(x884.value)*(((((-1.0)*x876*x879))+(((-1.0)*x876*x878))+((x876*x880))+((r01*sj11*x877))+(((-1.0)*x876*x882))+(((-1.0)*x876*x881))+((cj11*r00*x877))+(((-1.0)*cj12*r02*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x875*(((((-1.0)*x880))+x878+x879+x881+x882))))+IKsqr((x875*(x884.value)*(((((-1.0)*x876*x879))+(((-1.0)*x876*x878))+((x876*x880))+((r01*sj11*x877))+(((-1.0)*x876*x882))+(((-1.0)*x876*x881))+((cj11*r00*x877))+(((-1.0)*cj12*r02*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x875*(((((-1.0)*x880))+x878+x879+x881+x882))), (x875*(x884.value)*(((((-1.0)*x876*x879))+(((-1.0)*x876*x878))+((x876*x880))+((r01*sj11*x877))+(((-1.0)*x876*x882))+(((-1.0)*x876*x881))+((cj11*r00*x877))+(((-1.0)*cj12*r02*sj14))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x885=IKsin(j15);
IkReal x886=IKcos(j15);
IkReal x887=(cj11*r00);
IkReal x888=((0.156433569372259)*cj12);
IkReal x889=((1.0)*sj12);
IkReal x890=(r00*sj11);
IkReal x891=(r01*sj11);
IkReal x892=((0.987688482454592)*cj12);
IkReal x893=(cj11*r01);
IkReal x894=(r02*sj12);
IkReal x895=((1.0)*x885);
evalcond[0]=((((-1.0)*x887*x889))+((sj13*x886))+(((-1.0)*x889*x891))+((cj12*r02))+((cj13*cj14*x885)));
evalcond[1]=((((0.987688482454592)*x894))+(((0.156433569372259)*x890))+(((-1.0)*sj14*x895))+((x891*x892))+(((-0.156433569372259)*x893))+((x887*x892)));
evalcond[2]=(((x887*x888))+(((-0.987688482454592)*x890))+(((0.987688482454592)*x893))+((cj13*x886))+(((0.156433569372259)*x894))+(((-1.0)*cj14*sj13*x895))+((x888*x891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x896=(r00*sj13);
IkReal x897=((0.987688482454592)*sj11);
IkReal x898=((0.156433569372259)*cj12);
IkReal x899=(cj11*sj12);
IkReal x900=(cj13*r00);
IkReal x901=((0.156433569372259)*r02*sj12);
IkReal x902=((0.987688482454592)*cj11*r01);
IkReal x903=(cj13*r01*sj11);
IkReal x904=((1.0)*cj12*r02);
IkReal x905=(r01*sj11*sj13);
CheckValue<IkReal> x906=IKPowWithIntegerCheck(cj14,-1);
if(!x906.valid){
continue;
}
if( IKabs(((x906.value)*(((((-1.0)*x896*x897))+((x899*x900))+(((-1.0)*cj13*x904))+((sj13*x901))+((sj13*x902))+((sj12*x903))+((x898*x905))+((cj11*x896*x898)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj11*x898*x900))+((x896*x899))+((x897*x900))+(((-1.0)*x898*x903))+(((-1.0)*cj13*x902))+(((-1.0)*cj13*x901))+((sj12*x905))+(((-1.0)*sj13*x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x906.value)*(((((-1.0)*x896*x897))+((x899*x900))+(((-1.0)*cj13*x904))+((sj13*x901))+((sj13*x902))+((sj12*x903))+((x898*x905))+((cj11*x896*x898))))))+IKsqr(((((-1.0)*cj11*x898*x900))+((x896*x899))+((x897*x900))+(((-1.0)*x898*x903))+(((-1.0)*cj13*x902))+(((-1.0)*cj13*x901))+((sj12*x905))+(((-1.0)*sj13*x904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x906.value)*(((((-1.0)*x896*x897))+((x899*x900))+(((-1.0)*cj13*x904))+((sj13*x901))+((sj13*x902))+((sj12*x903))+((x898*x905))+((cj11*x896*x898))))), ((((-1.0)*cj11*x898*x900))+((x896*x899))+((x897*x900))+(((-1.0)*x898*x903))+(((-1.0)*cj13*x902))+(((-1.0)*cj13*x901))+((sj12*x905))+(((-1.0)*sj13*x904))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x907=IKsin(j15);
IkReal x908=IKcos(j15);
IkReal x909=(cj11*r00);
IkReal x910=((0.156433569372259)*cj12);
IkReal x911=((1.0)*sj12);
IkReal x912=(r00*sj11);
IkReal x913=(r01*sj11);
IkReal x914=((0.987688482454592)*cj12);
IkReal x915=(cj11*r01);
IkReal x916=(r02*sj12);
IkReal x917=((1.0)*x907);
evalcond[0]=(((sj13*x908))+((cj13*cj14*x907))+((cj12*r02))+(((-1.0)*x911*x913))+(((-1.0)*x909*x911)));
evalcond[1]=((((0.156433569372259)*x912))+((x909*x914))+(((0.987688482454592)*x916))+(((-0.156433569372259)*x915))+(((-1.0)*sj14*x917))+((x913*x914)));
evalcond[2]=((((0.156433569372259)*x916))+((x910*x913))+((x909*x910))+(((-0.987688482454592)*x912))+((cj13*x908))+(((0.987688482454592)*x915))+(((-1.0)*cj14*sj13*x917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x918=((20.0)*sj12);
IkReal x919=(py*sj11);
IkReal x920=(cj11*px);
IkReal x921=((6.58458988303061)*cj12);
CheckValue<IkReal> x922=IKPowWithIntegerCheck(cj13,-1);
if(!x922.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x922.value)*(((0.3)+(((-1.0)*x918*x919))+(((20.0)*cj12*pz))+(((-1.0)*x918*x920)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+((x919*x921))+((x920*x921))+(((-1.04289046248173)*cj11*py))+(((6.58458988303061)*pz*sj12))+(((1.04289046248173)*px*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x922.value)*(((0.3)+(((-1.0)*x918*x919))+(((20.0)*cj12*pz))+(((-1.0)*x918*x920))))))+IKsqr(((-1.19326326256527)+((x919*x921))+((x920*x921))+(((-1.04289046248173)*cj11*py))+(((6.58458988303061)*pz*sj12))+(((1.04289046248173)*px*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.333333333333333)*(x922.value)*(((0.3)+(((-1.0)*x918*x919))+(((20.0)*cj12*pz))+(((-1.0)*x918*x920))))), ((-1.19326326256527)+((x919*x921))+((x920*x921))+(((-1.04289046248173)*cj11*py))+(((6.58458988303061)*pz*sj12))+(((1.04289046248173)*px*sj11))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x923=IKsin(j14);
IkReal x924=((0.987688482454592)*py);
IkReal x925=(cj12*sj11);
IkReal x926=(px*sj11);
IkReal x927=(pz*sj12);
IkReal x928=((1.0)*sj12);
IkReal x929=((0.156433569372259)*cj11);
IkReal x930=(cj12*px);
IkReal x931=((0.15)*x923);
evalcond[0]=((0.015)+((cj12*pz))+(((-1.0)*cj13*x931))+(((-1.0)*cj11*px*x928))+(((-1.0)*py*sj11*x928)));
evalcond[1]=((-0.17898948938479)+(((0.987688482454592)*cj11*x930))+((x924*x925))+(((-0.15)*(IKcos(j14))))+(((-1.0)*py*x929))+(((0.156433569372259)*x926))+(((0.987688482454592)*x927)));
evalcond[2]=((-0.0282173632675343)+(((0.156433569372259)*py*x925))+((sj13*x931))+(((0.156433569372259)*x927))+(((-0.987688482454592)*x926))+((cj11*x924))+((x929*x930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=sj14;
j15eval[1]=sj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=sj14;
j15eval[1]=cj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x932=(r00*sj13);
IkReal x933=((0.987688482454592)*sj11);
IkReal x934=((0.156433569372259)*cj12);
IkReal x935=(cj11*sj12);
IkReal x936=(cj13*r00);
IkReal x937=((0.156433569372259)*r02*sj12);
IkReal x938=((0.987688482454592)*cj11*r01);
IkReal x939=(cj13*r01*sj11);
IkReal x940=((1.0)*cj12*r02);
IkReal x941=(r01*sj11*sj13);
if( IKabs((((sj12*x939))+((sj13*x938))+((sj13*x937))+(((-1.0)*cj13*x940))+((cj11*x932*x934))+((x935*x936))+((x934*x941))+(((-1.0)*x932*x933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj13*x938))+(((-1.0)*cj13*x937))+(((-1.0)*x934*x939))+((sj12*x941))+(((-1.0)*cj11*x934*x936))+(((-1.0)*sj13*x940))+((x933*x936))+((x932*x935)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj12*x939))+((sj13*x938))+((sj13*x937))+(((-1.0)*cj13*x940))+((cj11*x932*x934))+((x935*x936))+((x934*x941))+(((-1.0)*x932*x933))))+IKsqr(((((-1.0)*cj13*x938))+(((-1.0)*cj13*x937))+(((-1.0)*x934*x939))+((sj12*x941))+(((-1.0)*cj11*x934*x936))+(((-1.0)*sj13*x940))+((x933*x936))+((x932*x935))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((sj12*x939))+((sj13*x938))+((sj13*x937))+(((-1.0)*cj13*x940))+((cj11*x932*x934))+((x935*x936))+((x934*x941))+(((-1.0)*x932*x933))), ((((-1.0)*cj13*x938))+(((-1.0)*cj13*x937))+(((-1.0)*x934*x939))+((sj12*x941))+(((-1.0)*cj11*x934*x936))+(((-1.0)*sj13*x940))+((x933*x936))+((x932*x935))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x942=IKcos(j15);
IkReal x943=IKsin(j15);
IkReal x944=(cj11*r00);
IkReal x945=((0.156433569372259)*cj12);
IkReal x946=((1.0)*sj12);
IkReal x947=(r01*sj11);
evalcond[0]=((((-1.0)*x946*x947))+(((-1.0)*x944*x946))+((sj13*x942))+((cj13*x943))+((cj12*r02)));
evalcond[1]=(((x945*x947))+(((-1.0)*sj13*x943))+(((-0.987688482454592)*r00*sj11))+((x944*x945))+(((0.987688482454592)*cj11*r01))+((cj13*x942))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x948=(r00*sj13);
IkReal x949=((0.987688482454592)*sj11);
IkReal x950=(cj12*cj13);
IkReal x951=((0.156433569372259)*cj11);
IkReal x952=(r01*sj11);
IkReal x953=(cj12*sj13);
IkReal x954=((0.156433569372259)*r02*sj12);
IkReal x955=((0.987688482454592)*cj11*r01);
IkReal x956=((1.0)*cj13*sj12);
if( IKabs(((((-0.156433569372259)*x952*x953))+(((-1.0)*sj13*x955))+(((-1.0)*sj13*x954))+(((-1.0)*cj12*x948*x951))+((x948*x949))+((r02*x950))+(((-1.0)*cj11*r00*x956))+(((-1.0)*x952*x956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.156433569372259)*x950*x952))+((cj11*sj12*x948))+((sj12*sj13*x952))+(((-1.0)*r00*x950*x951))+((cj13*r00*x949))+(((-1.0)*cj13*x955))+(((-1.0)*cj13*x954))+(((-1.0)*r02*x953)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*x952*x953))+(((-1.0)*sj13*x955))+(((-1.0)*sj13*x954))+(((-1.0)*cj12*x948*x951))+((x948*x949))+((r02*x950))+(((-1.0)*cj11*r00*x956))+(((-1.0)*x952*x956))))+IKsqr(((((-0.156433569372259)*x950*x952))+((cj11*sj12*x948))+((sj12*sj13*x952))+(((-1.0)*r00*x950*x951))+((cj13*r00*x949))+(((-1.0)*cj13*x955))+(((-1.0)*cj13*x954))+(((-1.0)*r02*x953))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.156433569372259)*x952*x953))+(((-1.0)*sj13*x955))+(((-1.0)*sj13*x954))+(((-1.0)*cj12*x948*x951))+((x948*x949))+((r02*x950))+(((-1.0)*cj11*r00*x956))+(((-1.0)*x952*x956))), ((((-0.156433569372259)*x950*x952))+((cj11*sj12*x948))+((sj12*sj13*x952))+(((-1.0)*r00*x950*x951))+((cj13*r00*x949))+(((-1.0)*cj13*x955))+(((-1.0)*cj13*x954))+(((-1.0)*r02*x953))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x957=IKsin(j15);
IkReal x958=IKcos(j15);
IkReal x959=(cj11*r00);
IkReal x960=((0.156433569372259)*cj12);
IkReal x961=((1.0)*sj12);
IkReal x962=(r01*sj11);
evalcond[0]=((((-1.0)*cj13*x957))+(((-1.0)*x961*x962))+((sj13*x958))+(((-1.0)*x959*x961))+((cj12*r02)));
evalcond[1]=(((sj13*x957))+((x960*x962))+((cj13*x958))+(((-0.987688482454592)*r00*sj11))+((x959*x960))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x963=(r01*sj11);
IkReal x964=((0.987688482454592)*cj12);
IkReal x965=(cj11*r00);
if( IKabs(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x964*x965))+(((0.156433569372259)*r00*sj11))+((x963*x964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x965))+((sj12*x963)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x964*x965))+(((0.156433569372259)*r00*sj11))+((x963*x964))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x965))+((sj12*x963))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x964*x965))+(((0.156433569372259)*r00*sj11))+((x963*x964))), ((((-1.0)*cj12*r02))+((sj12*x965))+((sj12*x963))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x966=(cj11*r00);
IkReal x967=((1.0)*sj12);
IkReal x968=((0.987688482454592)*cj12);
IkReal x969=(r01*sj11);
evalcond[0]=((((-1.0)*x967*x969))+(((-1.0)*x966*x967))+(IKcos(j15))+((cj12*r02)));
evalcond[1]=((((-1.0)*(IKsin(j15))))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x968*x969))+(((0.156433569372259)*r00*sj11))+((x966*x968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x970=(r01*sj11);
IkReal x971=((0.987688482454592)*cj12);
IkReal x972=(cj11*r00);
if( IKabs(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x971*x972))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x970*x971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x972))+((sj12*x970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x971*x972))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x970*x971))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x972))+((sj12*x970))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x971*x972))+(((0.156433569372259)*cj11*r01))+(((-1.0)*x970*x971))), ((((-1.0)*cj12*r02))+((sj12*x972))+((sj12*x970))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x973=(cj11*r00);
IkReal x974=((1.0)*sj12);
IkReal x975=((0.987688482454592)*cj12);
IkReal x976=(r01*sj11);
evalcond[0]=((((-1.0)*x974*x976))+(IKcos(j15))+((cj12*r02))+(((-1.0)*x973*x974)));
evalcond[1]=((IKsin(j15))+((x975*x976))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x973*x975))+(((0.156433569372259)*r00*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x977=((0.156433569372259)*cj12);
IkReal x978=(cj11*r00);
IkReal x979=(r01*sj11);
if( IKabs((((x977*x978))+((x977*x979))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x978))+((sj12*x979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x977*x978))+((x977*x979))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x978))+((sj12*x979))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((x977*x978))+((x977*x979))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))), ((((-1.0)*cj12*r02))+((sj12*x978))+((sj12*x979))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x980=(cj11*r00);
IkReal x981=((0.156433569372259)*cj12);
IkReal x982=((1.0)*sj12);
IkReal x983=(r01*sj11);
evalcond[0]=((((-1.0)*x982*x983))+(IKcos(j15))+(((-1.0)*x980*x982))+((cj12*r02)));
evalcond[1]=(((x981*x983))+(((-1.0)*(IKsin(j15))))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x980*x981))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x984=((0.156433569372259)*cj12);
IkReal x985=(cj11*r00);
IkReal x986=(r01*sj11);
if( IKabs(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x984*x985))+(((-1.0)*x984*x986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x986))+((sj12*x985)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x984*x985))+(((-1.0)*x984*x986))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x986))+((sj12*x985))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x984*x985))+(((-1.0)*x984*x986))), ((((-1.0)*cj12*r02))+((sj12*x986))+((sj12*x985))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x987=(cj11*r00);
IkReal x988=((0.156433569372259)*cj12);
IkReal x989=((1.0)*sj12);
IkReal x990=(r01*sj11);
evalcond[0]=((IKcos(j15))+(((-1.0)*x987*x989))+(((-1.0)*x989*x990))+((cj12*r02)));
evalcond[1]=((IKsin(j15))+((x988*x990))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x987*x988))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x991=((0.156433569372259)*cj12);
IkReal x992=(cj11*r00);
IkReal x993=(r01*sj11);
CheckValue<IkReal> x994=IKPowWithIntegerCheck(cj14,-1);
if(!x994.valid){
continue;
}
if( IKabs(((x994.value)*((((x991*x992))+((x991*x993))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x992))+((sj12*x993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x994.value)*((((x991*x992))+((x991*x993))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x992))+((sj12*x993))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x994.value)*((((x991*x992))+((x991*x993))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))), ((((-1.0)*cj12*r02))+((sj12*x992))+((sj12*x993))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x995=IKsin(j15);
IkReal x996=(cj11*r00);
IkReal x997=((0.156433569372259)*cj12);
IkReal x998=((1.0)*sj12);
IkReal x999=((0.987688482454592)*cj12);
IkReal x1000=(r01*sj11);
IkReal x1001=(r00*sj11);
IkReal x1002=(cj11*r01);
IkReal x1003=(r02*sj12);
IkReal x1004=((1.0)*x995);
evalcond[0]=((((-1.0)*x996*x998))+(((-1.0)*x1000*x998))+(IKcos(j15))+((cj12*r02)));
evalcond[1]=(((x1000*x999))+(((-1.0)*sj14*x1004))+(((-0.156433569372259)*x1002))+(((0.987688482454592)*x1003))+(((0.156433569372259)*x1001))+((x996*x999)));
evalcond[2]=(((x1000*x997))+(((-1.0)*cj14*x1004))+(((0.987688482454592)*x1002))+(((-0.987688482454592)*x1001))+(((0.156433569372259)*x1003))+((x996*x997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1005=(r01*sj11);
IkReal x1006=((0.987688482454592)*cj12);
IkReal x1007=(cj11*r00);
CheckValue<IkReal> x1008=IKPowWithIntegerCheck(sj14,-1);
if(!x1008.valid){
continue;
}
if( IKabs(((x1008.value)*(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1006*x1007))+((x1005*x1006)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r02))+((sj12*x1005))+((sj12*x1007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1008.value)*(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1006*x1007))+((x1005*x1006))))))+IKsqr(((((-1.0)*cj12*r02))+((sj12*x1005))+((sj12*x1007))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x1008.value)*(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1006*x1007))+((x1005*x1006))))), ((((-1.0)*cj12*r02))+((sj12*x1005))+((sj12*x1007))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1009=IKsin(j15);
IkReal x1010=(cj11*r00);
IkReal x1011=((0.156433569372259)*cj12);
IkReal x1012=((1.0)*sj12);
IkReal x1013=((0.987688482454592)*cj12);
IkReal x1014=(r01*sj11);
IkReal x1015=(r00*sj11);
IkReal x1016=(cj11*r01);
IkReal x1017=(r02*sj12);
IkReal x1018=((1.0)*x1009);
evalcond[0]=((((-1.0)*x1012*x1014))+(((-1.0)*x1010*x1012))+(IKcos(j15))+((cj12*r02)));
evalcond[1]=((((0.987688482454592)*x1017))+((x1013*x1014))+(((0.156433569372259)*x1015))+(((-0.156433569372259)*x1016))+((x1010*x1013))+(((-1.0)*sj14*x1018)));
evalcond[2]=((((0.987688482454592)*x1016))+(((0.156433569372259)*x1017))+(((-0.987688482454592)*x1015))+((x1011*x1014))+((x1010*x1011))+(((-1.0)*cj14*x1018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1019=((0.156433569372259)*cj12);
IkReal x1020=(cj11*r00);
IkReal x1021=(r01*sj11);
IkReal x1022=((1.0)*sj12);
if( IKabs(((((-1.0)*x1019*x1020))+(((-1.0)*x1019*x1021))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1021*x1022))+(((-1.0)*x1020*x1022))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1019*x1020))+(((-1.0)*x1019*x1021))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))+IKsqr(((((-1.0)*x1021*x1022))+(((-1.0)*x1020*x1022))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*x1019*x1020))+(((-1.0)*x1019*x1021))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))), ((((-1.0)*x1021*x1022))+(((-1.0)*x1020*x1022))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1023=(cj11*r00);
IkReal x1024=((0.156433569372259)*cj12);
IkReal x1025=((1.0)*sj12);
IkReal x1026=(r01*sj11);
evalcond[0]=((((-1.0)*x1023*x1025))+(((-1.0)*(IKcos(j15))))+(((-1.0)*x1025*x1026))+((cj12*r02)));
evalcond[1]=((IKsin(j15))+((x1023*x1024))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x1024*x1026))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1027=((0.156433569372259)*cj12);
IkReal x1028=(cj11*r00);
IkReal x1029=(r01*sj11);
IkReal x1030=((1.0)*sj12);
if( IKabs(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x1027*x1029))+((x1027*x1028))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1028*x1030))+(((-1.0)*x1029*x1030))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x1027*x1029))+((x1027*x1028))+(((0.156433569372259)*r02*sj12))))+IKsqr(((((-1.0)*x1028*x1030))+(((-1.0)*x1029*x1030))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x1027*x1029))+((x1027*x1028))+(((0.156433569372259)*r02*sj12))), ((((-1.0)*x1028*x1030))+(((-1.0)*x1029*x1030))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1031=(cj11*r00);
IkReal x1032=((0.156433569372259)*cj12);
IkReal x1033=((1.0)*sj12);
IkReal x1034=(r01*sj11);
evalcond[0]=((((-1.0)*x1033*x1034))+(((-1.0)*x1031*x1033))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=(((x1031*x1032))+(((-1.0)*(IKsin(j15))))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x1032*x1034))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1035=(cj11*r00);
IkReal x1036=((1.0)*sj12);
IkReal x1037=((0.987688482454592)*cj12);
IkReal x1038=(r01*sj11);
if( IKabs(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1035*x1037))+((x1037*x1038)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1035*x1036))+(((-1.0)*x1036*x1038))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1035*x1037))+((x1037*x1038))))+IKsqr(((((-1.0)*x1035*x1036))+(((-1.0)*x1036*x1038))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1035*x1037))+((x1037*x1038))), ((((-1.0)*x1035*x1036))+(((-1.0)*x1036*x1038))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1039=(cj11*r00);
IkReal x1040=((1.0)*sj12);
IkReal x1041=((0.987688482454592)*cj12);
IkReal x1042=(r01*sj11);
evalcond[0]=((((-1.0)*x1039*x1040))+(((-1.0)*(IKcos(j15))))+(((-1.0)*x1040*x1042))+((cj12*r02)));
evalcond[1]=((((-1.0)*(IKsin(j15))))+(((0.987688482454592)*r02*sj12))+((x1039*x1041))+((x1041*x1042))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1043=(cj11*r00);
IkReal x1044=((1.0)*sj12);
IkReal x1045=((0.987688482454592)*cj12);
IkReal x1046=(r01*sj11);
if( IKabs(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x1045*x1046))+(((-1.0)*x1043*x1045))+(((0.156433569372259)*cj11*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1044*x1046))+(((-1.0)*x1043*x1044))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x1045*x1046))+(((-1.0)*x1043*x1045))+(((0.156433569372259)*cj11*r01))))+IKsqr(((((-1.0)*x1044*x1046))+(((-1.0)*x1043*x1044))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x1045*x1046))+(((-1.0)*x1043*x1045))+(((0.156433569372259)*cj11*r01))), ((((-1.0)*x1044*x1046))+(((-1.0)*x1043*x1044))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1047=(cj11*r00);
IkReal x1048=((1.0)*sj12);
IkReal x1049=((0.987688482454592)*cj12);
IkReal x1050=(r01*sj11);
evalcond[0]=((((-1.0)*(IKcos(j15))))+(((-1.0)*x1048*x1050))+((cj12*r02))+(((-1.0)*x1047*x1048)));
evalcond[1]=((IKsin(j15))+(((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1049*x1050))+((x1047*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1051=(cj11*r00);
IkReal x1052=((1.0)*sj12);
IkReal x1053=((0.987688482454592)*cj12);
IkReal x1054=(r01*sj11);
CheckValue<IkReal> x1055=IKPowWithIntegerCheck(sj14,-1);
if(!x1055.valid){
continue;
}
if( IKabs(((x1055.value)*(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x1053*x1054))+((x1051*x1053))+(((0.156433569372259)*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1052*x1054))+((cj12*r02))+(((-1.0)*x1051*x1052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1055.value)*(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x1053*x1054))+((x1051*x1053))+(((0.156433569372259)*r00*sj11))))))+IKsqr(((((-1.0)*x1052*x1054))+((cj12*r02))+(((-1.0)*x1051*x1052))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x1055.value)*(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+((x1053*x1054))+((x1051*x1053))+(((0.156433569372259)*r00*sj11))))), ((((-1.0)*x1052*x1054))+((cj12*r02))+(((-1.0)*x1051*x1052))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1056=IKsin(j15);
IkReal x1057=(cj11*r00);
IkReal x1058=((0.156433569372259)*cj12);
IkReal x1059=((1.0)*sj12);
IkReal x1060=(r00*sj11);
IkReal x1061=(cj11*r01);
IkReal x1062=(r01*sj11);
IkReal x1063=((0.987688482454592)*cj12);
IkReal x1064=(r02*sj12);
evalcond[0]=((((-1.0)*x1059*x1062))+(((-1.0)*(IKcos(j15))))+(((-1.0)*x1057*x1059))+((cj12*r02)));
evalcond[1]=((((0.987688482454592)*x1061))+((x1057*x1058))+(((0.156433569372259)*x1064))+((cj14*x1056))+(((-0.987688482454592)*x1060))+((x1058*x1062)));
evalcond[2]=((((0.987688482454592)*x1064))+(((0.156433569372259)*x1060))+((x1057*x1063))+((x1062*x1063))+(((-1.0)*sj14*x1056))+(((-0.156433569372259)*x1061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1065=((0.156433569372259)*cj12);
IkReal x1066=(cj11*r00);
IkReal x1067=(r01*sj11);
IkReal x1068=((1.0)*sj12);
CheckValue<IkReal> x1069=IKPowWithIntegerCheck(cj14,-1);
if(!x1069.valid){
continue;
}
if( IKabs(((x1069.value)*(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x1065*x1067))+(((-1.0)*x1065*x1066)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1066*x1068))+(((-1.0)*x1067*x1068))+((cj12*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1069.value)*(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x1065*x1067))+(((-1.0)*x1065*x1066))))))+IKsqr(((((-1.0)*x1066*x1068))+(((-1.0)*x1067*x1068))+((cj12*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x1069.value)*(((((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x1065*x1067))+(((-1.0)*x1065*x1066))))), ((((-1.0)*x1066*x1068))+(((-1.0)*x1067*x1068))+((cj12*r02))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1070=IKsin(j15);
IkReal x1071=(cj11*r00);
IkReal x1072=((0.156433569372259)*cj12);
IkReal x1073=((1.0)*sj12);
IkReal x1074=(r00*sj11);
IkReal x1075=(cj11*r01);
IkReal x1076=(r01*sj11);
IkReal x1077=((0.987688482454592)*cj12);
IkReal x1078=(r02*sj12);
evalcond[0]=((((-1.0)*x1073*x1076))+(((-1.0)*x1071*x1073))+(((-1.0)*(IKcos(j15))))+((cj12*r02)));
evalcond[1]=((((0.987688482454592)*x1075))+((x1071*x1072))+(((-0.987688482454592)*x1074))+(((0.156433569372259)*x1078))+((cj14*x1070))+((x1072*x1076)));
evalcond[2]=((((0.987688482454592)*x1078))+((x1071*x1077))+(((0.156433569372259)*x1074))+(((-1.0)*sj14*x1070))+((x1076*x1077))+(((-0.156433569372259)*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj13=0;
cj13=1.0;
j13=0;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=0;
cj13=1.0;
j13=0;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1079=(r01*sj11);
IkReal x1080=((0.156433569372259)*cj12);
IkReal x1081=(cj11*r00);
if( IKabs(((((-1.0)*cj12*r02))+((sj12*x1081))+((sj12*x1079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1080*x1081))+(((-1.0)*x1079*x1080))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r02))+((sj12*x1081))+((sj12*x1079))))+IKsqr(((((-1.0)*x1080*x1081))+(((-1.0)*x1079*x1080))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*r02))+((sj12*x1081))+((sj12*x1079))), ((((-1.0)*x1080*x1081))+(((-1.0)*x1079*x1080))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1082=(cj11*r00);
IkReal x1083=((0.156433569372259)*cj12);
IkReal x1084=((1.0)*sj12);
IkReal x1085=(r01*sj11);
evalcond[0]=((IKsin(j15))+(((-1.0)*x1082*x1084))+(((-1.0)*x1084*x1085))+((cj12*r02)));
evalcond[1]=(((x1082*x1083))+(((-0.987688482454592)*r00*sj11))+(IKcos(j15))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))+((x1083*x1085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1086=(cj11*r00);
IkReal x1087=((0.156433569372259)*cj12);
IkReal x1088=((1.0)*sj12);
IkReal x1089=(r01*sj11);
if( IKabs(((((-1.0)*x1088*x1089))+((cj12*r02))+(((-1.0)*x1086*x1088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.987688482454592)*cj11*r01))+(((-1.0)*x1087*x1089))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x1086*x1087)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1088*x1089))+((cj12*r02))+(((-1.0)*x1086*x1088))))+IKsqr(((((-0.987688482454592)*cj11*r01))+(((-1.0)*x1087*x1089))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x1086*x1087))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*x1088*x1089))+((cj12*r02))+(((-1.0)*x1086*x1088))), ((((-0.987688482454592)*cj11*r01))+(((-1.0)*x1087*x1089))+(((-0.156433569372259)*r02*sj12))+(((0.987688482454592)*r00*sj11))+(((-1.0)*x1086*x1087))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1090=(cj11*r00);
IkReal x1091=((0.156433569372259)*cj12);
IkReal x1092=((1.0)*sj12);
IkReal x1093=(r01*sj11);
evalcond[0]=((((-1.0)*x1090*x1092))+(((-1.0)*(IKsin(j15))))+(((-1.0)*x1092*x1093))+((cj12*r02)));
evalcond[1]=((((-0.987688482454592)*r00*sj11))+(IKcos(j15))+(((0.987688482454592)*cj11*r01))+((x1091*x1093))+((x1090*x1091))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1094=((0.987688482454592)*r01);
IkReal x1095=((0.156433569372259)*sj11);
IkReal x1096=(r02*sj12);
IkReal x1097=(cj11*cj12*r00);
if( IKabs((((r00*x1095))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x1097))+(((0.987688482454592)*x1096))+((cj12*sj11*x1094)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.156433569372259)*x1096))+(((-0.156433569372259)*x1097))+(((-1.0)*cj11*x1094))+(((-1.0)*cj12*r01*x1095))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1095))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x1097))+(((0.987688482454592)*x1096))+((cj12*sj11*x1094))))+IKsqr(((((-0.156433569372259)*x1096))+(((-0.156433569372259)*x1097))+(((-1.0)*cj11*x1094))+(((-1.0)*cj12*r01*x1095))+(((0.987688482454592)*r00*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((r00*x1095))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x1097))+(((0.987688482454592)*x1096))+((cj12*sj11*x1094))), ((((-0.156433569372259)*x1096))+(((-0.156433569372259)*x1097))+(((-1.0)*cj11*x1094))+(((-1.0)*cj12*r01*x1095))+(((0.987688482454592)*r00*sj11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1098=((0.156433569372259)*r00);
IkReal x1099=(cj11*cj12);
IkReal x1100=((0.987688482454592)*r01);
IkReal x1101=(cj12*sj11);
IkReal x1102=((0.156433569372259)*r01);
IkReal x1103=((0.987688482454592)*r00);
IkReal x1104=(r02*sj12);
evalcond[0]=((((0.156433569372259)*x1104))+((x1101*x1102))+(IKcos(j15))+((cj11*x1100))+(((-1.0)*sj11*x1103))+((x1098*x1099)));
evalcond[1]=((((-1.0)*cj11*x1102))+(((0.987688482454592)*x1104))+((sj11*x1098))+(((-1.0)*(IKsin(j15))))+((x1099*x1103))+((x1100*x1101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1105=((0.987688482454592)*r01);
IkReal x1106=((0.156433569372259)*sj11);
IkReal x1107=(r02*sj12);
IkReal x1108=(cj11*cj12*r00);
if( IKabs(((((-1.0)*cj12*sj11*x1105))+(((-1.0)*r00*x1106))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x1108))+(((-0.987688482454592)*x1107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj11*x1105))+(((-1.0)*cj12*r01*x1106))+(((-0.156433569372259)*x1108))+(((-0.156433569372259)*x1107))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*sj11*x1105))+(((-1.0)*r00*x1106))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x1108))+(((-0.987688482454592)*x1107))))+IKsqr(((((-1.0)*cj11*x1105))+(((-1.0)*cj12*r01*x1106))+(((-0.156433569372259)*x1108))+(((-0.156433569372259)*x1107))+(((0.987688482454592)*r00*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*sj11*x1105))+(((-1.0)*r00*x1106))+(((0.156433569372259)*cj11*r01))+(((-0.987688482454592)*x1108))+(((-0.987688482454592)*x1107))), ((((-1.0)*cj11*x1105))+(((-1.0)*cj12*r01*x1106))+(((-0.156433569372259)*x1108))+(((-0.156433569372259)*x1107))+(((0.987688482454592)*r00*sj11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1109=((0.987688482454592)*r01);
IkReal x1110=((0.156433569372259)*sj11);
IkReal x1111=(r02*sj12);
IkReal x1112=(cj11*cj12*r00);
evalcond[0]=((IKsin(j15))+(((0.987688482454592)*x1112))+(((0.987688482454592)*x1111))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x1109))+((r00*x1110)));
evalcond[1]=(((cj12*r01*x1110))+(((0.156433569372259)*x1112))+(((0.156433569372259)*x1111))+(((-0.987688482454592)*r00*sj11))+(IKcos(j15))+((cj11*x1109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1113=((0.987688482454592)*r01);
IkReal x1114=((0.156433569372259)*sj11);
IkReal x1115=(r02*sj12);
IkReal x1116=(cj11*cj12*r00);
CheckValue<IkReal> x1117=IKPowWithIntegerCheck(sj14,-1);
if(!x1117.valid){
continue;
}
if( IKabs(((x1117.value)*(((((0.987688482454592)*x1116))+(((0.987688482454592)*x1115))+(((-0.156433569372259)*cj11*r01))+((r00*x1114))+((cj12*sj11*x1113)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj11*x1113))+(((-1.0)*cj12*r01*x1114))+(((-0.156433569372259)*x1116))+(((-0.156433569372259)*x1115))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1117.value)*(((((0.987688482454592)*x1116))+(((0.987688482454592)*x1115))+(((-0.156433569372259)*cj11*r01))+((r00*x1114))+((cj12*sj11*x1113))))))+IKsqr(((((-1.0)*cj11*x1113))+(((-1.0)*cj12*r01*x1114))+(((-0.156433569372259)*x1116))+(((-0.156433569372259)*x1115))+(((0.987688482454592)*r00*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x1117.value)*(((((0.987688482454592)*x1116))+(((0.987688482454592)*x1115))+(((-0.156433569372259)*cj11*r01))+((r00*x1114))+((cj12*sj11*x1113))))), ((((-1.0)*cj11*x1113))+(((-1.0)*cj12*r01*x1114))+(((-0.156433569372259)*x1116))+(((-0.156433569372259)*x1115))+(((0.987688482454592)*r00*sj11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1118=IKsin(j15);
IkReal x1119=(cj11*r00);
IkReal x1120=((0.156433569372259)*cj12);
IkReal x1121=((1.0)*sj12);
IkReal x1122=(r00*sj11);
IkReal x1123=(r01*sj11);
IkReal x1124=((0.987688482454592)*cj12);
IkReal x1125=(cj11*r01);
IkReal x1126=(r02*sj12);
evalcond[0]=((((-1.0)*x1121*x1123))+(((-1.0)*x1119*x1121))+((cj12*r02))+((cj14*x1118)));
evalcond[1]=(((x1120*x1123))+((x1119*x1120))+(((0.156433569372259)*x1126))+(IKcos(j15))+(((0.987688482454592)*x1125))+(((-0.987688482454592)*x1122)));
evalcond[2]=((((-0.156433569372259)*x1125))+((x1119*x1124))+(((0.156433569372259)*x1122))+(((-1.0)*sj14*x1118))+((x1123*x1124))+(((0.987688482454592)*x1126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1127=(r01*sj11);
IkReal x1128=((0.156433569372259)*cj12);
IkReal x1129=(cj11*r00);
CheckValue<IkReal> x1130=IKPowWithIntegerCheck(cj14,-1);
if(!x1130.valid){
continue;
}
if( IKabs(((x1130.value)*((((sj12*x1129))+((sj12*x1127))+(((-1.0)*cj12*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1127*x1128))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((-1.0)*x1128*x1129))+(((0.987688482454592)*r00*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1130.value)*((((sj12*x1129))+((sj12*x1127))+(((-1.0)*cj12*r02))))))+IKsqr(((((-1.0)*x1127*x1128))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((-1.0)*x1128*x1129))+(((0.987688482454592)*r00*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x1130.value)*((((sj12*x1129))+((sj12*x1127))+(((-1.0)*cj12*r02))))), ((((-1.0)*x1127*x1128))+(((-0.987688482454592)*cj11*r01))+(((-0.156433569372259)*r02*sj12))+(((-1.0)*x1128*x1129))+(((0.987688482454592)*r00*sj11))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1131=IKsin(j15);
IkReal x1132=(cj11*r00);
IkReal x1133=((0.156433569372259)*cj12);
IkReal x1134=((1.0)*sj12);
IkReal x1135=(r00*sj11);
IkReal x1136=(r01*sj11);
IkReal x1137=((0.987688482454592)*cj12);
IkReal x1138=(cj11*r01);
IkReal x1139=(r02*sj12);
evalcond[0]=(((cj14*x1131))+(((-1.0)*x1134*x1136))+(((-1.0)*x1132*x1134))+((cj12*r02)));
evalcond[1]=((((-0.987688482454592)*x1135))+(((0.156433569372259)*x1139))+(IKcos(j15))+(((0.987688482454592)*x1138))+((x1133*x1136))+((x1132*x1133)));
evalcond[2]=((((-0.156433569372259)*x1138))+((x1136*x1137))+(((0.156433569372259)*x1135))+(((-1.0)*sj14*x1131))+(((0.987688482454592)*x1139))+((x1132*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j15eval[0]=sj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1140=(cj11*r00);
IkReal x1141=((0.156433569372259)*cj12);
IkReal x1142=((1.0)*sj12);
IkReal x1143=(r01*sj11);
if( IKabs(((((-1.0)*x1140*x1142))+((cj12*r02))+(((-1.0)*x1142*x1143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1140*x1141))+((x1141*x1143))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1140*x1142))+((cj12*r02))+(((-1.0)*x1142*x1143))))+IKsqr((((x1140*x1141))+((x1141*x1143))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*x1140*x1142))+((cj12*r02))+(((-1.0)*x1142*x1143))), (((x1140*x1141))+((x1141*x1143))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1144=(cj11*r00);
IkReal x1145=((0.156433569372259)*cj12);
IkReal x1146=((1.0)*sj12);
IkReal x1147=(r01*sj11);
evalcond[0]=((((-1.0)*(IKsin(j15))))+(((-1.0)*x1146*x1147))+(((-1.0)*x1144*x1146))+((cj12*r02)));
evalcond[1]=(((x1145*x1147))+(((-0.987688482454592)*r00*sj11))+(((-1.0)*(IKcos(j15))))+(((0.987688482454592)*cj11*r01))+((x1144*x1145))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1148=(r01*sj11);
IkReal x1149=((0.156433569372259)*cj12);
IkReal x1150=(cj11*r00);
if( IKabs(((((-1.0)*cj12*r02))+((sj12*x1150))+((sj12*x1148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1149*x1150))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x1148*x1149))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r02))+((sj12*x1150))+((sj12*x1148))))+IKsqr((((x1149*x1150))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x1148*x1149))+(((0.156433569372259)*r02*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*cj12*r02))+((sj12*x1150))+((sj12*x1148))), (((x1149*x1150))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+((x1148*x1149))+(((0.156433569372259)*r02*sj12))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1151=(cj11*r00);
IkReal x1152=((0.156433569372259)*cj12);
IkReal x1153=((1.0)*sj12);
IkReal x1154=(r01*sj11);
evalcond[0]=((IKsin(j15))+(((-1.0)*x1153*x1154))+((cj12*r02))+(((-1.0)*x1151*x1153)));
evalcond[1]=(((x1152*x1154))+(((-0.987688482454592)*r00*sj11))+((x1151*x1152))+(((-1.0)*(IKcos(j15))))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1155=((0.987688482454592)*r01);
IkReal x1156=((0.156433569372259)*sj11);
IkReal x1157=(r02*sj12);
IkReal x1158=(cj11*cj12*r00);
if( IKabs((((r00*x1156))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x1158))+(((0.987688482454592)*x1157))+((cj12*sj11*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.987688482454592)*r00*sj11))+((cj11*x1155))+(((0.156433569372259)*x1158))+(((0.156433569372259)*x1157))+((cj12*r01*x1156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1156))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x1158))+(((0.987688482454592)*x1157))+((cj12*sj11*x1155))))+IKsqr(((((-0.987688482454592)*r00*sj11))+((cj11*x1155))+(((0.156433569372259)*x1158))+(((0.156433569372259)*x1157))+((cj12*r01*x1156))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((r00*x1156))+(((-0.156433569372259)*cj11*r01))+(((0.987688482454592)*x1158))+(((0.987688482454592)*x1157))+((cj12*sj11*x1155))), ((((-0.987688482454592)*r00*sj11))+((cj11*x1155))+(((0.156433569372259)*x1158))+(((0.156433569372259)*x1157))+((cj12*r01*x1156))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1159=((0.987688482454592)*r01);
IkReal x1160=((0.156433569372259)*sj11);
IkReal x1161=(r02*sj12);
IkReal x1162=(cj11*cj12*r00);
evalcond[0]=((((0.987688482454592)*x1161))+(((0.987688482454592)*x1162))+((r00*x1160))+(((-1.0)*(IKsin(j15))))+(((-0.156433569372259)*cj11*r01))+((cj12*sj11*x1159)));
evalcond[1]=((((-0.987688482454592)*r00*sj11))+(((-1.0)*(IKcos(j15))))+(((0.156433569372259)*x1161))+(((0.156433569372259)*x1162))+((cj12*r01*x1160))+((cj11*x1159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1163=((0.987688482454592)*r01);
IkReal x1164=((0.156433569372259)*sj11);
IkReal x1165=(r02*sj12);
IkReal x1166=(cj11*cj12*r00);
if( IKabs(((((-0.987688482454592)*x1166))+(((-0.987688482454592)*x1165))+(((-1.0)*cj12*sj11*x1163))+(((0.156433569372259)*cj11*r01))+(((-1.0)*r00*x1164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x1163))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x1166))+(((0.156433569372259)*x1165))+((cj12*r01*x1164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*x1166))+(((-0.987688482454592)*x1165))+(((-1.0)*cj12*sj11*x1163))+(((0.156433569372259)*cj11*r01))+(((-1.0)*r00*x1164))))+IKsqr((((cj11*x1163))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x1166))+(((0.156433569372259)*x1165))+((cj12*r01*x1164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*x1166))+(((-0.987688482454592)*x1165))+(((-1.0)*cj12*sj11*x1163))+(((0.156433569372259)*cj11*r01))+(((-1.0)*r00*x1164))), (((cj11*x1163))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x1166))+(((0.156433569372259)*x1165))+((cj12*r01*x1164))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[2];
IkReal x1167=((0.987688482454592)*r01);
IkReal x1168=((0.156433569372259)*sj11);
IkReal x1169=(r02*sj12);
IkReal x1170=(cj11*cj12*r00);
evalcond[0]=((IKsin(j15))+(((0.987688482454592)*x1170))+((cj12*sj11*x1167))+(((0.987688482454592)*x1169))+((r00*x1168))+(((-0.156433569372259)*cj11*r01)));
evalcond[1]=(((cj11*x1167))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x1170))+(((-1.0)*(IKcos(j15))))+(((0.156433569372259)*x1169))+((cj12*r01*x1168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1171=((0.987688482454592)*r01);
IkReal x1172=((0.156433569372259)*sj11);
IkReal x1173=(r02*sj12);
IkReal x1174=(cj11*cj12*r00);
CheckValue<IkReal> x1175=IKPowWithIntegerCheck(sj14,-1);
if(!x1175.valid){
continue;
}
if( IKabs(((x1175.value)*(((((0.987688482454592)*x1173))+(((0.987688482454592)*x1174))+((cj12*sj11*x1171))+((r00*x1172))+(((-0.156433569372259)*cj11*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x1171))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x1173))+(((0.156433569372259)*x1174))+((cj12*r01*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1175.value)*(((((0.987688482454592)*x1173))+(((0.987688482454592)*x1174))+((cj12*sj11*x1171))+((r00*x1172))+(((-0.156433569372259)*cj11*r01))))))+IKsqr((((cj11*x1171))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x1173))+(((0.156433569372259)*x1174))+((cj12*r01*x1172))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x1175.value)*(((((0.987688482454592)*x1173))+(((0.987688482454592)*x1174))+((cj12*sj11*x1171))+((r00*x1172))+(((-0.156433569372259)*cj11*r01))))), (((cj11*x1171))+(((-0.987688482454592)*r00*sj11))+(((0.156433569372259)*x1173))+(((0.156433569372259)*x1174))+((cj12*r01*x1172))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1176=IKsin(j15);
IkReal x1177=(cj11*r00);
IkReal x1178=((0.156433569372259)*cj12);
IkReal x1179=((1.0)*sj12);
IkReal x1180=(r00*sj11);
IkReal x1181=(cj11*r01);
IkReal x1182=(r01*sj11);
IkReal x1183=((0.987688482454592)*cj12);
IkReal x1184=(r02*sj12);
IkReal x1185=((1.0)*x1176);
evalcond[0]=((((-1.0)*x1179*x1182))+(((-1.0)*cj14*x1185))+(((-1.0)*x1177*x1179))+((cj12*r02)));
evalcond[1]=((((0.987688482454592)*x1181))+((x1178*x1182))+(((0.156433569372259)*x1184))+((x1177*x1178))+(((-1.0)*(IKcos(j15))))+(((-0.987688482454592)*x1180)));
evalcond[2]=((((0.987688482454592)*x1184))+((x1182*x1183))+(((0.156433569372259)*x1180))+(((-0.156433569372259)*x1181))+((x1177*x1183))+(((-1.0)*sj14*x1185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1186=(cj11*r00);
IkReal x1187=((0.156433569372259)*cj12);
IkReal x1188=((1.0)*sj12);
IkReal x1189=(r01*sj11);
CheckValue<IkReal> x1190=IKPowWithIntegerCheck(cj14,-1);
if(!x1190.valid){
continue;
}
if( IKabs(((x1190.value)*(((((-1.0)*x1188*x1189))+(((-1.0)*x1186*x1188))+((cj12*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1187*x1189))+((x1186*x1187))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1190.value)*(((((-1.0)*x1188*x1189))+(((-1.0)*x1186*x1188))+((cj12*r02))))))+IKsqr((((x1187*x1189))+((x1186*x1187))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x1190.value)*(((((-1.0)*x1188*x1189))+(((-1.0)*x1186*x1188))+((cj12*r02))))), (((x1187*x1189))+((x1186*x1187))+(((-0.987688482454592)*r00*sj11))+(((0.987688482454592)*cj11*r01))+(((0.156433569372259)*r02*sj12))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1191=IKsin(j15);
IkReal x1192=(cj11*r00);
IkReal x1193=((0.156433569372259)*cj12);
IkReal x1194=((1.0)*sj12);
IkReal x1195=(r00*sj11);
IkReal x1196=(cj11*r01);
IkReal x1197=(r01*sj11);
IkReal x1198=((0.987688482454592)*cj12);
IkReal x1199=(r02*sj12);
IkReal x1200=((1.0)*x1191);
evalcond[0]=((((-1.0)*cj14*x1200))+(((-1.0)*x1194*x1197))+((cj12*r02))+(((-1.0)*x1192*x1194)));
evalcond[1]=((((0.156433569372259)*x1199))+((x1192*x1193))+((x1193*x1197))+(((-1.0)*(IKcos(j15))))+(((-0.987688482454592)*x1195))+(((0.987688482454592)*x1196)));
evalcond[2]=((((0.156433569372259)*x1195))+((x1197*x1198))+(((-0.156433569372259)*x1196))+((x1192*x1198))+(((-1.0)*sj14*x1200))+(((0.987688482454592)*x1199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj14=1.0;
cj14=0;
j14=1.5707963267949;
j15eval[0]=sj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj14=1.0;
cj14=0;
j14=1.5707963267949;
j15eval[0]=cj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1201=((0.987688482454592)*r01);
IkReal x1202=((0.156433569372259)*sj11);
IkReal x1203=(r02*sj12);
IkReal x1204=(cj11*cj12*r00);
CheckValue<IkReal> x1205=IKPowWithIntegerCheck(cj13,-1);
if(!x1205.valid){
continue;
}
if( IKabs(((((-0.156433569372259)*cj11*r01))+((cj12*sj11*x1201))+((r00*x1202))+(((0.987688482454592)*x1203))+(((0.987688482454592)*x1204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1205.value)*(((((-1.0)*cj11*x1201))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x1203))+(((-0.156433569372259)*x1204))+(((-1.0)*cj12*r01*x1202)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*cj11*r01))+((cj12*sj11*x1201))+((r00*x1202))+(((0.987688482454592)*x1203))+(((0.987688482454592)*x1204))))+IKsqr(((x1205.value)*(((((-1.0)*cj11*x1201))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x1203))+(((-0.156433569372259)*x1204))+(((-1.0)*cj12*r01*x1202))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.156433569372259)*cj11*r01))+((cj12*sj11*x1201))+((r00*x1202))+(((0.987688482454592)*x1203))+(((0.987688482454592)*x1204))), ((x1205.value)*(((((-1.0)*cj11*x1201))+(((0.987688482454592)*r00*sj11))+(((-0.156433569372259)*x1203))+(((-0.156433569372259)*x1204))+(((-1.0)*cj12*r01*x1202))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1206=IKcos(j15);
IkReal x1207=(cj11*r00);
IkReal x1208=((0.156433569372259)*cj12);
IkReal x1209=((1.0)*sj12);
IkReal x1210=(r00*sj11);
IkReal x1211=(r01*sj11);
IkReal x1212=((0.987688482454592)*cj12);
IkReal x1213=(cj11*r01);
IkReal x1214=(r02*sj12);
evalcond[0]=((((-1.0)*x1209*x1211))+((sj13*x1206))+((cj12*r02))+(((-1.0)*x1207*x1209)));
evalcond[1]=((((-1.0)*(IKsin(j15))))+(((0.156433569372259)*x1210))+((x1207*x1212))+(((-0.156433569372259)*x1213))+(((0.987688482454592)*x1214))+((x1211*x1212)));
evalcond[2]=(((cj13*x1206))+(((0.156433569372259)*x1214))+(((-0.987688482454592)*x1210))+(((0.987688482454592)*x1213))+((x1208*x1211))+((x1207*x1208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1215=((0.987688482454592)*cj12);
IkReal x1216=(cj11*r00);
IkReal x1217=(r01*sj11);
CheckValue<IkReal> x1218=IKPowWithIntegerCheck(sj13,-1);
if(!x1218.valid){
continue;
}
if( IKabs(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1215*x1216))+((x1215*x1217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1218.value)*(((((-1.0)*cj12*r02))+((sj12*x1217))+((sj12*x1216)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1215*x1216))+((x1215*x1217))))+IKsqr(((x1218.value)*(((((-1.0)*cj12*r02))+((sj12*x1217))+((sj12*x1216))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((0.987688482454592)*r02*sj12))+(((-0.156433569372259)*cj11*r01))+(((0.156433569372259)*r00*sj11))+((x1215*x1216))+((x1215*x1217))), ((x1218.value)*(((((-1.0)*cj12*r02))+((sj12*x1217))+((sj12*x1216))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1219=IKcos(j15);
IkReal x1220=(cj11*r00);
IkReal x1221=((0.156433569372259)*cj12);
IkReal x1222=((1.0)*sj12);
IkReal x1223=(r00*sj11);
IkReal x1224=(r01*sj11);
IkReal x1225=((0.987688482454592)*cj12);
IkReal x1226=(cj11*r01);
IkReal x1227=(r02*sj12);
evalcond[0]=((((-1.0)*x1220*x1222))+(((-1.0)*x1222*x1224))+((sj13*x1219))+((cj12*r02)));
evalcond[1]=((((-0.156433569372259)*x1226))+(((0.156433569372259)*x1223))+(((-1.0)*(IKsin(j15))))+((x1224*x1225))+(((0.987688482454592)*x1227))+((x1220*x1225)));
evalcond[2]=(((cj13*x1219))+(((0.156433569372259)*x1227))+(((-0.987688482454592)*x1223))+(((0.987688482454592)*x1226))+((x1220*x1221))+((x1221*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
j15eval[0]=sj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj14=-1.0;
cj14=0;
j14=-1.5707963267949;
j15eval[0]=cj13;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1228=((0.987688482454592)*r01);
IkReal x1229=((0.156433569372259)*sj11);
IkReal x1230=(r02*sj12);
IkReal x1231=(cj11*cj12*r00);
CheckValue<IkReal> x1232=IKPowWithIntegerCheck(cj13,-1);
if(!x1232.valid){
continue;
}
if( IKabs(((((-1.0)*r00*x1229))+(((-1.0)*cj12*sj11*x1228))+(((-0.987688482454592)*x1230))+(((-0.987688482454592)*x1231))+(((0.156433569372259)*cj11*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1232.value)*(((((-0.156433569372259)*x1230))+(((-0.156433569372259)*x1231))+(((-1.0)*cj12*r01*x1229))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj11*x1228)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1229))+(((-1.0)*cj12*sj11*x1228))+(((-0.987688482454592)*x1230))+(((-0.987688482454592)*x1231))+(((0.156433569372259)*cj11*r01))))+IKsqr(((x1232.value)*(((((-0.156433569372259)*x1230))+(((-0.156433569372259)*x1231))+(((-1.0)*cj12*r01*x1229))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj11*x1228))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*r00*x1229))+(((-1.0)*cj12*sj11*x1228))+(((-0.987688482454592)*x1230))+(((-0.987688482454592)*x1231))+(((0.156433569372259)*cj11*r01))), ((x1232.value)*(((((-0.156433569372259)*x1230))+(((-0.156433569372259)*x1231))+(((-1.0)*cj12*r01*x1229))+(((0.987688482454592)*r00*sj11))+(((-1.0)*cj11*x1228))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1233=IKcos(j15);
IkReal x1234=(cj11*r00);
IkReal x1235=((0.156433569372259)*cj12);
IkReal x1236=((1.0)*sj12);
IkReal x1237=(r00*sj11);
IkReal x1238=(r01*sj11);
IkReal x1239=((0.987688482454592)*cj12);
IkReal x1240=(cj11*r01);
IkReal x1241=(r02*sj12);
evalcond[0]=((((-1.0)*x1236*x1238))+(((-1.0)*x1234*x1236))+((cj12*r02))+((sj13*x1233)));
evalcond[1]=((IKsin(j15))+((x1234*x1239))+(((0.156433569372259)*x1237))+(((-0.156433569372259)*x1240))+((x1238*x1239))+(((0.987688482454592)*x1241)));
evalcond[2]=(((x1234*x1235))+((x1235*x1238))+(((-0.987688482454592)*x1237))+(((0.156433569372259)*x1241))+(((0.987688482454592)*x1240))+((cj13*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1242=((0.987688482454592)*cj12);
IkReal x1243=(cj11*r00);
IkReal x1244=(r01*sj11);
CheckValue<IkReal> x1245=IKPowWithIntegerCheck(sj13,-1);
if(!x1245.valid){
continue;
}
if( IKabs(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x1242*x1243))+(((-1.0)*x1242*x1244))+(((0.156433569372259)*cj11*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1245.value)*(((((-1.0)*cj12*r02))+((sj12*x1244))+((sj12*x1243)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x1242*x1243))+(((-1.0)*x1242*x1244))+(((0.156433569372259)*cj11*r01))))+IKsqr(((x1245.value)*(((((-1.0)*cj12*r02))+((sj12*x1244))+((sj12*x1243))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.987688482454592)*r02*sj12))+(((-0.156433569372259)*r00*sj11))+(((-1.0)*x1242*x1243))+(((-1.0)*x1242*x1244))+(((0.156433569372259)*cj11*r01))), ((x1245.value)*(((((-1.0)*cj12*r02))+((sj12*x1244))+((sj12*x1243))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1246=IKcos(j15);
IkReal x1247=(cj11*r00);
IkReal x1248=((0.156433569372259)*cj12);
IkReal x1249=((1.0)*sj12);
IkReal x1250=(r00*sj11);
IkReal x1251=(r01*sj11);
IkReal x1252=((0.987688482454592)*cj12);
IkReal x1253=(cj11*r01);
IkReal x1254=(r02*sj12);
evalcond[0]=((((-1.0)*x1249*x1251))+((sj13*x1246))+((cj12*r02))+(((-1.0)*x1247*x1249)));
evalcond[1]=(((x1247*x1252))+(IKsin(j15))+(((0.156433569372259)*x1250))+(((0.987688482454592)*x1254))+((x1251*x1252))+(((-0.156433569372259)*x1253)));
evalcond[2]=((((0.156433569372259)*x1254))+(((0.987688482454592)*x1253))+((x1247*x1248))+((cj13*x1246))+((x1248*x1251))+(((-0.987688482454592)*x1250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(sj14,-1);
if(!x1266.valid){
continue;
}
IkReal x1255=x1266.value;
IkReal x1256=(cj11*r01);
IkReal x1257=(r00*sj11);
IkReal x1258=((0.987688482454592)*cj12);
IkReal x1259=(cj11*r00);
IkReal x1260=(r01*sj11);
IkReal x1261=(cj14*sj13);
IkReal x1262=((0.987688482454592)*sj14);
IkReal x1263=(r02*sj12);
IkReal x1264=((0.156433569372259)*sj14);
IkReal x1265=((0.156433569372259)*x1261);
CheckValue<IkReal> x1267=IKPowWithIntegerCheck(cj13,-1);
if(!x1267.valid){
continue;
}
if( IKabs((x1255*(((((0.156433569372259)*x1257))+((x1258*x1259))+(((0.987688482454592)*x1263))+((x1258*x1260))+(((-0.156433569372259)*x1256)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1255*(x1267.value)*(((((-1.0)*x1263*x1264))+(((0.987688482454592)*x1261*x1263))+((x1258*x1260*x1261))+(((-1.0)*x1256*x1262))+(((-1.0)*x1256*x1265))+(((-1.0)*cj12*x1260*x1264))+((x1258*x1259*x1261))+(((-1.0)*cj12*x1259*x1264))+((x1257*x1262))+((x1257*x1265)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1255*(((((0.156433569372259)*x1257))+((x1258*x1259))+(((0.987688482454592)*x1263))+((x1258*x1260))+(((-0.156433569372259)*x1256))))))+IKsqr((x1255*(x1267.value)*(((((-1.0)*x1263*x1264))+(((0.987688482454592)*x1261*x1263))+((x1258*x1260*x1261))+(((-1.0)*x1256*x1262))+(((-1.0)*x1256*x1265))+(((-1.0)*cj12*x1260*x1264))+((x1258*x1259*x1261))+(((-1.0)*cj12*x1259*x1264))+((x1257*x1262))+((x1257*x1265))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x1255*(((((0.156433569372259)*x1257))+((x1258*x1259))+(((0.987688482454592)*x1263))+((x1258*x1260))+(((-0.156433569372259)*x1256))))), (x1255*(x1267.value)*(((((-1.0)*x1263*x1264))+(((0.987688482454592)*x1261*x1263))+((x1258*x1260*x1261))+(((-1.0)*x1256*x1262))+(((-1.0)*x1256*x1265))+(((-1.0)*cj12*x1260*x1264))+((x1258*x1259*x1261))+(((-1.0)*cj12*x1259*x1264))+((x1257*x1262))+((x1257*x1265))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1268=IKsin(j15);
IkReal x1269=IKcos(j15);
IkReal x1270=(cj11*r00);
IkReal x1271=((0.156433569372259)*cj12);
IkReal x1272=((1.0)*sj12);
IkReal x1273=(r00*sj11);
IkReal x1274=(r01*sj11);
IkReal x1275=((0.987688482454592)*cj12);
IkReal x1276=(cj11*r01);
IkReal x1277=(r02*sj12);
IkReal x1278=((1.0)*x1268);
evalcond[0]=((((-1.0)*x1270*x1272))+(((-1.0)*x1272*x1274))+((cj13*cj14*x1268))+((sj13*x1269))+((cj12*r02)));
evalcond[1]=((((0.987688482454592)*x1277))+(((0.156433569372259)*x1273))+((x1274*x1275))+(((-1.0)*sj14*x1278))+((x1270*x1275))+(((-0.156433569372259)*x1276)));
evalcond[2]=((((0.987688482454592)*x1276))+(((-0.987688482454592)*x1273))+(((0.156433569372259)*x1277))+((cj13*x1269))+((x1270*x1271))+((x1271*x1274))+(((-1.0)*cj14*sj13*x1278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x1287=IKPowWithIntegerCheck(sj14,-1);
if(!x1287.valid){
continue;
}
IkReal x1279=x1287.value;
IkReal x1280=(cj13*cj14);
IkReal x1281=(sj12*sj14);
IkReal x1282=((0.987688482454592)*r02*sj12);
IkReal x1283=((0.156433569372259)*r00*sj11);
IkReal x1284=((0.156433569372259)*cj11*r01);
IkReal x1285=((0.987688482454592)*cj11*cj12*r00);
IkReal x1286=((0.987688482454592)*cj12*r01*sj11);
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(sj13,-1);
if(!x1288.valid){
continue;
}
if( IKabs((x1279*((x1285+x1286+x1283+x1282+(((-1.0)*x1284)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1279*(x1288.value)*((((cj11*r00*x1281))+((x1280*x1284))+((r01*sj11*x1281))+(((-1.0)*x1280*x1285))+(((-1.0)*x1280*x1286))+(((-1.0)*x1280*x1282))+(((-1.0)*x1280*x1283))+(((-1.0)*cj12*r02*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1279*((x1285+x1286+x1283+x1282+(((-1.0)*x1284))))))+IKsqr((x1279*(x1288.value)*((((cj11*r00*x1281))+((x1280*x1284))+((r01*sj11*x1281))+(((-1.0)*x1280*x1285))+(((-1.0)*x1280*x1286))+(((-1.0)*x1280*x1282))+(((-1.0)*x1280*x1283))+(((-1.0)*cj12*r02*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x1279*((x1285+x1286+x1283+x1282+(((-1.0)*x1284))))), (x1279*(x1288.value)*((((cj11*r00*x1281))+((x1280*x1284))+((r01*sj11*x1281))+(((-1.0)*x1280*x1285))+(((-1.0)*x1280*x1286))+(((-1.0)*x1280*x1282))+(((-1.0)*x1280*x1283))+(((-1.0)*cj12*r02*sj14))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1289=IKsin(j15);
IkReal x1290=IKcos(j15);
IkReal x1291=(cj11*r00);
IkReal x1292=((0.156433569372259)*cj12);
IkReal x1293=((1.0)*sj12);
IkReal x1294=(r00*sj11);
IkReal x1295=(r01*sj11);
IkReal x1296=((0.987688482454592)*cj12);
IkReal x1297=(cj11*r01);
IkReal x1298=(r02*sj12);
IkReal x1299=((1.0)*x1289);
evalcond[0]=(((sj13*x1290))+(((-1.0)*x1293*x1295))+((cj13*cj14*x1289))+(((-1.0)*x1291*x1293))+((cj12*r02)));
evalcond[1]=((((0.987688482454592)*x1298))+(((-1.0)*sj14*x1299))+((x1295*x1296))+((x1291*x1296))+(((0.156433569372259)*x1294))+(((-0.156433569372259)*x1297)));
evalcond[2]=((((-0.987688482454592)*x1294))+(((0.987688482454592)*x1297))+(((-1.0)*cj14*sj13*x1299))+((x1291*x1292))+((cj13*x1290))+(((0.156433569372259)*x1298))+((x1292*x1295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1300=(r00*sj13);
IkReal x1301=((0.987688482454592)*sj11);
IkReal x1302=((0.156433569372259)*cj12);
IkReal x1303=(cj11*sj12);
IkReal x1304=(cj13*r00);
IkReal x1305=((0.156433569372259)*r02*sj12);
IkReal x1306=((0.987688482454592)*cj11*r01);
IkReal x1307=(cj13*r01*sj11);
IkReal x1308=((1.0)*cj12*r02);
IkReal x1309=(r01*sj11*sj13);
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(cj14,-1);
if(!x1310.valid){
continue;
}
if( IKabs(((x1310.value)*((((cj11*x1300*x1302))+((sj12*x1307))+((sj13*x1305))+((sj13*x1306))+(((-1.0)*x1300*x1301))+((x1303*x1304))+((x1302*x1309))+(((-1.0)*cj13*x1308)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj13*x1308))+((sj12*x1309))+((x1300*x1303))+(((-1.0)*cj13*x1305))+(((-1.0)*cj13*x1306))+(((-1.0)*cj11*x1302*x1304))+(((-1.0)*x1302*x1307))+((x1301*x1304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1310.value)*((((cj11*x1300*x1302))+((sj12*x1307))+((sj13*x1305))+((sj13*x1306))+(((-1.0)*x1300*x1301))+((x1303*x1304))+((x1302*x1309))+(((-1.0)*cj13*x1308))))))+IKsqr(((((-1.0)*sj13*x1308))+((sj12*x1309))+((x1300*x1303))+(((-1.0)*cj13*x1305))+(((-1.0)*cj13*x1306))+(((-1.0)*cj11*x1302*x1304))+(((-1.0)*x1302*x1307))+((x1301*x1304))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x1310.value)*((((cj11*x1300*x1302))+((sj12*x1307))+((sj13*x1305))+((sj13*x1306))+(((-1.0)*x1300*x1301))+((x1303*x1304))+((x1302*x1309))+(((-1.0)*cj13*x1308))))), ((((-1.0)*sj13*x1308))+((sj12*x1309))+((x1300*x1303))+(((-1.0)*cj13*x1305))+(((-1.0)*cj13*x1306))+(((-1.0)*cj11*x1302*x1304))+(((-1.0)*x1302*x1307))+((x1301*x1304))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1311=IKsin(j15);
IkReal x1312=IKcos(j15);
IkReal x1313=(cj11*r00);
IkReal x1314=((0.156433569372259)*cj12);
IkReal x1315=((1.0)*sj12);
IkReal x1316=(r00*sj11);
IkReal x1317=(r01*sj11);
IkReal x1318=((0.987688482454592)*cj12);
IkReal x1319=(cj11*r01);
IkReal x1320=(r02*sj12);
IkReal x1321=((1.0)*x1311);
evalcond[0]=((((-1.0)*x1315*x1317))+((sj13*x1312))+(((-1.0)*x1313*x1315))+((cj13*cj14*x1311))+((cj12*r02)));
evalcond[1]=(((x1317*x1318))+((x1313*x1318))+(((-1.0)*sj14*x1321))+(((0.156433569372259)*x1316))+(((-0.156433569372259)*x1319))+(((0.987688482454592)*x1320)));
evalcond[2]=(((x1314*x1317))+((x1313*x1314))+((cj13*x1312))+(((0.156433569372259)*x1320))+(((0.987688482454592)*x1319))+(((-1.0)*cj14*sj13*x1321))+(((-0.987688482454592)*x1316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - JulietteY20MP (fc3bc7cfd2b4af353a0faa6b826118c7)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
