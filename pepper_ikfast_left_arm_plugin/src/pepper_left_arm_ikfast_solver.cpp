/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-10-26 11:58:47.514306
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[3]);
x5=IKcos(j[2]);
x6=IKsin(j[2]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.987688482454592)*x2);
x11=((0.015)*x3);
x12=((0.15)*x6);
x13=((0.156433569372259)*x0);
x14=((0.987688482454592)*x0);
x15=((1.0)*x7);
x16=(x1*x2);
x17=(x3*x6);
x18=(x1*x5);
x19=(x0*x1);
x20=(x1*x13);
x21=(x0*x3*x5);
x22=(x2*x3*x5);
x23=((((-1.0)*x20))+x10);
x24=((((0.156433569372259)*x16))+x14);
x25=((-1.0)*x24);
x26=(x25*x6);
eetrans[0]=((-0.05702)+(((-1.0)*x0*x11))+((x4*(((((-0.15)*x21))+((x12*x23))))))+(((0.00013)*x2))+((x7*(((((0.0234650354058389)*x2))+(((0.148153272368189)*x19))))))+(((0.1812)*x19)));
eetrans[1]=((0.14974)+(((0.015)*x1))+(((0.148153272368189)*x3*x7))+((x4*(((((-0.0234650354058389)*x17))+(((0.15)*x18))))))+(((0.1812)*x3)));
eetrans[2]=((0.22582)+((x7*(((((0.0234650354058389)*x0))+(((-0.148153272368189)*x16))))))+((x4*(((((-1.0)*x12*x25))+(((0.15)*x22))))))+(((-0.1812)*x16))+((x11*x2))+(((0.00013)*x0)));
eerot[0]=(((x9*(((((-1.0)*x5*(((((-1.0)*x10))+x20))))+(((1.0)*x0*x17))))))+(((-1.0)*x8*(((((1.0)*x4*(((((-1.0)*x1*x14))+(((-0.156433569372259)*x2))))))+((x15*(((((-1.0)*x21))+((x23*x6)))))))))));
eerot[1]=(((x9*(((((-0.156433569372259)*x3*x5))+(((-1.0)*x1*x6))))))+((x8*(((((0.987688482454592)*x3*x4))+(((-1.0)*x15*(((((-0.156433569372259)*x17))+x18)))))))));
eerot[2]=(((x9*(((((-1.0)*x17*x2))+((x24*x5))))))+((x8*((((x7*(((((-1.0)*x22))+x26))))+((x4*(((((-1.0)*x1*x10))+x13)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((0.05702)+px);
new_r01=((-1.0)*r02);
new_py=((0.22582)+(((-1.0)*pz)));
new_r02=r01;
new_pz=((-0.14974)+py);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x27=((0.015)*r02);
IkReal x28=(px*r00);
IkReal x29=((0.1812)*r00);
IkReal x30=(pz*r02);
IkReal x31=(py*r01);
IkReal x32=((0.00013)*r01);
IkReal x33=((0.3624)*px);
IkReal x34=((0.00026)*py);
IkReal x35=px*px;
IkReal x36=py*py;
IkReal x37=pz*pz;
IkReal x38=((0.03)*pz);
IkReal x39=((0.3624)*r01);
IkReal x40=((0.00026)*r00);
IkReal x41=((0.7248)*py);
IkReal x42=((0.00052)*px);
IkReal x43=((0.3624)*r02);
IkReal x44=((0.03)*r00);
IkReal x45=((0.7248)*pz);
IkReal x46=((0.06)*px);
IkReal x47=((((-1.0)*x43))+x44);
IkReal x48=((((-1.0)*x45))+x46);
IkReal x49=((((-1.0)*x40))+x39);
IkReal x50=((((-1.0)*x42))+x41);
IkReal x51=((((-1.0)*x40))+(((-1.0)*x39)));
IkReal x52=((((-1.0)*x42))+(((-1.0)*x41)));
IkReal x53=((((-1.0)*x44))+(((-1.0)*x43)));
IkReal x54=((((-1.0)*x45))+(((-1.0)*x46)));
IkReal x55=(x38+x34);
IkReal x56=(x32+x27);
IkReal x57=(x31+x30+x28);
IkReal x58=((0.0105584569)+x37+x36+x35);
IkReal x59=((((-1.0)*x27))+(((-1.0)*x29))+x32+x57);
IkReal x60=(x57+x29+(((-1.0)*x56)));
IkReal x61=((((-1.0)*x29))+(((-1.0)*x32))+x57+x27);
IkReal x62=(x57+x56+x29);
IkReal x63=((((-1.0)*x38))+(((-1.0)*x33))+x34+x58);
IkReal x64=(x33+x58+(((-1.0)*x55)));
IkReal x65=((((-1.0)*x34))+(((-1.0)*x33))+x38+x58);
IkReal x66=(x33+x58+x55);
IkReal gconst0=x59;
IkReal gconst1=x47;
IkReal gconst2=x62;
IkReal gconst3=x63;
IkReal gconst4=x48;
IkReal gconst5=x66;
IkReal gconst6=x59;
IkReal gconst7=x47;
IkReal gconst8=x62;
IkReal gconst9=x63;
IkReal gconst10=x48;
IkReal gconst11=x66;
IkReal gconst12=x51;
IkReal gconst13=x49;
IkReal gconst14=x52;
IkReal gconst15=x50;
IkReal gconst16=x51;
IkReal gconst17=x49;
IkReal gconst18=x52;
IkReal gconst19=x50;
IkReal gconst20=x60;
IkReal gconst21=x53;
IkReal gconst22=x61;
IkReal gconst23=x64;
IkReal gconst24=x54;
IkReal gconst25=x65;
IkReal gconst26=x60;
IkReal gconst27=x53;
IkReal gconst28=x61;
IkReal gconst29=x64;
IkReal gconst30=x54;
IkReal gconst31=x65;
IkReal x67=(gconst23*gconst31);
IkReal x68=(gconst13*gconst26);
IkReal x69=(gconst4*gconst7);
IkReal x70=(gconst13*gconst9);
IkReal x71=((0.06)*r01);
IkReal x72=(gconst25*gconst29);
IkReal x73=(gconst16*gconst22);
IkReal x74=(gconst18*gconst2);
IkReal x75=(gconst22*gconst26);
IkReal x76=(gconst21*gconst26);
IkReal x77=((0.12)*py);
IkReal x78=(gconst5*gconst6);
IkReal x79=(gconst22*gconst29);
IkReal x80=((1.0)*gconst28);
IkReal x81=(gconst2*gconst3);
IkReal x82=(gconst11*gconst6);
IkReal x83=((1.0)*gconst9);
IkReal x84=(gconst5*gconst7);
IkReal x85=(gconst21*gconst25);
IkReal x86=(gconst2*gconst4);
IkReal x87=(gconst0*gconst5);
IkReal x88=((1.0)*gconst11);
IkReal x89=(gconst27*gconst29);
IkReal x90=(gconst20*gconst28);
IkReal x91=(gconst1*gconst10);
IkReal x92=((1.0)*gconst15);
IkReal x93=(gconst14*gconst2);
IkReal x94=((1.0)*gconst18);
IkReal x95=(gconst26*gconst31);
IkReal x96=(gconst5*gconst9);
IkReal x97=(gconst18*gconst22);
IkReal x98=(gconst8*gconst9);
IkReal x99=(gconst25*gconst30);
IkReal x100=(gconst24*gconst27);
IkReal x101=((1.0)*gconst25);
IkReal x102=(gconst2*gconst9);
IkReal x103=((1.0)*gconst10*gconst6);
IkReal x104=((1.0)*gconst24*gconst30);
IkReal x105=((1.0)*gconst3*gconst8);
IkReal x106=(gconst20*gconst31*x101);
op[0]=((((-1.0)*gconst23*x79*x80))+(((-1.0)*gconst20*x101*x95))+((x100*x79))+(((-1.0)*gconst21*gconst27*x72))+((x72*x90))+((x67*x75))+((x76*x99))+(((-1.0)*x104*x75)));
op[1]=(((gconst14*gconst31*x75))+((gconst17*gconst20*x72))+(((-1.0)*x104*x68))+((x100*x97))+(((-1.0)*gconst30*x75*x77))+((gconst24*x71*x79))+((gconst16*gconst30*x85))+(((-1.0)*gconst27*x85*x94))+(((-1.0)*gconst21*x89*x92))+(((-1.0)*gconst17*gconst23*x79))+(((-1.0)*gconst14*x79*x80))+(((-1.0)*gconst12*x101*x95))+(((-1.0)*gconst19*gconst20*gconst26*x101))+((gconst15*gconst30*x76))+((gconst13*gconst24*x89))+((gconst15*gconst29*x90))+((gconst19*gconst23*x75))+((x67*x73))+((gconst26*x71*x99))+((gconst12*gconst28*x72))+(((-1.0)*gconst16*x106))+((gconst18*gconst25*x90))+((x67*x68))+((gconst27*x77*x79))+((gconst25*x76*x77))+(((-1.0)*gconst23*x80*x97))+(((-1.0)*gconst21*x71*x72))+(((-1.0)*gconst24*x75*x77))+(((-1.0)*x104*x73))+(((-1.0)*gconst20*x92*x95))+(((-1.0)*gconst27*x71*x72))+(((-1.0)*gconst13*gconst23*gconst29*x80)));
op[2]=((((-0.06)*gconst15*gconst27*gconst29*r01))+(((-1.0)*gconst21*gconst25*gconst29*gconst7))+(((0.0072)*gconst25*gconst26*py*r01))+((gconst10*gconst21*gconst25*gconst26))+((gconst20*gconst25*gconst29*gconst8))+((gconst2*gconst24*gconst27*gconst29))+(((-0.0036)*gconst25*gconst29*(r01*r01)))+((gconst17*gconst18*gconst20*gconst25))+((gconst11*gconst22*gconst23*gconst26))+((gconst12*gconst18*gconst25*gconst28))+(((-1.0)*gconst22*gconst23*gconst28*gconst9))+((gconst13*gconst16*gconst23*gconst31))+(((0.0072)*gconst22*gconst29*py*r01))+((gconst16*gconst19*gconst22*gconst23))+(((-1.0)*gconst17*gconst18*gconst22*gconst23))+((gconst2*gconst23*gconst26*gconst31))+((gconst21*gconst25*gconst30*gconst6))+(((-1.0)*gconst2*gconst23*gconst28*gconst29))+((gconst22*gconst24*gconst27*gconst9))+(((-0.12)*gconst13*gconst24*gconst26*py))+(((-0.06)*gconst18*gconst25*gconst27*r01))+(((0.06)*gconst13*gconst24*gconst29*r01))+(((-1.0)*gconst22*gconst26*gconst30*gconst4))+((gconst14*gconst19*gconst22*gconst26))+(((-1.0)*gconst1*gconst25*gconst27*gconst29))+(((-1.0)*gconst20*gconst26*gconst31*gconst5))+(((-1.0)*gconst13*gconst16*gconst24*gconst30))+(((0.12)*gconst18*gconst22*gconst27*py))+(((-0.06)*gconst15*gconst21*gconst29*r01))+(((-1.0)*gconst10*gconst22*gconst24*gconst26))+(((-0.0144)*gconst22*gconst26*(py*py)))+(((0.12)*gconst15*gconst21*gconst26*py))+((gconst1*gconst25*gconst26*gconst30))+(((-1.0)*gconst20*gconst25*gconst31*gconst6))+(((0.12)*gconst16*gconst21*gconst25*py))+((gconst15*gconst18*gconst20*gconst28))+(((-1.0)*gconst14*gconst18*gconst22*gconst28))+(((0.12)*gconst13*gconst27*gconst29*py))+((gconst15*gconst16*gconst21*gconst30))+((gconst12*gconst17*gconst25*gconst29))+((gconst20*gconst28*gconst29*gconst5))+((gconst21*gconst26*gconst30*gconst5))+((gconst22*gconst27*gconst29*gconst4))+((gconst22*gconst24*gconst29*gconst7))+((gconst22*gconst26*gconst3*gconst31))+(((-1.0)*gconst22*gconst28*gconst29*gconst3))+(((-1.0)*gconst13*gconst17*gconst23*gconst29))+(((-1.0)*gconst15*gconst19*gconst20*gconst26))+((gconst12*gconst15*gconst28*gconst29))+(((-1.0)*gconst12*gconst15*gconst26*gconst31))+(((-1.0)*gconst2*gconst24*gconst26*gconst30))+(((-0.12)*gconst16*gconst22*gconst24*py))+(((0.06)*gconst15*gconst26*gconst30*r01))+(((-0.12)*gconst16*gconst22*gconst30*py))+((gconst13*gconst18*gconst24*gconst27))+(((-1.0)*gconst11*gconst20*gconst25*gconst26))+((gconst22*gconst23*gconst31*gconst6))+(((-1.0)*gconst12*gconst16*gconst25*gconst31))+(((-1.0)*gconst16*gconst19*gconst20*gconst25))+(((-1.0)*gconst13*gconst14*gconst28*gconst29))+((gconst14*gconst16*gconst22*gconst31))+((gconst15*gconst17*gconst20*gconst29))+(((-1.0)*gconst15*gconst16*gconst20*gconst31))+(((0.06)*gconst16*gconst25*gconst30*r01))+(((-1.0)*gconst22*gconst24*gconst30*gconst6))+(((-1.0)*gconst0*gconst25*gconst26*gconst31))+((gconst20*gconst25*gconst28*gconst9))+(((-1.0)*gconst14*gconst17*gconst22*gconst29))+(((-1.0)*gconst21*gconst27*gconst29*gconst5))+(((-1.0)*gconst21*gconst25*gconst27*gconst9))+(((0.06)*gconst18*gconst22*gconst24*r01))+(((-0.06)*gconst18*gconst21*gconst25*r01))+(((-1.0)*gconst15*gconst18*gconst21*gconst27))+(((-0.12)*gconst13*gconst26*gconst30*py))+((gconst13*gconst19*gconst23*gconst26))+((gconst13*gconst14*gconst26*gconst31))+(((-1.0)*gconst13*gconst18*gconst23*gconst28))+((gconst0*gconst25*gconst28*gconst29))+(((-1.0)*gconst12*gconst19*gconst25*gconst26))+(((-1.0)*gconst22*gconst23*gconst29*gconst8)));
op[3]=((((-1.0)*gconst14*gconst2*gconst28*gconst29))+(((-1.0)*gconst19*gconst20*gconst26*gconst5))+(((0.06)*gconst10*gconst25*gconst26*r01))+((gconst19*gconst2*gconst23*gconst26))+(((-0.06)*gconst25*gconst27*gconst9*r01))+((gconst15*gconst21*gconst30*gconst6))+(((-1.0)*gconst11*gconst16*gconst20*gconst25))+((gconst16*gconst21*gconst30*gconst5))+(((-1.0)*gconst19*gconst20*gconst25*gconst6))+(((0.0072)*gconst16*gconst25*py*r01))+((gconst0*gconst15*gconst28*gconst29))+(((-1.0)*gconst15*gconst21*gconst27*gconst9))+(((-1.0)*gconst12*gconst26*gconst31*gconst5))+((gconst15*gconst20*gconst29*gconst8))+((gconst14*gconst2*gconst26*gconst31))+(((-1.0)*gconst18*gconst22*gconst23*gconst8))+((gconst13*gconst24*gconst27*gconst9))+(((0.0072)*gconst15*gconst26*py*r01))+(((-0.06)*gconst21*gconst29*gconst5*r01))+((gconst13*gconst24*gconst29*gconst7))+((gconst18*gconst22*gconst27*gconst4))+(((-1.0)*gconst11*gconst12*gconst25*gconst26))+((gconst17*gconst20*gconst25*gconst9))+(((0.12)*gconst2*gconst27*gconst29*py))+(((-0.06)*gconst1*gconst25*gconst29*r01))+(((0.12)*gconst1*gconst25*gconst26*py))+(((-0.0036)*gconst15*gconst29*(r01*r01)))+((gconst12*gconst25*gconst29*gconst8))+(((-1.0)*gconst18*gconst21*gconst27*gconst5))+((gconst18*gconst22*gconst24*gconst7))+((gconst18*gconst20*gconst25*gconst8))+(((-1.0)*gconst17*gconst2*gconst23*gconst29))+(((-1.0)*gconst13*gconst24*gconst30*gconst6))+((gconst11*gconst16*gconst22*gconst23))+((gconst13*gconst16*gconst19*gconst23))+(((-0.0036)*gconst18*gconst25*(r01*r01)))+((gconst12*gconst25*gconst28*gconst9))+(((-0.12)*gconst10*gconst22*gconst26*py))+(((-1.0)*gconst11*gconst15*gconst20*gconst26))+(((-1.0)*gconst12*gconst25*gconst31*gconst6))+(((0.0072)*gconst13*gconst29*py*r01))+((gconst17*gconst20*gconst29*gconst5))+((gconst15*gconst20*gconst28*gconst9))+(((-1.0)*gconst15*gconst16*gconst19*gconst20))+(((-0.06)*gconst25*gconst29*gconst7*r01))+(((-0.06)*gconst21*gconst25*gconst9*r01))+((gconst13*gconst26*gconst3*gconst31))+(((-0.12)*gconst22*gconst24*gconst6*py))+(((-1.0)*gconst0*gconst19*gconst25*gconst26))+((gconst18*gconst2*gconst24*gconst27))+((gconst10*gconst15*gconst21*gconst26))+(((-1.0)*gconst1*gconst15*gconst27*gconst29))+(((-1.0)*gconst16*gconst22*gconst30*gconst4))+(((-1.0)*gconst18*gconst22*gconst28*gconst3))+(((-1.0)*gconst12*gconst16*gconst19*gconst25))+(((-1.0)*gconst10*gconst16*gconst22*gconst24))+((gconst11*gconst13*gconst23*gconst26))+(((-0.0144)*gconst13*gconst26*(py*py)))+(((-1.0)*gconst18*gconst2*gconst23*gconst28))+(((-0.12)*gconst2*gconst26*gconst30*py))+(((-0.0144)*gconst16*gconst22*(py*py)))+(((-1.0)*gconst13*gconst14*gconst18*gconst28))+((gconst1*gconst15*gconst26*gconst30))+(((-1.0)*gconst12*gconst15*gconst19*gconst26))+(((-1.0)*gconst17*gconst22*gconst23*gconst9))+(((-0.12)*gconst13*gconst16*gconst30*py))+(((-0.12)*gconst13*gconst16*gconst24*py))+(((-0.12)*gconst22*gconst30*gconst6*py))+(((0.12)*gconst21*gconst25*gconst6*py))+(((-1.0)*gconst15*gconst20*gconst31*gconst6))+(((-1.0)*gconst1*gconst18*gconst25*gconst27))+(((0.12)*gconst15*gconst16*gconst21*py))+(((-1.0)*gconst13*gconst17*gconst18*gconst23))+(((-0.06)*gconst15*gconst18*gconst27*r01))+(((-1.0)*gconst15*gconst21*gconst29*gconst7))+(((-1.0)*gconst14*gconst17*gconst18*gconst22))+((gconst1*gconst16*gconst25*gconst30))+(((0.06)*gconst2*gconst24*gconst29*r01))+(((-1.0)*gconst18*gconst21*gconst25*gconst7))+((gconst12*gconst15*gconst18*gconst28))+(((-1.0)*gconst13*gconst23*gconst28*gconst9))+((gconst13*gconst23*gconst31*gconst6))+(((-0.12)*gconst22*gconst26*gconst4*py))+(((0.06)*gconst26*gconst30*gconst5*r01))+(((-1.0)*gconst13*gconst23*gconst29*gconst8))+(((-0.06)*gconst15*gconst18*gconst21*r01))+(((-1.0)*gconst17*gconst22*gconst29*gconst3))+(((0.12)*gconst13*gconst18*gconst27*py))+((gconst13*gconst27*gconst29*gconst4))+((gconst16*gconst22*gconst3*gconst31))+(((-0.06)*gconst27*gconst29*gconst5*r01))+(((-1.0)*gconst16*gconst20*gconst31*gconst5))+(((-1.0)*gconst13*gconst14*gconst17*gconst29))+(((-0.12)*gconst2*gconst24*gconst26*py))+(((0.12)*gconst22*gconst29*gconst7*py))+(((0.06)*gconst13*gconst18*gconst24*r01))+((gconst19*gconst22*gconst23*gconst6))+(((-1.0)*gconst12*gconst15*gconst16*gconst31))+(((-1.0)*gconst13*gconst26*gconst30*gconst4))+((gconst0*gconst17*gconst25*gconst29))+((gconst16*gconst2*gconst23*gconst31))+((gconst12*gconst28*gconst29*gconst5))+(((0.06)*gconst25*gconst30*gconst6*r01))+((gconst15*gconst17*gconst18*gconst20))+(((-1.0)*gconst0*gconst16*gconst25*gconst31))+((gconst13*gconst14*gconst16*gconst31))+(((-1.0)*gconst10*gconst13*gconst24*gconst26))+((gconst13*gconst14*gconst19*gconst26))+((gconst18*gconst20*gconst28*gconst5))+(((0.06)*gconst22*gconst29*gconst4*r01))+((gconst11*gconst14*gconst22*gconst26))+((gconst12*gconst17*gconst18*gconst25))+(((-1.0)*gconst13*gconst28*gconst29*gconst3))+((gconst10*gconst16*gconst21*gconst25))+(((-1.0)*gconst14*gconst22*gconst28*gconst9))+(((0.0072)*gconst18*gconst22*py*r01))+(((0.06)*gconst15*gconst16*gconst30*r01))+((gconst12*gconst15*gconst17*gconst29))+(((-1.0)*gconst16*gconst2*gconst24*gconst30))+((gconst14*gconst22*gconst31*gconst6))+((gconst19*gconst22*gconst26*gconst3))+(((0.06)*gconst22*gconst24*gconst9*r01))+(((-1.0)*gconst14*gconst22*gconst29*gconst8))+((gconst0*gconst18*gconst25*gconst28))+((gconst14*gconst16*gconst19*gconst22))+(((0.12)*gconst21*gconst26*gconst5*py))+(((-1.0)*gconst0*gconst15*gconst26*gconst31))+(((0.12)*gconst22*gconst27*gconst9*py)));
op[4]=(((gconst0*gconst25*gconst28*gconst9))+(((-0.0036)*gconst29*gconst5*(r01*r01)))+((gconst11*gconst13*gconst16*gconst23))+(((-1.0)*gconst10*gconst13*gconst16*gconst24))+((gconst11*gconst22*gconst26*gconst3))+((gconst1*gconst10*gconst25*gconst26))+(((-1.0)*gconst1*gconst15*gconst18*gconst27))+((gconst16*gconst19*gconst2*gconst23))+((gconst2*gconst27*gconst29*gconst4))+(((-0.0144)*gconst13*gconst16*(py*py)))+(((0.06)*gconst13*gconst24*gconst9*r01))+(((-1.0)*gconst14*gconst18*gconst2*gconst28))+((gconst11*gconst22*gconst23*gconst6))+(((-1.0)*gconst2*gconst28*gconst29*gconst3))+(((-1.0)*gconst16*gconst19*gconst20*gconst5))+(((-1.0)*gconst13*gconst16*gconst30*gconst4))+(((0.12)*gconst16*gconst21*gconst5*py))+((gconst1*gconst25*gconst30*gconst6))+((gconst0*gconst28*gconst29*gconst5))+(((-1.0)*gconst13*gconst18*gconst28*gconst3))+((gconst20*gconst28*gconst5*gconst9))+(((-1.0)*gconst12*gconst19*gconst26*gconst5))+((gconst21*gconst30*gconst5*gconst6))+(((-0.0144)*gconst22*gconst6*(py*py)))+(((0.06)*gconst18*gconst22*gconst4*r01))+(((-1.0)*gconst0*gconst11*gconst25*gconst26))+((gconst14*gconst19*gconst22*gconst6))+((gconst13*gconst19*gconst26*gconst3))+(((0.0072)*gconst25*gconst6*py*r01))+(((0.06)*gconst15*gconst30*gconst6*r01))+((gconst0*gconst15*gconst18*gconst28))+(((-1.0)*gconst11*gconst20*gconst25*gconst6))+((gconst0*gconst25*gconst29*gconst8))+(((-1.0)*gconst2*gconst26*gconst30*gconst4))+(((-1.0)*gconst10*gconst22*gconst24*gconst6))+(((-1.0)*gconst14*gconst17*gconst22*gconst9))+((gconst17*gconst18*gconst20*gconst5))+((gconst1*gconst26*gconst30*gconst5))+(((-1.0)*gconst15*gconst18*gconst21*gconst7))+(((-0.12)*gconst10*gconst13*gconst26*py))+(((-1.0)*gconst17*gconst18*gconst2*gconst23))+(((-1.0)*gconst15*gconst19*gconst20*gconst6))+(((-1.0)*gconst12*gconst19*gconst25*gconst6))+(((-1.0)*gconst2*gconst24*gconst30*gconst6))+(((-0.0144)*gconst2*gconst26*(py*py)))+(((-0.0036)*gconst25*gconst9*(r01*r01)))+(((-0.12)*gconst10*gconst16*gconst22*py))+(((-0.0036)*gconst15*gconst18*(r01*r01)))+((gconst15*gconst18*gconst20*gconst8))+((gconst13*gconst18*gconst27*gconst4))+((gconst22*gconst24*gconst7*gconst9))+(((-0.12)*gconst16*gconst2*gconst30*py))+((gconst22*gconst27*gconst4*gconst9))+(((0.12)*gconst18*gconst2*gconst27*py))+(((-1.0)*gconst0*gconst25*gconst31*gconst6))+(((0.0072)*gconst15*gconst16*py*r01))+(((-0.12)*gconst13*gconst24*gconst6*py))+(((0.06)*gconst13*gconst29*gconst4*r01))+((gconst1*gconst15*gconst16*gconst30))+((gconst2*gconst23*gconst31*gconst6))+(((-1.0)*gconst21*gconst29*gconst5*gconst7))+(((-1.0)*gconst1*gconst27*gconst29*gconst5))+((gconst14*gconst16*gconst2*gconst31))+(((-1.0)*gconst20*gconst31*gconst5*gconst6))+((gconst22*gconst29*gconst4*gconst7))+((gconst20*gconst25*gconst8*gconst9))+(((-0.06)*gconst15*gconst29*gconst7*r01))+((gconst15*gconst17*gconst20*gconst9))+(((-1.0)*gconst1*gconst25*gconst27*gconst9))+(((-1.0)*gconst0*gconst15*gconst19*gconst26))+((gconst2*gconst24*gconst29*gconst7))+(((-1.0)*gconst14*gconst18*gconst22*gconst8))+((gconst14*gconst19*gconst2*gconst26))+(((-1.0)*gconst0*gconst16*gconst19*gconst25))+(((-1.0)*gconst22*gconst23*gconst8*gconst9))+(((-1.0)*gconst13*gconst14*gconst29*gconst8))+(((0.12)*gconst18*gconst22*gconst7*py))+(((-0.12)*gconst13*gconst30*gconst6*py))+(((0.0072)*gconst2*gconst29*py*r01))+(((-1.0)*gconst0*gconst26*gconst31*gconst5))+((gconst13*gconst16*gconst3*gconst31))+(((-1.0)*gconst11*gconst12*gconst15*gconst26))+(((-1.0)*gconst17*gconst18*gconst22*gconst3))+(((-1.0)*gconst21*gconst25*gconst7*gconst9))+(((0.06)*gconst18*gconst2*gconst24*r01))+(((-1.0)*gconst10*gconst22*gconst26*gconst4))+(((0.06)*gconst10*gconst15*gconst26*r01))+((gconst0*gconst17*gconst18*gconst25))+(((0.12)*gconst1*gconst16*gconst25*py))+(((-1.0)*gconst13*gconst18*gconst23*gconst8))+((gconst11*gconst14*gconst16*gconst22))+(((-1.0)*gconst22*gconst28*gconst3*gconst9))+((gconst16*gconst19*gconst22*gconst3))+(((-1.0)*gconst14*gconst17*gconst2*gconst29))+(((-1.0)*gconst13*gconst14*gconst28*gconst9))+(((-1.0)*gconst12*gconst15*gconst31*gconst6))+(((-1.0)*gconst12*gconst15*gconst16*gconst19))+(((-0.06)*gconst1*gconst15*gconst29*r01))+(((0.0072)*gconst22*gconst9*py*r01))+(((-1.0)*gconst11*gconst15*gconst16*gconst20))+(((-1.0)*gconst11*gconst12*gconst16*gconst25))+(((0.12)*gconst13*gconst27*gconst9*py))+((gconst20*gconst29*gconst5*gconst8))+(((-0.12)*gconst13*gconst26*gconst4*py))+(((-1.0)*gconst13*gconst17*gconst23*gconst9))+((gconst2*gconst26*gconst3*gconst31))+(((-1.0)*gconst13*gconst14*gconst17*gconst18))+(((-0.12)*gconst16*gconst22*gconst4*py))+(((-0.06)*gconst18*gconst21*gconst5*r01))+(((-1.0)*gconst22*gconst29*gconst3*gconst8))+((gconst11*gconst2*gconst23*gconst26))+((gconst10*gconst21*gconst25*gconst6))+(((-0.06)*gconst15*gconst27*gconst9*r01))+(((-0.06)*gconst1*gconst18*gconst25*r01))+((gconst10*gconst15*gconst16*gconst21))+((gconst10*gconst21*gconst26*gconst5))+(((0.0072)*gconst13*gconst18*py*r01))+(((-0.12)*gconst16*gconst2*gconst24*py))+((gconst13*gconst19*gconst23*gconst6))+(((-1.0)*gconst2*gconst23*gconst29*gconst8))+((gconst2*gconst24*gconst27*gconst9))+((gconst13*gconst14*gconst31*gconst6))+((gconst12*gconst18*gconst25*gconst8))+(((-1.0)*gconst0*gconst15*gconst16*gconst31))+(((-1.0)*gconst21*gconst27*gconst5*gconst9))+(((-0.06)*gconst18*gconst25*gconst7*r01))+(((-0.06)*gconst15*gconst21*gconst9*r01))+((gconst0*gconst15*gconst17*gconst29))+((gconst11*gconst13*gconst14*gconst26))+(((-1.0)*gconst10*gconst2*gconst24*gconst26))+((gconst12*gconst15*gconst17*gconst18))+(((0.12)*gconst13*gconst29*gconst7*py))+(((0.12)*gconst15*gconst21*gconst6*py))+((gconst12*gconst18*gconst28*gconst5))+((gconst12*gconst17*gconst29*gconst5))+(((-1.0)*gconst2*gconst23*gconst28*gconst9))+((gconst12*gconst15*gconst29*gconst8))+(((0.0072)*gconst26*gconst5*py*r01))+(((-1.0)*gconst22*gconst30*gconst4*gconst6))+(((0.06)*gconst10*gconst16*gconst25*r01))+((gconst12*gconst15*gconst28*gconst9))+((gconst12*gconst17*gconst25*gconst9))+(((-1.0)*gconst11*gconst20*gconst26*gconst5))+(((0.12)*gconst1*gconst15*gconst26*py))+(((-1.0)*gconst12*gconst16*gconst31*gconst5))+(((0.06)*gconst16*gconst30*gconst5*r01))+(((-1.0)*gconst13*gconst17*gconst29*gconst3))+((gconst22*gconst3*gconst31*gconst6))+(((-0.06)*gconst18*gconst27*gconst5*r01))+(((-1.0)*gconst1*gconst25*gconst29*gconst7))+((gconst13*gconst18*gconst24*gconst7))+((gconst13*gconst14*gconst16*gconst19)));
op[5]=((((0.12)*gconst22*gconst7*gconst9*py))+(((-1.0)*gconst13*gconst30*gconst4*gconst6))+(((-0.12)*gconst10*gconst22*gconst6*py))+(((-0.06)*gconst21*gconst5*gconst9*r01))+((gconst12*gconst25*gconst8*gconst9))+(((-0.12)*gconst2*gconst24*gconst6*py))+(((0.06)*gconst13*gconst18*gconst4*r01))+(((-1.0)*gconst13*gconst17*gconst18*gconst3))+(((0.12)*gconst21*gconst5*gconst6*py))+((gconst13*gconst29*gconst4*gconst7))+(((-1.0)*gconst17*gconst2*gconst23*gconst9))+(((0.12)*gconst13*gconst18*gconst7*py))+(((0.06)*gconst10*gconst25*gconst6*r01))+((gconst1*gconst15*gconst30*gconst6))+((gconst11*gconst14*gconst22*gconst6))+(((-1.0)*gconst10*gconst16*gconst2*gconst24))+((gconst11*gconst13*gconst23*gconst6))+(((-1.0)*gconst13*gconst14*gconst17*gconst9))+(((0.12)*gconst1*gconst26*gconst5*py))+(((-1.0)*gconst1*gconst18*gconst25*gconst7))+(((-1.0)*gconst10*gconst13*gconst26*gconst4))+(((0.0072)*gconst18*gconst2*py*r01))+((gconst18*gconst2*gconst24*gconst7))+((gconst14*gconst2*gconst31*gconst6))+((gconst19*gconst22*gconst3*gconst6))+(((-1.0)*gconst12*gconst31*gconst5*gconst6))+(((-0.06)*gconst15*gconst18*gconst7*r01))+((gconst12*gconst17*gconst18*gconst5))+(((-0.12)*gconst13*gconst16*gconst4*py))+(((-1.0)*gconst13*gconst28*gconst3*gconst9))+(((-1.0)*gconst12*gconst16*gconst19*gconst5))+(((-0.12)*gconst10*gconst2*gconst26*py))+(((-1.0)*gconst0*gconst19*gconst25*gconst6))+((gconst16*gconst2*gconst3*gconst31))+((gconst1*gconst16*gconst30*gconst5))+(((0.0072)*gconst15*gconst6*py*r01))+((gconst13*gconst14*gconst19*gconst6))+(((-0.0144)*gconst16*gconst2*(py*py)))+(((0.12)*gconst2*gconst27*gconst9*py))+(((0.12)*gconst1*gconst25*gconst6*py))+((gconst10*gconst15*gconst21*gconst6))+(((-1.0)*gconst0*gconst19*gconst26*gconst5))+((gconst11*gconst16*gconst2*gconst23))+(((-0.06)*gconst25*gconst7*gconst9*r01))+(((0.06)*gconst10*gconst26*gconst5*r01))+((gconst11*gconst14*gconst2*gconst26))+(((0.06)*gconst10*gconst15*gconst16*r01))+(((-1.0)*gconst13*gconst14*gconst18*gconst8))+((gconst0*gconst18*gconst25*gconst8))+(((0.06)*gconst2*gconst24*gconst9*r01))+((gconst10*gconst16*gconst21*gconst5))+((gconst0*gconst17*gconst29*gconst5))+(((-0.12)*gconst10*gconst13*gconst16*py))+((gconst1*gconst10*gconst16*gconst25))+(((-1.0)*gconst17*gconst22*gconst3*gconst9))+((gconst19*gconst2*gconst23*gconst6))+((gconst17*gconst20*gconst5*gconst9))+(((0.12)*gconst2*gconst29*gconst7*py))+(((-0.06)*gconst1*gconst29*gconst5*r01))+(((0.0072)*gconst13*gconst9*py*r01))+((gconst0*gconst18*gconst28*gconst5))+((gconst18*gconst2*gconst27*gconst4))+(((-1.0)*gconst13*gconst29*gconst3*gconst8))+(((-1.0)*gconst11*gconst15*gconst20*gconst6))+((gconst13*gconst24*gconst7*gconst9))+((gconst13*gconst16*gconst19*gconst3))+(((-1.0)*gconst13*gconst23*gconst8*gconst9))+(((-0.0036)*gconst18*gconst5*(r01*r01)))+(((-1.0)*gconst18*gconst2*gconst23*gconst8))+((gconst12*gconst15*gconst18*gconst8))+(((-0.0144)*gconst13*gconst6*(py*py)))+(((-1.0)*gconst0*gconst11*gconst16*gconst25))+((gconst12*gconst29*gconst5*gconst8))+((gconst18*gconst20*gconst5*gconst8))+(((0.06)*gconst30*gconst5*gconst6*r01))+(((-1.0)*gconst18*gconst21*gconst5*gconst7))+(((-1.0)*gconst14*gconst2*gconst29*gconst8))+(((-1.0)*gconst11*gconst16*gconst20*gconst5))+(((-1.0)*gconst11*gconst12*gconst15*gconst16))+((gconst13*gconst3*gconst31*gconst6))+(((-0.12)*gconst22*gconst4*gconst6*py))+((gconst11*gconst13*gconst26*gconst3))+(((-1.0)*gconst11*gconst12*gconst26*gconst5))+(((-0.12)*gconst2*gconst30*gconst6*py))+(((-1.0)*gconst18*gconst2*gconst28*gconst3))+(((-1.0)*gconst1*gconst18*gconst27*gconst5))+(((-1.0)*gconst1*gconst15*gconst27*gconst9))+(((-1.0)*gconst14*gconst2*gconst28*gconst9))+(((-1.0)*gconst14*gconst17*gconst18*gconst2))+(((0.12)*gconst1*gconst15*gconst16*py))+(((-0.06)*gconst27*gconst5*gconst9*r01))+(((-1.0)*gconst11*gconst12*gconst25*gconst6))+(((0.0072)*gconst16*gconst5*py*r01))+(((-0.12)*gconst2*gconst26*gconst4*py))+(((-1.0)*gconst0*gconst15*gconst16*gconst19))+((gconst12*gconst15*gconst17*gconst9))+((gconst15*gconst20*gconst8*gconst9))+(((-0.06)*gconst1*gconst15*gconst18*r01))+(((-1.0)*gconst18*gconst22*gconst3*gconst8))+((gconst12*gconst28*gconst5*gconst9))+((gconst11*gconst16*gconst22*gconst3))+(((-1.0)*gconst10*gconst13*gconst24*gconst6))+(((-1.0)*gconst17*gconst2*gconst29*gconst3))+(((-1.0)*gconst0*gconst11*gconst15*gconst26))+((gconst13*gconst27*gconst4*gconst9))+((gconst19*gconst2*gconst26*gconst3))+(((-1.0)*gconst19*gconst20*gconst5*gconst6))+(((-0.0036)*gconst15*gconst9*(r01*r01)))+(((-1.0)*gconst1*gconst15*gconst29*gconst7))+(((-1.0)*gconst10*gconst16*gconst22*gconst4))+(((-1.0)*gconst14*gconst22*gconst8*gconst9))+((gconst11*gconst13*gconst14*gconst16))+(((-1.0)*gconst15*gconst21*gconst7*gconst9))+((gconst18*gconst22*gconst4*gconst7))+(((-1.0)*gconst16*gconst2*gconst30*gconst4))+((gconst0*gconst15*gconst28*gconst9))+(((0.06)*gconst22*gconst4*gconst9*r01))+((gconst14*gconst16*gconst19*gconst2))+((gconst0*gconst15*gconst17*gconst18))+(((-0.06)*gconst1*gconst25*gconst9*r01))+((gconst0*gconst15*gconst29*gconst8))+(((-0.06)*gconst29*gconst5*gconst7*r01))+((gconst1*gconst10*gconst15*gconst26))+(((-1.0)*gconst0*gconst16*gconst31*gconst5))+((gconst0*gconst17*gconst25*gconst9))+(((0.06)*gconst2*gconst29*gconst4*r01))+(((-1.0)*gconst12*gconst15*gconst19*gconst6))+(((-1.0)*gconst0*gconst15*gconst31*gconst6)));
op[6]=((((0.06)*gconst13*gconst4*gconst9*r01))+(((-1.0)*gconst2*gconst29*gconst3*gconst8))+((gconst1*gconst10*gconst26*gconst5))+(((0.12)*gconst18*gconst2*gconst7*py))+(((-0.12)*gconst10*gconst13*gconst6*py))+((gconst11*gconst2*gconst23*gconst6))+((gconst1*gconst10*gconst25*gconst6))+((gconst12*gconst15*gconst8*gconst9))+(((-0.0144)*gconst2*gconst6*(py*py)))+(((-0.06)*gconst1*gconst18*gconst5*r01))+((gconst0*gconst15*gconst18*gconst8))+(((0.12)*gconst1*gconst15*gconst6*py))+((gconst0*gconst17*gconst18*gconst5))+(((-1.0)*gconst2*gconst30*gconst4*gconst6))+(((-1.0)*gconst17*gconst18*gconst2*gconst3))+(((-1.0)*gconst14*gconst17*gconst2*gconst9))+((gconst12*gconst18*gconst5*gconst8))+(((-1.0)*gconst1*gconst27*gconst5*gconst9))+(((-1.0)*gconst0*gconst11*gconst26*gconst5))+((gconst11*gconst14*gconst16*gconst2))+(((0.12)*gconst1*gconst16*gconst5*py))+((gconst2*gconst3*gconst31*gconst6))+(((-0.12)*gconst16*gconst2*gconst4*py))+((gconst13*gconst18*gconst4*gconst7))+(((-1.0)*gconst10*gconst2*gconst26*gconst4))+((gconst13*gconst19*gconst3*gconst6))+(((-0.12)*gconst13*gconst4*gconst6*py))+(((-1.0)*gconst11*gconst12*gconst15*gconst6))+((gconst2*gconst24*gconst7*gconst9))+(((0.0072)*gconst5*gconst6*py*r01))+((gconst10*gconst21*gconst5*gconst6))+(((-1.0)*gconst13*gconst18*gconst3*gconst8))+(((-1.0)*gconst12*gconst19*gconst5*gconst6))+((gconst11*gconst13*gconst14*gconst6))+(((-1.0)*gconst11*gconst20*gconst5*gconst6))+(((0.12)*gconst13*gconst7*gconst9*py))+(((-1.0)*gconst2*gconst23*gconst8*gconst9))+((gconst11*gconst2*gconst26*gconst3))+((gconst16*gconst19*gconst2*gconst3))+((gconst0*gconst25*gconst8*gconst9))+(((-1.0)*gconst2*gconst28*gconst3*gconst9))+(((-1.0)*gconst0*gconst11*gconst25*gconst6))+(((-1.0)*gconst0*gconst16*gconst19*gconst5))+(((0.0072)*gconst2*gconst9*py*r01))+(((-1.0)*gconst14*gconst18*gconst2*gconst8))+(((-1.0)*gconst22*gconst3*gconst8*gconst9))+((gconst11*gconst22*gconst3*gconst6))+(((0.06)*gconst18*gconst2*gconst4*r01))+((gconst12*gconst17*gconst5*gconst9))+((gconst0*gconst15*gconst17*gconst9))+(((-1.0)*gconst0*gconst15*gconst19*gconst6))+(((-1.0)*gconst10*gconst13*gconst16*gconst4))+((gconst22*gconst4*gconst7*gconst9))+(((-1.0)*gconst1*gconst29*gconst5*gconst7))+((gconst11*gconst13*gconst16*gconst3))+(((-1.0)*gconst13*gconst14*gconst8*gconst9))+(((-1.0)*gconst10*gconst22*gconst4*gconst6))+(((-1.0)*gconst10*gconst2*gconst24*gconst6))+(((-1.0)*gconst0*gconst11*gconst15*gconst16))+(((-0.06)*gconst15*gconst7*gconst9*r01))+(((-1.0)*gconst1*gconst25*gconst7*gconst9))+(((0.06)*gconst10*gconst16*gconst5*r01))+(((-1.0)*gconst0*gconst31*gconst5*gconst6))+(((-1.0)*gconst21*gconst5*gconst7*gconst9))+(((-0.06)*gconst1*gconst15*gconst9*r01))+((gconst14*gconst19*gconst2*gconst6))+((gconst0*gconst29*gconst5*gconst8))+((gconst1*gconst10*gconst15*gconst16))+(((-0.12)*gconst10*gconst16*gconst2*py))+(((-0.0036)*gconst5*gconst9*(r01*r01)))+(((-1.0)*gconst11*gconst12*gconst16*gconst5))+((gconst2*gconst29*gconst4*gconst7))+(((0.06)*gconst10*gconst15*gconst6*r01))+((gconst0*gconst28*gconst5*gconst9))+(((-1.0)*gconst1*gconst15*gconst18*gconst7))+(((-1.0)*gconst13*gconst17*gconst3*gconst9))+((gconst20*gconst5*gconst8*gconst9))+((gconst2*gconst27*gconst4*gconst9))+(((-0.06)*gconst18*gconst5*gconst7*r01))+((gconst1*gconst30*gconst5*gconst6)));
op[7]=((((-1.0)*gconst10*gconst2*gconst6*x77))+(((-1.0)*x105*x74))+(((-1.0)*x105*x70))+(((-1.0)*gconst0*gconst19*x78))+(((-1.0)*gconst13*gconst4*x103))+(((-1.0)*gconst10*gconst16*x86))+((x82*x93))+((gconst0*gconst15*x98))+(((-1.0)*gconst1*x71*x96))+((gconst19*gconst6*x81))+(((-1.0)*gconst9*x71*x84))+((gconst11*gconst16*x81))+((gconst10*x71*x78))+(((-1.0)*gconst12*x78*x88))+((x69*x70))+((x69*x74))+((gconst18*gconst8*x87))+(((-1.0)*gconst16*x87*x88))+((gconst1*x77*x78))+((gconst15*gconst6*x91))+(((-1.0)*gconst1*x84*x94))+(((-1.0)*gconst17*x81*x83))+(((-1.0)*gconst1*gconst15*gconst7*x83))+((gconst7*x102*x77))+((gconst17*gconst9*x87))+((gconst16*gconst5*x91))+((gconst13*gconst3*x82))+(((-1.0)*gconst8*x83*x93))+(((-1.0)*gconst6*x77*x86))+(((-1.0)*gconst0*x82*x92))+((gconst9*x71*x86))+((gconst12*gconst8*x96)));
op[8]=(((x87*x98))+(((-1.0)*x103*x86))+((x81*x82))+((x78*x91))+(((-1.0)*gconst8*x81*x83))+(((-1.0)*gconst1*x83*x84))+((x102*x69))+(((-1.0)*gconst0*x78*x88)));
polyroots8(op,zeror,numroots);
IkReal j5array[8], cj5array[8], sj5array[8], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[8]={true,true,true,true,true,true,true,true};
_nj5 = 8;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j6eval[2];
IkReal x107=((0.06611688)*cj5);
IkReal x108=(px*r02);
IkReal x109=(pz*r00);
IkReal x110=(py*r02*sj5);
IkReal x111=(pz*r01*sj5);
j6eval[0]=(x111+((cj5*x109))+(((-1.0)*x110))+(((-1.0)*cj5*x108)));
j6eval[1]=IKsign(((((-0.06611688)*x110))+((x107*x109))+(((-1.0)*x107*x108))+(((0.06611688)*x111))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x112=pz*pz;
IkReal x113=(px*r02);
IkReal x114=((2.0)*pz);
IkReal x115=(py*r02);
IkReal x116=(((pz*r00))+(((-1.0)*x113)));
IkReal x117=(((pz*r01))+(((-1.0)*x115)));
IkReal x119 = ((((-1.0)*r00*x113*x114))+x112+(((r02*r02)*(((px*px)+(py*py)+(((-1.0)*x112))))))+(((-1.0)*r01*x114*x115)));
if(IKabs(x119)==0){
continue;
}
IkReal x118=pow(x119,-0.5);
CheckValue<IkReal> x120 = IKatan2WithCheck(IkReal(x116),IkReal(x117),IKFAST_ATAN2_MAGTHRESH);
if(!x120.valid){
continue;
}
IkReal gconst48=((-1.0)*(x120.value));
IkReal gconst49=((-1.0)*x116*x118);
IkReal gconst50=(x117*x118);
IkReal x121=j5;
IkReal x122=((1.0)*r02);
CheckValue<IkReal> x125 = IKatan2WithCheck(IkReal(((((-1.0)*px*x122))+((pz*r00)))),IkReal(((((-1.0)*py*x122))+((pz*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x125.valid){
continue;
}
IkReal x123=x125.value;
IkReal x124=x123;
if(((((x121*x123))+((x123*x124))+((j5*x124))+((j5*x121)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x121*x123))+((x123*x124))+((j5*x124))+((j5*x121)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x126=py*py;
IkReal x127=pz*pz;
IkReal x128=px*px;
IkReal x129=gconst49*gconst49;
IkReal x130=gconst50*gconst50;
IkReal x131=(gconst50*r00);
IkReal x132=((3.9e-6)*gconst50);
IkReal x133=(pz*r01);
IkReal x134=(py*r00);
IkReal x135=(py*r02);
IkReal x136=(gconst49*px);
IkReal x137=((0.1812)*r02);
IkReal x138=((0.03)*py);
IkReal x139=(px*r01);
IkReal x140=((0.06611688)*gconst49);
IkReal x141=((0.015)*r02);
IkReal x142=(gconst49*r01);
IkReal x143=(gconst49*pz);
IkReal x144=((0.3624)*py);
IkReal x145=((4.7112e-5)*gconst50);
IkReal x146=((0.03)*pz);
IkReal x147=((0.3624)*pz);
IkReal x148=(px*r00);
IkReal x149=((0.1812)*x126);
IkReal x150=((3.9e-6)*x129);
IkReal x151=((0.015)*x128);
IkReal x152=((4.7112e-5)*x130);
IkReal x153=((3.9e-6)*x130);
IkReal x154=(gconst50*px*r02);
IkReal x155=((0.1812)*x127);
IkReal x156=((4.7112e-5)*x129);
IkReal x157=((0.015)*x126);
IkReal x158=((0.015)*x127);
IkReal x159=((0.1812)*x128);
CheckValue<IkReal> x160=IKPowWithIntegerCheck(IKsign(((((-0.06611688)*x154))+(((0.06611688)*pz*x131))+((x133*x140))+(((-1.0)*x135*x140)))),-1);
if(!x160.valid){
continue;
}
CheckValue<IkReal> x161 = IKatan2WithCheck(IkReal(((((0.00191319239028)*x131))+(((-1.0)*x131*x159))+((x131*x149))+((x142*x155))+((x142*x159))+(((-1.0)*x142*x149))+((x128*x141))+((x126*x141))+(((0.00191319239028)*x142))+(((-3.9e-6)*r02*x136))+(((-1.0)*x133*x138))+(((-1.0)*gconst50*x139*x144))+(((-1.0)*x139*x156))+(((-1.0)*x139*x152))+(((0.0001583768535)*r02))+(((-1.0)*x132*x133))+(((-1.0)*x147*x154))+(((-0.3624)*x134*x136))+(((-1.0)*x146*x148))+((x132*x135))+((x134*x156))+((x134*x152))+(((-0.3624)*x135*x143))+(((3.9e-6)*r00*x143))+((x131*x155))+(((-1.0)*x127*x141)))),IkReal((((x127*x137))+(((-1.0)*x131*x151))+(((0.0001583768535)*x131))+(((-1.0)*x142*x157))+((x142*x151))+((x142*x158))+(((4.7112e-5)*r02*x136))+(((-1.0)*x126*x137))+(((-1.0)*x128*x137))+(((-0.03)*x134*x136))+(((-1.0)*x139*x153))+(((-1.0)*x139*x150))+(((-0.03)*x135*x143))+((x147*x148))+(((0.0001583768535)*x142))+(((-1.0)*x146*x154))+((x134*x153))+((x134*x150))+(((-0.00191319239028)*r02))+(((-1.0)*gconst50*x138*x139))+(((-4.7112e-5)*r00*x143))+((x133*x145))+((x133*x144))+(((-1.0)*x135*x145))+((x131*x158))+((x131*x157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x161.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x160.value)))+(x161.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x162=IKsin(j6);
IkReal x163=IKcos(j6);
IkReal x164=pz*pz;
IkReal x165=px*px;
IkReal x166=py*py;
IkReal x167=(gconst50*r01);
IkReal x168=(gconst49*r00);
IkReal x169=(gconst49*r01);
IkReal x170=((0.312867138744518)*py);
IkReal x171=((0.0296306544736378)*pz);
IkReal x172=(py*r01);
IkReal x173=((1.97537696490918)*pz);
IkReal x174=(px*r00);
IkReal x175=(px*r02);
IkReal x176=(pz*r02);
IkReal x177=(gconst49*py);
IkReal x178=(gconst50*py);
IkReal x179=(gconst49*px);
IkReal x180=(gconst50*r00);
IkReal x181=((1.97537696490918)*py);
IkReal x182=((0.156433569372259)*x164);
IkReal x183=(r02*x162);
IkReal x184=(px*x162);
IkReal x185=((0.156433569372259)*x165);
IkReal x186=((0.987688482454592)*x166);
IkReal x187=(gconst50*x163);
IkReal x188=((0.987688482454592)*x163);
IkReal x189=((0.00536968468154371)*x162);
IkReal x190=((0.987688482454592)*x164);
IkReal x191=((0.987688482454592)*x165);
IkReal x192=(r02*x163);
IkReal x193=(py*x162);
IkReal x194=((0.156433569372259)*x166);
IkReal x195=(px*x163);
IkReal x196=((0.015)*x162);
IkReal x197=((0.00469300708116777)*pz*x163);
IkReal x198=(py*x192);
IkReal x199=((0.0564347265350685)*pz*x162);
evalcond[0]=((((-0.1812)*x163*x180))+((x169*x196))+(((-0.00013)*x168))+((x180*x196))+(((-0.1812)*x163*x169))+(((-0.1812)*x183))+(((-0.015)*x192))+x172+x174+x176+(((0.00013)*x167)));
evalcond[1]=((0.0105584569)+(((-0.3624)*px*x187))+(((0.00026)*x178))+(((-0.3624)*pz*x162))+x166+x164+x165+(((-0.3624)*x163*x177))+(((0.03)*gconst50*x184))+(((-0.03)*pz*x163))+(((0.03)*x162*x177))+(((-0.00026)*x179)));
evalcond[2]=((((0.0564347265350685)*py*r00*x163))+(((-1.0)*x165*x169*x188))+((x168*x197))+((x168*x199))+(((-0.0564347265350685)*gconst49*x162*x175))+((x168*x185))+(((-0.0564347265350685)*r01*x195))+((x173*x177*x192))+(((0.00469300708116777)*x178*x192))+((x169*x171))+(((-0.00469300708116777)*gconst49*x163*x175))+(((-0.00469300708116777)*r00*x193))+(((0.0564347265350685)*x178*x183))+(((-1.0)*x180*x189))+(((-1.0)*x168*x182))+((x167*x185))+((x167*x182))+(((-1.0)*gconst50*x170*x174))+(((-1.0)*gconst50*x170*x176))+(((-1.0)*x168*x194))+(((0.00536968468154371)*x192))+(((0.00160515983269011)*x167))+(((0.312867138744518)*gconst49*pz*x175))+((x165*x180*x188))+((px*x169*x170))+(((-1.0)*x163*x180*x186))+(((0.0544373246804248)*x163*x169))+(((-0.357978978769581)*x174))+(((-0.357978978769581)*x172))+(((-0.357978978769581)*x176))+(((-0.00160515983269011)*x168))+(((-1.0)*x164*x169*x188))+((x171*x180))+(((0.00469300708116777)*r01*x184))+(((-1.0)*x169*x189))+((x167*x181*x195))+((x168*x181*x195))+(((0.0544373246804248)*x183))+(((0.0544373246804248)*x163*x180))+((x173*x175*x187))+(((-1.0)*x164*x180*x188))+((x162*x172*x173))+(((-1.0)*x167*x194))+(((-1.0)*x167*x197))+(((-1.0)*x167*x199))+(((-0.0296306544736378)*gconst50*x175))+(((-1.0)*x183*x186))+((x162*x173*x174))+((x163*x169*x186))+(((-0.0296306544736378)*r02*x177))+(((-1.0)*x183*x191))+((x183*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x200=((5.54387622575087)*cj6);
j7eval[0]=((1.0)+(((-1.0)*cj5*px*x200))+(((-5.54387622575087)*pz*sj6))+(((-1.0)*py*sj5*x200))+(((35.0028623542932)*px*sj5))+(((-35.0028623542932)*cj5*py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x201=pz*pz;
IkReal x202=cj5*cj5;
IkReal x203=cj6*cj6;
IkReal x204=py*py;
IkReal x205=px*px;
IkReal x206=(pz*sj6);
IkReal x207=(px*sj5);
IkReal x208=(py*sj5);
IkReal x209=((7.80422830698764)*cj6);
IkReal x210=(cj5*py);
IkReal x211=(cj6*pz);
IkReal x212=((1.23606107790593)*cj6);
IkReal x213=(cj5*sj5);
IkReal x214=((0.0353131428337124)*cj6);
IkReal x215=((0.156433569372259)*cj6);
IkReal x216=(px*py);
IkReal x217=(cj5*px);
IkReal x218=((0.0978858465061816)*x202);
IkReal x219=((3.90211415349382)*x203);
IkReal x220=(sj6*x217);
CheckValue<IkReal> x228=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.987688482454592)*x210))+(((-0.156433569372259)*x206))+(((0.987688482454592)*x207))+(((-1.0)*x208*x215))+(((-1.0)*x215*x217))),-1);
if(!x228.valid){
continue;
}
IkReal x221=x228.value;
IkReal x222=((0.015)*x221);
CheckValue<IkReal> x229=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.987688482454592)*x210))+(((-0.156433569372259)*x206))+(((-1.0)*py*sj5*x215))+(((0.987688482454592)*x207))+(((-1.0)*x215*x217))),-1);
if(!x229.valid){
continue;
}
IkReal x223=(sj6*x208*(x229.value));
CheckValue<IkReal> x230=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.987688482454592)*x210))+(((-1.0)*cj5*px*x215))+(((-0.156433569372259)*x206))+(((0.987688482454592)*x207))+(((-1.0)*x208*x215))),-1);
if(!x230.valid){
continue;
}
IkReal x224=(x220*(x230.value));
IkReal x225=((1.0)*x211*x221);
IkReal x226=(x223+x222+x224);
if((((0.00408487835908797)+(((-0.222959717636647)*x210))+((x202*x204*x219))+(((3.90211415349382)*x205))+(((1.23606107790593)*x206*x210))+(((-1.0)*x204*x219))+(((-1.0)*x204*x218))+(((-1.0)*x206*x208*x209))+((x205*x218))+(((-1.0)*x202*x205*x219))+(((-0.0353131428337124)*x206))+(((-7.80422830698764)*x203*x207*x210))+(((0.12)*x220))+(((2.47212215581187)*cj6*x202*x216))+(((0.195771693012363)*x207*x210))+(((-1.23606107790593)*x206*x207))+((x204*x212*x213))+(((4.0)*x204))+(((0.0978858465061816)*x201))+(((-0.12)*x211))+(((0.222959717636647)*x207))+(((-1.0)*x214*x217))+(((-1.0)*x212*x216))+(((-1.0)*x208*x214))+(((-1.0)*x205*x212*x213))+(((-1.0)*x206*x209*x217))+(((0.12)*sj6*x208))+((x201*x219)))) < -0.00001)
continue;
IkReal x227=((0.5)*x221*(IKsqrt(((0.00408487835908797)+(((-0.222959717636647)*x210))+((x202*x204*x219))+(((3.90211415349382)*x205))+(((1.23606107790593)*x206*x210))+(((-1.0)*x204*x219))+(((-1.0)*x204*x218))+(((-1.0)*x206*x208*x209))+((x205*x218))+(((-1.0)*x202*x205*x219))+(((-0.0353131428337124)*x206))+(((-7.80422830698764)*x203*x207*x210))+(((0.12)*x220))+(((2.47212215581187)*cj6*x202*x216))+(((0.195771693012363)*x207*x210))+(((-1.23606107790593)*x206*x207))+((x204*x212*x213))+(((4.0)*x204))+(((0.0978858465061816)*x201))+(((-0.12)*x211))+(((0.222959717636647)*x207))+(((-1.0)*x214*x217))+(((-1.0)*x212*x216))+(((-1.0)*x208*x214))+(((-1.0)*x205*x212*x213))+(((-1.0)*x206*x209*x217))+(((0.12)*sj6*x208))+((x201*x219))))));
j7array[0]=((2.0)*(atan((x227+x226+(((-1.0)*x225))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((-2.0)*(atan((x225+x227+(((-1.0)*x226))))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

innerfn(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1398=pz*pz;
IkReal x1399=(px*r02);
IkReal x1400=(pz*r01);
IkReal x1401=(py*r02);
IkReal x1402=(pz*r00);
IkReal x1403=(x1402+(((-1.0)*x1399)));
IkReal x1404=((((-1.0)*x1401))+x1400);
IkReal x1406 = (x1398+(((r02*r02)*(((px*px)+(py*py)+(((-1.0)*x1398))))))+(((-2.0)*x1400*x1401))+(((-2.0)*x1399*x1402)));
if(IKabs(x1406)==0){
continue;
}
IkReal x1405=pow(x1406,-0.5);
CheckValue<IkReal> x1407 = IKatan2WithCheck(IkReal(x1403),IkReal(x1404),IKFAST_ATAN2_MAGTHRESH);
if(!x1407.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x1407.value))));
IkReal gconst52=((1.0)*x1403*x1405);
IkReal gconst53=((-1.0)*x1404*x1405);
IkReal x1408=j5;
IkReal x1409=((1.0)*r02);
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1409))+((pz*r00)))),IkReal((((pz*r01))+(((-1.0)*py*x1409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
IkReal x1410=x1412.value;
IkReal x1411=x1410;
if((((9.86960440108936)+(((-3.14159265358979)*x1408))+((j5*x1408))+(((-3.14159265358979)*x1411))+(((-3.14159265358979)*x1410))+((x1410*x1411))+(((-3.14159265358979)*j5))+((j5*x1411))+((x1408*x1410)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x1408))+((j5*x1408))+(((-3.14159265358979)*x1411))+(((-3.14159265358979)*x1410))+((x1410*x1411))+(((-3.14159265358979)*j5))+((j5*x1411))+((x1408*x1410)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1413=pz*pz;
IkReal x1414=px*px;
IkReal x1415=py*py;
IkReal x1416=gconst53*gconst53;
IkReal x1417=gconst52*gconst52;
IkReal x1418=(gconst53*py);
IkReal x1419=(px*r01);
IkReal x1420=((3.9e-6)*r02);
IkReal x1421=((0.1812)*r02);
IkReal x1422=(gconst53*pz);
IkReal x1423=(py*r00);
IkReal x1424=((0.3624)*r02);
IkReal x1425=(gconst52*py);
IkReal x1426=((0.06611688)*r02);
IkReal x1427=((0.015)*r02);
IkReal x1428=(gconst52*r01);
IkReal x1429=(gconst53*r00);
IkReal x1430=(pz*r00);
IkReal x1431=(px*r02);
IkReal x1432=((4.7112e-5)*gconst52);
IkReal x1433=(gconst52*px);
IkReal x1434=((4.7112e-5)*x1416);
IkReal x1435=((0.015)*x1429);
IkReal x1436=(py*pz*r01);
IkReal x1437=((0.1812)*x1415);
IkReal x1438=((3.9e-6)*x1417);
IkReal x1439=((4.7112e-5)*x1417);
IkReal x1440=((3.9e-6)*x1416);
IkReal x1441=((0.1812)*x1413);
IkReal x1442=((0.1812)*x1414);
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst53*px*x1426))+(((-1.0)*x1425*x1426))+(((0.06611688)*pz*x1428))+(((0.06611688)*r00*x1422)))),-1);
if(!x1443.valid){
continue;
}
CheckValue<IkReal> x1444 = IKatan2WithCheck(IkReal((((x1429*x1437))+(((-1.0)*x1420*x1433))+(((-1.0)*px*x1422*x1424))+(((-1.0)*x1419*x1434))+(((-1.0)*x1419*x1439))+(((-0.03)*x1436))+(((-0.03)*px*x1430))+((x1415*x1427))+((x1414*x1427))+(((-0.3624)*x1423*x1433))+((x1428*x1442))+((x1428*x1441))+(((-1.0)*x1428*x1437))+(((0.0001583768535)*r02))+(((-1.0)*x1429*x1442))+(((3.9e-6)*gconst52*x1430))+(((-3.9e-6)*r01*x1422))+((x1418*x1420))+(((-1.0)*pz*x1424*x1425))+((x1423*x1434))+((x1423*x1439))+((x1429*x1441))+(((-1.0)*x1413*x1427))+(((-0.3624)*x1418*x1419))+(((0.00191319239028)*x1428))+(((0.00191319239028)*x1429)))),IkReal(((((-1.0)*x1415*x1421))+(((-1.0)*x1419*x1438))+(((-0.03)*pz*r02*x1425))+(((-0.015)*x1415*x1428))+(((0.015)*x1413*x1428))+(((0.3624)*x1436))+(((0.0001583768535)*x1428))+(((0.0001583768535)*x1429))+(((-1.0)*x1414*x1435))+(((0.015)*x1414*x1428))+((x1413*x1435))+(((-4.7112e-5)*r02*x1418))+(((-1.0)*x1419*x1440))+((x1415*x1435))+(((-0.03)*x1422*x1431))+(((-0.03)*x1418*x1419))+(((-1.0)*x1414*x1421))+((x1423*x1438))+(((-0.00191319239028)*r02))+(((-1.0)*x1430*x1432))+(((0.3624)*px*x1430))+(((-0.03)*x1423*x1433))+(((4.7112e-5)*r01*x1422))+((x1431*x1432))+((x1423*x1440))+((x1413*x1421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1444.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1443.value)))+(x1444.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x1445=IKsin(j6);
IkReal x1446=IKcos(j6);
IkReal x1447=px*px;
IkReal x1448=pz*pz;
IkReal x1449=py*py;
IkReal x1450=((0.00469300708116777)*px);
IkReal x1451=(gconst52*r02);
IkReal x1452=((0.00469300708116777)*py);
IkReal x1453=(gconst53*r01);
IkReal x1454=(gconst52*r00);
IkReal x1455=(gconst52*r01);
IkReal x1456=((0.0296306544736378)*pz);
IkReal x1457=(gconst52*py);
IkReal x1458=(px*r00);
IkReal x1459=(px*py);
IkReal x1460=(gconst53*px);
IkReal x1461=(px*pz);
IkReal x1462=(pz*r02);
IkReal x1463=(py*pz);
IkReal x1464=(py*r01);
IkReal x1465=(gconst53*py);
IkReal x1466=(r02*x1445);
IkReal x1467=((0.987688482454592)*x1449);
IkReal x1468=(r00*x1445);
IkReal x1469=((0.156433569372259)*x1449);
IkReal x1470=(r01*x1445);
IkReal x1471=((0.03)*x1445);
IkReal x1472=((0.0564347265350685)*x1445);
IkReal x1473=((0.156433569372259)*x1448);
IkReal x1474=((1.97537696490918)*x1446);
IkReal x1475=((0.987688482454592)*x1448);
IkReal x1476=((0.156433569372259)*x1447);
IkReal x1477=((0.987688482454592)*x1447);
IkReal x1478=(r02*x1446);
IkReal x1479=((0.312867138744518)*x1465);
IkReal x1480=((0.0564347265350685)*x1446);
IkReal x1481=((0.3624)*x1446);
IkReal x1482=(gconst53*r00*x1446);
IkReal x1483=((0.00469300708116777)*pz*x1446);
evalcond[0]=((((-0.1812)*x1446*x1455))+(((-0.015)*x1478))+(((0.015)*x1445*x1455))+(((-0.1812)*x1466))+x1464+x1462+x1458+(((0.00013)*x1453))+(((-0.00013)*x1454))+(((0.015)*gconst53*x1468))+(((-0.1812)*x1482)));
evalcond[1]=((0.0105584569)+((x1460*x1471))+(((-1.0)*x1460*x1481))+(((-0.00026)*gconst52*px))+((x1457*x1471))+(((-0.03)*pz*x1446))+(((0.00026)*x1465))+x1447+x1449+x1448+(((-0.3624)*pz*x1445))+(((-1.0)*x1457*x1481)));
evalcond[2]=(((x1454*x1476))+(((-1.0)*pz*x1453*x1472))+(((0.312867138744518)*x1455*x1459))+((gconst53*x1452*x1478))+((x1466*x1475))+(((-1.0)*x1446*x1450*x1451))+((x1455*x1456))+(((0.0544373246804248)*x1466))+(((-1.0)*x1453*x1469))+((x1451*x1463*x1474))+(((0.0544373246804248)*x1446*x1455))+(((0.312867138744518)*x1451*x1461))+((pz*x1454*x1472))+(((1.97537696490918)*x1463*x1470))+(((-0.357978978769581)*x1462))+(((-0.357978978769581)*x1464))+(((-1.0)*px*r01*x1480))+(((-1.0)*x1446*x1455*x1477))+(((-1.0)*x1446*x1455*x1475))+((x1477*x1482))+(((1.97537696490918)*pz*x1445*x1458))+((py*r00*x1480))+(((0.0564347265350685)*x1465*x1466))+(((-1.0)*x1454*x1469))+(((0.00536968468154371)*x1478))+(((-1.0)*x1466*x1467))+((x1453*x1459*x1474))+((x1454*x1483))+((x1460*x1462*x1474))+((gconst53*r00*x1456))+(((-0.00160515983269011)*x1454))+((x1453*x1476))+((x1453*x1473))+(((-0.0296306544736378)*r02*x1460))+(((-0.357978978769581)*x1458))+((x1446*x1455*x1467))+(((-1.0)*x1475*x1482))+(((-1.0)*x1458*x1479))+(((-0.0296306544736378)*py*x1451))+((x1454*x1459*x1474))+(((0.0544373246804248)*x1482))+(((-0.00536968468154371)*gconst53*x1468))+(((-1.0)*x1466*x1477))+(((-1.0)*x1453*x1483))+((x1450*x1470))+(((-1.0)*x1462*x1479))+(((-1.0)*px*x1451*x1472))+(((-1.0)*x1454*x1473))+(((-1.0)*x1452*x1468))+(((0.00160515983269011)*x1453))+(((-1.0)*x1467*x1482))+(((-0.00536968468154371)*x1445*x1455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x1484=((5.54387622575087)*cj6);
j7eval[0]=((1.0)+(((-5.54387622575087)*pz*sj6))+(((35.0028623542932)*px*sj5))+(((-35.0028623542932)*cj5*py))+(((-1.0)*cj5*px*x1484))+(((-1.0)*py*sj5*x1484)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x1485=pz*pz;
IkReal x1486=cj5*cj5;
IkReal x1487=cj6*cj6;
IkReal x1488=py*py;
IkReal x1489=px*px;
IkReal x1490=(pz*sj6);
IkReal x1491=(px*sj5);
IkReal x1492=(py*sj5);
IkReal x1493=((7.80422830698764)*cj6);
IkReal x1494=(cj5*py);
IkReal x1495=(cj6*pz);
IkReal x1496=((1.23606107790593)*cj6);
IkReal x1497=(cj5*sj5);
IkReal x1498=((0.0353131428337124)*cj6);
IkReal x1499=((0.156433569372259)*cj6);
IkReal x1500=(px*py);
IkReal x1501=(cj5*px);
IkReal x1502=((0.0978858465061816)*x1486);
IkReal x1503=((3.90211415349382)*x1487);
IkReal x1504=(sj6*x1501);
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.156433569372259)*x1490))+(((-1.0)*x1499*x1501))+(((-1.0)*x1492*x1499))+(((0.987688482454592)*x1491))+(((-0.987688482454592)*x1494))),-1);
if(!x1512.valid){
continue;
}
IkReal x1505=x1512.value;
IkReal x1506=((0.015)*x1505);
CheckValue<IkReal> x1513=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.156433569372259)*x1490))+(((-1.0)*x1499*x1501))+(((0.987688482454592)*x1491))+(((-1.0)*py*sj5*x1499))+(((-0.987688482454592)*x1494))),-1);
if(!x1513.valid){
continue;
}
IkReal x1507=(sj6*x1492*(x1513.value));
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(((0.0282173632675343)+(((-0.156433569372259)*x1490))+(((-1.0)*x1492*x1499))+(((0.987688482454592)*x1491))+(((-1.0)*cj5*px*x1499))+(((-0.987688482454592)*x1494))),-1);
if(!x1514.valid){
continue;
}
IkReal x1508=(x1504*(x1514.value));
IkReal x1509=((1.0)*x1495*x1505);
IkReal x1510=(x1506+x1507+x1508);
if((((0.00408487835908797)+(((4.0)*x1488))+(((0.12)*sj6*x1492))+(((-1.0)*x1498*x1501))+(((2.47212215581187)*cj6*x1486*x1500))+(((-1.0)*x1488*x1502))+(((-1.0)*x1488*x1503))+(((-0.12)*x1495))+(((1.23606107790593)*x1490*x1494))+(((-1.0)*x1492*x1498))+(((-0.222959717636647)*x1494))+((x1486*x1488*x1503))+(((0.12)*x1504))+((x1489*x1502))+(((-1.23606107790593)*x1490*x1491))+(((0.195771693012363)*x1491*x1494))+(((0.222959717636647)*x1491))+(((-1.0)*x1490*x1492*x1493))+(((-1.0)*x1489*x1496*x1497))+(((3.90211415349382)*x1489))+((x1485*x1503))+(((-7.80422830698764)*x1487*x1491*x1494))+(((-1.0)*x1496*x1500))+((x1488*x1496*x1497))+(((-1.0)*x1486*x1489*x1503))+(((-1.0)*x1490*x1493*x1501))+(((-0.0353131428337124)*x1490))+(((0.0978858465061816)*x1485)))) < -0.00001)
continue;
IkReal x1511=((0.5)*x1505*(IKsqrt(((0.00408487835908797)+(((4.0)*x1488))+(((0.12)*sj6*x1492))+(((-1.0)*x1498*x1501))+(((2.47212215581187)*cj6*x1486*x1500))+(((-1.0)*x1488*x1502))+(((-1.0)*x1488*x1503))+(((-0.12)*x1495))+(((1.23606107790593)*x1490*x1494))+(((-1.0)*x1492*x1498))+(((-0.222959717636647)*x1494))+((x1486*x1488*x1503))+(((0.12)*x1504))+((x1489*x1502))+(((-1.23606107790593)*x1490*x1491))+(((0.195771693012363)*x1491*x1494))+(((0.222959717636647)*x1491))+(((-1.0)*x1490*x1492*x1493))+(((-1.0)*x1489*x1496*x1497))+(((3.90211415349382)*x1489))+((x1485*x1503))+(((-7.80422830698764)*x1487*x1491*x1494))+(((-1.0)*x1496*x1500))+((x1488*x1496*x1497))+(((-1.0)*x1486*x1489*x1503))+(((-1.0)*x1490*x1493*x1501))+(((-0.0353131428337124)*x1490))+(((0.0978858465061816)*x1485))))));
j7array[0]=((2.0)*(atan(((((-1.0)*x1509))+x1511+x1510))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((-2.0)*(atan(((((-1.0)*x1510))+x1509+x1511))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

innerfn(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1515=py*py;
IkReal x1516=px*px;
IkReal x1517=pz*pz;
IkReal x1518=(cj5*py);
IkReal x1519=((4.7112e-5)*r02);
IkReal x1520=(cj5*r00);
IkReal x1521=(cj5*pz);
IkReal x1522=((3.9e-6)*r01);
IkReal x1523=((3.9e-6)*r02);
IkReal x1524=(px*sj5);
IkReal x1525=(px*r01);
IkReal x1526=((0.03)*r02);
IkReal x1527=(r01*sj5);
IkReal x1528=((3.9e-6)*r00);
IkReal x1529=(py*pz);
IkReal x1530=(pz*sj5);
IkReal x1531=((0.3624)*r02);
IkReal x1532=((0.06611688)*pz);
IkReal x1533=((0.06611688)*r02);
IkReal x1534=(py*r00);
IkReal x1535=((0.015)*x1515);
IkReal x1536=((0.1812)*x1517);
IkReal x1537=((0.015)*x1516);
IkReal x1538=((0.1812)*x1516);
IkReal x1539=((0.1812)*x1515);
IkReal x1540=((0.015)*x1517);
IkReal x1541=(px*pz*r00);
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*px*x1533))+((x1520*x1532))+((x1527*x1532))+(((-1.0)*py*sj5*x1533)))),-1);
if(!x1542.valid){
continue;
}
CheckValue<IkReal> x1543 = IKatan2WithCheck(IkReal(((((-0.03)*x1541))+(((-0.03)*r01*x1529))+(((-1.0)*r02*x1540))+((x1528*x1530))+(((-1.0)*px*x1521*x1531))+((x1518*x1523))+((x1520*x1539))+((x1520*x1536))+((x1527*x1536))+((x1527*x1538))+(((0.0001583768535)*r02))+(((-0.3624)*x1518*x1525))+(((-0.3624)*x1524*x1534))+(((4.7112e-5)*x1534))+(((-1.0)*x1527*x1539))+(((-1.0)*sj5*x1529*x1531))+((r02*x1537))+((r02*x1535))+(((-1.0)*x1523*x1524))+(((0.00191319239028)*x1527))+(((0.00191319239028)*x1520))+(((-4.7112e-5)*x1525))+(((-1.0)*x1520*x1538))+(((-1.0)*x1521*x1522)))),IkReal(((((-0.03)*x1524*x1534))+(((-4.7112e-5)*r00*x1530))+(((4.7112e-5)*r01*x1521))+((x1519*x1524))+(((-1.0)*px*x1521*x1526))+(((0.3624)*r01*x1529))+((x1520*x1540))+(((-1.0)*x1518*x1519))+(((-1.0)*r02*x1538))+(((-1.0)*r02*x1539))+((x1520*x1535))+((x1527*x1537))+(((-0.03)*x1518*x1525))+(((0.0001583768535)*x1520))+(((0.0001583768535)*x1527))+((x1527*x1540))+(((0.3624)*x1541))+(((-1.0)*x1527*x1535))+((r02*x1536))+(((-1.0)*px*x1522))+(((-0.00191319239028)*r02))+((py*x1528))+(((-1.0)*x1520*x1537))+(((-1.0)*sj5*x1526*x1529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1543.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1542.value)))+(x1543.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x1544=IKsin(j6);
IkReal x1545=IKcos(j6);
IkReal x1546=px*px;
IkReal x1547=pz*pz;
IkReal x1548=py*py;
IkReal x1549=((0.156433569372259)*r01);
IkReal x1550=(px*r02);
IkReal x1551=((0.0296306544736378)*sj5);
IkReal x1552=(pz*r01);
IkReal x1553=((0.0296306544736378)*cj5);
IkReal x1554=(py*r02);
IkReal x1555=(cj5*pz);
IkReal x1556=(py*r01);
IkReal x1557=(cj5*py);
IkReal x1558=(r00*sj5);
IkReal x1559=(px*r00);
IkReal x1560=(pz*r00);
IkReal x1561=(pz*r02);
IkReal x1562=(pz*sj5);
IkReal x1563=(cj5*r01);
IkReal x1564=(sj5*x1544);
IkReal x1565=(cj5*x1547);
IkReal x1566=(r02*x1544);
IkReal x1567=(r00*x1545);
IkReal x1568=(px*py*sj5);
IkReal x1569=(px*x1544);
IkReal x1570=(r00*x1544);
IkReal x1571=(cj5*x1545);
IkReal x1572=((0.987688482454592)*x1548);
IkReal x1573=((0.987688482454592)*x1546);
IkReal x1574=((0.987688482454592)*x1547);
IkReal x1575=((1.97537696490918)*x1545);
IkReal x1576=(r02*x1545);
IkReal x1577=(sj5*x1545);
IkReal x1578=(r01*x1577);
evalcond[0]=((((-0.1812)*x1566))+(((-0.1812)*x1578))+(((-0.00013)*x1558))+(((-0.015)*x1576))+(((0.015)*r01*x1564))+(((0.015)*cj5*x1570))+x1561+x1556+x1559+(((-0.1812)*cj5*x1567))+(((0.00013)*x1563)));
evalcond[1]=((0.0105584569)+(((-0.03)*pz*x1545))+(((0.03)*cj5*x1569))+(((0.00026)*x1557))+(((-0.00026)*px*sj5))+(((0.03)*py*x1564))+x1546+x1547+x1548+(((-0.3624)*py*x1577))+(((-0.3624)*px*x1571))+(((-0.3624)*pz*x1544)));
evalcond[2]=((((-1.0)*cj5*x1567*x1572))+((x1551*x1552))+(((0.156433569372259)*x1546*x1558))+((x1554*x1562*x1575))+(((-1.0)*cj5*x1548*x1549))+((x1566*x1574))+((x1572*x1578))+(((0.00536968468154371)*x1576))+(((0.312867138744518)*px*sj5*x1556))+((x1553*x1560))+(((-0.00536968468154371)*cj5*x1570))+(((1.97537696490918)*px*x1556*x1571))+(((-0.00469300708116777)*x1552*x1571))+(((-1.0)*x1573*x1578))+((cj5*x1567*x1573))+(((0.00469300708116777)*pz*x1545*x1558))+(((-0.312867138744518)*x1554*x1555))+(((-1.0)*x1566*x1573))+(((-1.0)*x1566*x1572))+(((-0.0564347265350685)*px*r01*x1545))+(((1.97537696490918)*pz*x1544*x1559))+(((-0.0564347265350685)*x1550*x1564))+(((-0.156433569372259)*x1547*x1558))+(((0.0564347265350685)*py*x1567))+((cj5*x1546*x1549))+(((-0.00469300708116777)*x1550*x1577))+(((0.00469300708116777)*r01*x1569))+((x1549*x1565))+(((-0.00160515983269011)*x1558))+(((-0.312867138744518)*x1557*x1559))+(((1.97537696490918)*py*x1544*x1552))+(((-1.0)*x1574*x1578))+(((0.0544373246804248)*cj5*x1567))+(((0.0544373246804248)*x1566))+(((-1.0)*x1550*x1553))+(((-0.987688482454592)*x1565*x1567))+(((0.0544373246804248)*x1578))+(((-0.00536968468154371)*r01*x1564))+((x1550*x1555*x1575))+(((-0.156433569372259)*x1548*x1558))+(((-1.0)*x1551*x1554))+(((0.312867138744518)*x1550*x1562))+((px*py*x1558*x1575))+(((-0.357978978769581)*x1561))+(((0.00160515983269011)*x1563))+(((-0.0564347265350685)*cj5*x1544*x1552))+(((-0.00469300708116777)*py*x1570))+(((0.00469300708116777)*x1554*x1571))+(((0.0564347265350685)*cj5*x1544*x1554))+(((0.0564347265350685)*pz*x1544*x1558))+(((-0.357978978769581)*x1559))+(((-0.357978978769581)*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x1579=((5.54387622575087)*cj6);
j7eval[0]=((1.0)+(((-5.54387622575087)*pz*sj6))+(((-1.0)*cj5*px*x1579))+(((35.0028623542932)*px*sj5))+(((-35.0028623542932)*cj5*py))+(((-1.0)*py*sj5*x1579)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x1580=pz*pz;
IkReal x1581=cj5*cj5;
IkReal x1582=cj6*cj6;
IkReal x1583=py*py;
IkReal x1584=px*px;
IkReal x1585=(pz*sj6);
IkReal x1586=(px*sj5);
IkReal x1587=(py*sj5);
IkReal x1588=((7.80422830698764)*cj6);
IkReal x1589=(cj5*py);
IkReal x1590=(cj6*pz);
IkReal x1591=((1.23606107790593)*cj6);
IkReal x1592=(cj5*sj5);
IkReal x1593=((0.0353131428337124)*cj6);
IkReal x1594=((0.156433569372259)*cj6);
IkReal x1595=(px*py);
IkReal x1596=(cj5*px);
IkReal x1597=((0.0978858465061816)*x1581);
IkReal x1598=((3.90211415349382)*x1582);
IkReal x1599=(sj6*x1596);
CheckValue<IkReal> x1607=IKPowWithIntegerCheck(((0.0282173632675343)+(((-1.0)*x1594*x1596))+(((-0.987688482454592)*x1589))+(((0.987688482454592)*x1586))+(((-0.156433569372259)*x1585))+(((-1.0)*x1587*x1594))),-1);
if(!x1607.valid){
continue;
}
IkReal x1600=x1607.value;
IkReal x1601=((0.015)*x1600);
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(((0.0282173632675343)+(((-1.0)*py*sj5*x1594))+(((-1.0)*x1594*x1596))+(((-0.987688482454592)*x1589))+(((0.987688482454592)*x1586))+(((-0.156433569372259)*x1585))),-1);
if(!x1608.valid){
continue;
}
IkReal x1602=(sj6*x1587*(x1608.value));
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(((0.0282173632675343)+(((-1.0)*cj5*px*x1594))+(((-0.987688482454592)*x1589))+(((0.987688482454592)*x1586))+(((-0.156433569372259)*x1585))+(((-1.0)*x1587*x1594))),-1);
if(!x1609.valid){
continue;
}
IkReal x1603=(x1599*(x1609.value));
IkReal x1604=((1.0)*x1590*x1600);
IkReal x1605=(x1601+x1603+x1602);
if((((0.00408487835908797)+(((-1.0)*x1583*x1597))+(((-1.0)*x1583*x1598))+(((0.12)*sj6*x1587))+((x1583*x1591*x1592))+((x1584*x1597))+(((-1.0)*x1584*x1591*x1592))+(((-7.80422830698764)*x1582*x1586*x1589))+(((3.90211415349382)*x1584))+(((-0.222959717636647)*x1589))+(((-1.0)*x1593*x1596))+(((-0.12)*x1590))+(((-1.0)*x1585*x1587*x1588))+((x1580*x1598))+(((-1.0)*x1591*x1595))+(((-1.23606107790593)*x1585*x1586))+(((1.23606107790593)*x1585*x1589))+(((0.222959717636647)*x1586))+(((4.0)*x1583))+(((-1.0)*x1585*x1588*x1596))+(((-0.0353131428337124)*x1585))+(((0.195771693012363)*x1586*x1589))+(((0.12)*x1599))+(((-1.0)*x1587*x1593))+(((0.0978858465061816)*x1580))+((x1581*x1583*x1598))+(((2.47212215581187)*cj6*x1581*x1595))+(((-1.0)*x1581*x1584*x1598)))) < -0.00001)
continue;
IkReal x1606=((0.5)*x1600*(IKsqrt(((0.00408487835908797)+(((-1.0)*x1583*x1597))+(((-1.0)*x1583*x1598))+(((0.12)*sj6*x1587))+((x1583*x1591*x1592))+((x1584*x1597))+(((-1.0)*x1584*x1591*x1592))+(((-7.80422830698764)*x1582*x1586*x1589))+(((3.90211415349382)*x1584))+(((-0.222959717636647)*x1589))+(((-1.0)*x1593*x1596))+(((-0.12)*x1590))+(((-1.0)*x1585*x1587*x1588))+((x1580*x1598))+(((-1.0)*x1591*x1595))+(((-1.23606107790593)*x1585*x1586))+(((1.23606107790593)*x1585*x1589))+(((0.222959717636647)*x1586))+(((4.0)*x1583))+(((-1.0)*x1585*x1588*x1596))+(((-0.0353131428337124)*x1585))+(((0.195771693012363)*x1586*x1589))+(((0.12)*x1599))+(((-1.0)*x1587*x1593))+(((0.0978858465061816)*x1580))+((x1581*x1583*x1598))+(((2.47212215581187)*cj6*x1581*x1595))+(((-1.0)*x1581*x1584*x1598))))));
j7array[0]=((2.0)*(atan(((((-1.0)*x1604))+x1605+x1606))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((-2.0)*(atan(((((-1.0)*x1605))+x1604+x1606))));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j8eval[1];
j8eval[0]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
j8eval[0]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x231=(cj5*px);
IkReal x232=((6.58458988303061)*cj6);
IkReal x233=((6.66666666666667)*sj6);
IkReal x234=(py*sj5);
if( IKabs(((-0.1)+(((-1.0)*x233*x234))+(((-1.0)*x231*x233))+(((6.66666666666667)*cj6*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+(((1.04289046248173)*px*sj5))+(((-1.04289046248173)*cj5*py))+((x232*x234))+(((6.58458988303061)*pz*sj6))+((x231*x232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.1)+(((-1.0)*x233*x234))+(((-1.0)*x231*x233))+(((6.66666666666667)*cj6*pz))))+IKsqr(((-1.19326326256527)+(((1.04289046248173)*px*sj5))+(((-1.04289046248173)*cj5*py))+((x232*x234))+(((6.58458988303061)*pz*sj6))+((x231*x232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-0.1)+(((-1.0)*x233*x234))+(((-1.0)*x231*x233))+(((6.66666666666667)*cj6*pz))), ((-1.19326326256527)+(((1.04289046248173)*px*sj5))+(((-1.04289046248173)*cj5*py))+((x232*x234))+(((6.58458988303061)*pz*sj6))+((x231*x232))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x235=((1.0)*sj6);
IkReal x236=(cj5*px);
IkReal x237=(py*sj5);
IkReal x238=((0.987688482454592)*cj6);
evalcond[0]=((-0.015)+(((-1.0)*x235*x236))+(((-1.0)*x235*x237))+(((-0.15)*(IKsin(j8))))+((cj6*pz)));
evalcond[1]=((-0.17898948938479)+((x237*x238))+(((0.987688482454592)*pz*sj6))+(((-0.156433569372259)*cj5*py))+(((0.156433569372259)*px*sj5))+(((-0.15)*(IKcos(j8))))+((x236*x238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
sj7=0;
cj7=1.0;
j7=0;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=0;
cj7=1.0;
j7=0;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x239=(cj5*r00);
IkReal x240=((0.156433569372259)*cj6);
IkReal x241=(r01*sj5);
if( IKabs(((((-1.0)*cj6*r02))+((sj6*x241))+((sj6*x239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x240*x241))+(((-1.0)*x239*x240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r02))+((sj6*x241))+((sj6*x239))))+IKsqr(((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x240*x241))+(((-1.0)*x239*x240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj6*r02))+((sj6*x241))+((sj6*x239))), ((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x240*x241))+(((-1.0)*x239*x240))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x242=((1.0)*sj6);
IkReal x243=(r01*sj5);
IkReal x244=(cj5*r00);
IkReal x245=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x242*x243))+(((-1.0)*x242*x244))+(IKsin(j9))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+((x244*x245))+(IKcos(j9))+(((-0.987688482454592)*r00*sj5))+((x243*x245))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x246=((1.0)*sj6);
IkReal x247=(r01*sj5);
IkReal x248=(cj5*r00);
IkReal x249=((0.156433569372259)*cj6);
if( IKabs((((cj6*r02))+(((-1.0)*x246*x248))+(((-1.0)*x246*x247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x248*x249))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x247*x249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r02))+(((-1.0)*x246*x248))+(((-1.0)*x246*x247))))+IKsqr(((((-1.0)*x248*x249))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x247*x249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((cj6*r02))+(((-1.0)*x246*x248))+(((-1.0)*x246*x247))), ((((-1.0)*x248*x249))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x247*x249))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x250=((1.0)*sj6);
IkReal x251=(r01*sj5);
IkReal x252=(cj5*r00);
IkReal x253=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x250*x251))+(((-1.0)*x250*x252))+((cj6*r02))+(((-1.0)*(IKsin(j9)))));
evalcond[1]=((((0.156433569372259)*r02*sj6))+((x251*x253))+(IKcos(j9))+(((-0.987688482454592)*r00*sj5))+((x252*x253))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x254=(r00*sj5);
IkReal x255=(cj5*r01);
IkReal x256=(r02*sj6);
IkReal x257=((0.156433569372259)*cj6);
IkReal x258=(cj5*r00);
IkReal x259=(r01*sj5);
IkReal x260=((0.987688482454592)*cj6);
if( IKabs((((x258*x260))+((x259*x260))+(((-0.156433569372259)*x255))+(((0.156433569372259)*x254))+(((0.987688482454592)*x256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.987688482454592)*x255))+(((-0.156433569372259)*x256))+(((-1.0)*x257*x259))+(((-1.0)*x257*x258))+(((0.987688482454592)*x254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x258*x260))+((x259*x260))+(((-0.156433569372259)*x255))+(((0.156433569372259)*x254))+(((0.987688482454592)*x256))))+IKsqr(((((-0.987688482454592)*x255))+(((-0.156433569372259)*x256))+(((-1.0)*x257*x259))+(((-1.0)*x257*x258))+(((0.987688482454592)*x254))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x258*x260))+((x259*x260))+(((-0.156433569372259)*x255))+(((0.156433569372259)*x254))+(((0.987688482454592)*x256))), ((((-0.987688482454592)*x255))+(((-0.156433569372259)*x256))+(((-1.0)*x257*x259))+(((-1.0)*x257*x258))+(((0.987688482454592)*x254))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x261=((0.987688482454592)*sj5);
IkReal x262=(cj5*r01);
IkReal x263=(cj6*r01);
IkReal x264=((0.156433569372259)*r00);
IkReal x265=(cj5*cj6);
IkReal x266=(r02*sj6);
evalcond[0]=((((0.987688482454592)*x262))+(((0.156433569372259)*x266))+(((0.156433569372259)*sj5*x263))+((x264*x265))+(IKcos(j9))+(((-1.0)*r00*x261)));
evalcond[1]=((((0.987688482454592)*x266))+((sj5*x264))+(((0.987688482454592)*r00*x265))+((x261*x263))+(((-0.156433569372259)*x262))+(((-1.0)*(IKsin(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x267=(r00*sj5);
IkReal x268=(cj5*r01);
IkReal x269=(r02*sj6);
IkReal x270=((0.156433569372259)*cj6);
IkReal x271=(cj5*r00);
IkReal x272=(r01*sj5);
IkReal x273=((0.987688482454592)*cj6);
if( IKabs(((((-1.0)*x272*x273))+(((0.156433569372259)*x268))+(((-1.0)*x271*x273))+(((-0.987688482454592)*x269))+(((-0.156433569372259)*x267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.987688482454592)*x267))+(((-0.987688482454592)*x268))+(((-1.0)*x270*x271))+(((-1.0)*x270*x272))+(((-0.156433569372259)*x269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x272*x273))+(((0.156433569372259)*x268))+(((-1.0)*x271*x273))+(((-0.987688482454592)*x269))+(((-0.156433569372259)*x267))))+IKsqr(((((0.987688482454592)*x267))+(((-0.987688482454592)*x268))+(((-1.0)*x270*x271))+(((-1.0)*x270*x272))+(((-0.156433569372259)*x269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x272*x273))+(((0.156433569372259)*x268))+(((-1.0)*x271*x273))+(((-0.987688482454592)*x269))+(((-0.156433569372259)*x267))), ((((0.987688482454592)*x267))+(((-0.987688482454592)*x268))+(((-1.0)*x270*x271))+(((-1.0)*x270*x272))+(((-0.156433569372259)*x269))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x274=(r00*sj5);
IkReal x275=(cj5*r01);
IkReal x276=(r02*sj6);
IkReal x277=((0.156433569372259)*cj6);
IkReal x278=(cj5*r00);
IkReal x279=(r01*sj5);
IkReal x280=((0.987688482454592)*cj6);
evalcond[0]=(((x279*x280))+((x278*x280))+(((0.156433569372259)*x274))+(IKsin(j9))+(((-0.156433569372259)*x275))+(((0.987688482454592)*x276)));
evalcond[1]=((((0.156433569372259)*x276))+(IKcos(j9))+((x277*x279))+((x277*x278))+(((-0.987688482454592)*x274))+(((0.987688482454592)*x275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x281=(r00*sj5);
IkReal x282=(cj5*r01);
IkReal x283=(r02*sj6);
IkReal x284=((0.156433569372259)*cj6);
IkReal x285=(cj5*r00);
IkReal x286=(r01*sj5);
IkReal x287=((0.987688482454592)*cj6);
CheckValue<IkReal> x288=IKPowWithIntegerCheck(sj8,-1);
if(!x288.valid){
continue;
}
if( IKabs(((x288.value)*(((((-0.156433569372259)*x282))+((x285*x287))+((x286*x287))+(((0.156433569372259)*x281))+(((0.987688482454592)*x283)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.156433569372259)*x283))+(((0.987688482454592)*x281))+(((-1.0)*x284*x285))+(((-1.0)*x284*x286))+(((-0.987688482454592)*x282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x288.value)*(((((-0.156433569372259)*x282))+((x285*x287))+((x286*x287))+(((0.156433569372259)*x281))+(((0.987688482454592)*x283))))))+IKsqr(((((-0.156433569372259)*x283))+(((0.987688482454592)*x281))+(((-1.0)*x284*x285))+(((-1.0)*x284*x286))+(((-0.987688482454592)*x282))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x288.value)*(((((-0.156433569372259)*x282))+((x285*x287))+((x286*x287))+(((0.156433569372259)*x281))+(((0.987688482454592)*x283))))), ((((-0.156433569372259)*x283))+(((0.987688482454592)*x281))+(((-1.0)*x284*x285))+(((-1.0)*x284*x286))+(((-0.987688482454592)*x282))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x289=IKsin(j9);
IkReal x290=((0.987688482454592)*r01);
IkReal x291=((1.0)*sj6);
IkReal x292=(r01*sj5);
IkReal x293=(cj5*r00);
IkReal x294=((0.156433569372259)*cj6);
IkReal x295=(r00*sj5);
IkReal x296=(r02*sj6);
evalcond[0]=((((-1.0)*x291*x293))+(((-1.0)*x291*x292))+((cj6*r02))+((cj8*x289)));
evalcond[1]=((((-0.987688482454592)*x295))+((cj5*x290))+(IKcos(j9))+(((0.156433569372259)*x296))+((x293*x294))+((x292*x294)));
evalcond[2]=(((cj6*sj5*x290))+(((-1.0)*sj8*x289))+(((0.156433569372259)*x295))+(((0.987688482454592)*cj6*x293))+(((0.987688482454592)*x296))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x297=(cj5*r00);
IkReal x298=((0.156433569372259)*cj6);
IkReal x299=(r01*sj5);
CheckValue<IkReal> x300=IKPowWithIntegerCheck(cj8,-1);
if(!x300.valid){
continue;
}
if( IKabs(((x300.value)*(((((-1.0)*cj6*r02))+((sj6*x299))+((sj6*x297)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x297*x298))+(((-1.0)*x298*x299))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x300.value)*(((((-1.0)*cj6*r02))+((sj6*x299))+((sj6*x297))))))+IKsqr(((((-1.0)*x297*x298))+(((-1.0)*x298*x299))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x300.value)*(((((-1.0)*cj6*r02))+((sj6*x299))+((sj6*x297))))), ((((-1.0)*x297*x298))+(((-1.0)*x298*x299))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x301=IKsin(j9);
IkReal x302=((0.987688482454592)*r01);
IkReal x303=((1.0)*sj6);
IkReal x304=(r01*sj5);
IkReal x305=(cj5*r00);
IkReal x306=((0.156433569372259)*cj6);
IkReal x307=(r00*sj5);
IkReal x308=(r02*sj6);
evalcond[0]=(((cj8*x301))+(((-1.0)*x303*x305))+(((-1.0)*x303*x304))+((cj6*r02)));
evalcond[1]=((IKcos(j9))+((x305*x306))+((x304*x306))+(((-0.987688482454592)*x307))+((cj5*x302))+(((0.156433569372259)*x308)));
evalcond[2]=((((-1.0)*sj8*x301))+(((0.987688482454592)*x308))+(((0.156433569372259)*x307))+(((-0.156433569372259)*cj5*r01))+((cj6*sj5*x302))+(((0.987688482454592)*cj6*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x309=(cj5*px);
IkReal x310=((6.58458988303061)*cj6);
IkReal x311=((6.66666666666667)*sj6);
IkReal x312=(py*sj5);
if( IKabs(((0.1)+(((-6.66666666666667)*cj6*pz))+((x309*x311))+((x311*x312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+((x310*x312))+(((1.04289046248173)*px*sj5))+(((-1.04289046248173)*cj5*py))+(((6.58458988303061)*pz*sj6))+((x309*x310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.1)+(((-6.66666666666667)*cj6*pz))+((x309*x311))+((x311*x312))))+IKsqr(((-1.19326326256527)+((x310*x312))+(((1.04289046248173)*px*sj5))+(((-1.04289046248173)*cj5*py))+(((6.58458988303061)*pz*sj6))+((x309*x310))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((0.1)+(((-6.66666666666667)*cj6*pz))+((x309*x311))+((x311*x312))), ((-1.19326326256527)+((x310*x312))+(((1.04289046248173)*px*sj5))+(((-1.04289046248173)*cj5*py))+(((6.58458988303061)*pz*sj6))+((x309*x310))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x313=((1.0)*sj6);
IkReal x314=(cj5*px);
IkReal x315=(py*sj5);
IkReal x316=((0.987688482454592)*cj6);
evalcond[0]=((-0.015)+(((-1.0)*x313*x314))+(((-1.0)*x313*x315))+((cj6*pz))+(((0.15)*(IKsin(j8)))));
evalcond[1]=((-0.17898948938479)+(((0.987688482454592)*pz*sj6))+((x315*x316))+(((-0.156433569372259)*cj5*py))+(((0.156433569372259)*px*sj5))+((x314*x316))+(((-0.15)*(IKcos(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x317=((1.0)*sj6);
IkReal x318=(r01*sj5);
IkReal x319=(cj5*r00);
IkReal x320=((0.156433569372259)*cj6);
if( IKabs((((cj6*r02))+(((-1.0)*x317*x318))+(((-1.0)*x317*x319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x318*x320))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x319*x320))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r02))+(((-1.0)*x317*x318))+(((-1.0)*x317*x319))))+IKsqr((((x318*x320))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x319*x320))+(((0.987688482454592)*cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((cj6*r02))+(((-1.0)*x317*x318))+(((-1.0)*x317*x319))), (((x318*x320))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x319*x320))+(((0.987688482454592)*cj5*r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x321=((1.0)*sj6);
IkReal x322=(r01*sj5);
IkReal x323=(cj5*r00);
IkReal x324=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x321*x323))+(((-1.0)*x321*x322))+((cj6*r02))+(((-1.0)*(IKsin(j9)))));
evalcond[1]=(((x322*x324))+((x323*x324))+(((0.156433569372259)*r02*sj6))+(((-1.0)*(IKcos(j9))))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x325=(cj5*r00);
IkReal x326=((0.156433569372259)*cj6);
IkReal x327=(r01*sj5);
if( IKabs(((((-1.0)*cj6*r02))+((sj6*x327))+((sj6*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x326*x327))+((x325*x326))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r02))+((sj6*x327))+((sj6*x325))))+IKsqr((((x326*x327))+((x325*x326))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj6*r02))+((sj6*x327))+((sj6*x325))), (((x326*x327))+((x325*x326))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x328=((1.0)*sj6);
IkReal x329=(r01*sj5);
IkReal x330=(cj5*r00);
IkReal x331=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x328*x330))+(IKsin(j9))+((cj6*r02))+(((-1.0)*x328*x329)));
evalcond[1]=(((x330*x331))+(((0.156433569372259)*r02*sj6))+(((-1.0)*(IKcos(j9))))+(((-0.987688482454592)*r00*sj5))+((x329*x331))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x332=(r00*sj5);
IkReal x333=(cj5*r01);
IkReal x334=(r02*sj6);
IkReal x335=((0.156433569372259)*cj6);
IkReal x336=(cj5*r00);
IkReal x337=(r01*sj5);
IkReal x338=((0.987688482454592)*cj6);
if( IKabs(((((0.987688482454592)*x334))+((x336*x338))+((x337*x338))+(((-0.156433569372259)*x333))+(((0.156433569372259)*x332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x335*x336))+((x335*x337))+(((0.987688482454592)*x333))+(((-0.987688482454592)*x332))+(((0.156433569372259)*x334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*x334))+((x336*x338))+((x337*x338))+(((-0.156433569372259)*x333))+(((0.156433569372259)*x332))))+IKsqr((((x335*x336))+((x335*x337))+(((0.987688482454592)*x333))+(((-0.987688482454592)*x332))+(((0.156433569372259)*x334))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.987688482454592)*x334))+((x336*x338))+((x337*x338))+(((-0.156433569372259)*x333))+(((0.156433569372259)*x332))), (((x335*x336))+((x335*x337))+(((0.987688482454592)*x333))+(((-0.987688482454592)*x332))+(((0.156433569372259)*x334))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x339=(r00*sj5);
IkReal x340=(cj5*r01);
IkReal x341=(r02*sj6);
IkReal x342=((0.156433569372259)*cj6);
IkReal x343=(cj5*r00);
IkReal x344=(r01*sj5);
IkReal x345=((0.987688482454592)*cj6);
evalcond[0]=((((0.987688482454592)*x341))+((x344*x345))+(((0.156433569372259)*x339))+((x343*x345))+(((-1.0)*(IKsin(j9))))+(((-0.156433569372259)*x340)));
evalcond[1]=((((0.987688482454592)*x340))+(((-1.0)*(IKcos(j9))))+(((-0.987688482454592)*x339))+(((0.156433569372259)*x341))+((x342*x344))+((x342*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x346=(r00*sj5);
IkReal x347=(cj5*r01);
IkReal x348=(r02*sj6);
IkReal x349=((0.156433569372259)*cj6);
IkReal x350=(cj5*r00);
IkReal x351=(r01*sj5);
IkReal x352=((0.987688482454592)*cj6);
if( IKabs(((((-0.987688482454592)*x348))+(((-1.0)*x351*x352))+(((0.156433569372259)*x347))+(((-0.156433569372259)*x346))+(((-1.0)*x350*x352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.987688482454592)*x346))+(((0.987688482454592)*x347))+((x349*x350))+((x349*x351))+(((0.156433569372259)*x348)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.987688482454592)*x348))+(((-1.0)*x351*x352))+(((0.156433569372259)*x347))+(((-0.156433569372259)*x346))+(((-1.0)*x350*x352))))+IKsqr(((((-0.987688482454592)*x346))+(((0.987688482454592)*x347))+((x349*x350))+((x349*x351))+(((0.156433569372259)*x348))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.987688482454592)*x348))+(((-1.0)*x351*x352))+(((0.156433569372259)*x347))+(((-0.156433569372259)*x346))+(((-1.0)*x350*x352))), ((((-0.987688482454592)*x346))+(((0.987688482454592)*x347))+((x349*x350))+((x349*x351))+(((0.156433569372259)*x348))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x353=(r00*sj5);
IkReal x354=(cj5*r01);
IkReal x355=(r02*sj6);
IkReal x356=((0.156433569372259)*cj6);
IkReal x357=(cj5*r00);
IkReal x358=(r01*sj5);
IkReal x359=((0.987688482454592)*cj6);
evalcond[0]=((((-0.156433569372259)*x354))+(((0.987688482454592)*x355))+(IKsin(j9))+((x358*x359))+(((0.156433569372259)*x353))+((x357*x359)));
evalcond[1]=((((-0.987688482454592)*x353))+((x356*x358))+((x356*x357))+(((0.987688482454592)*x354))+(((-1.0)*(IKcos(j9))))+(((0.156433569372259)*x355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x360=(r00*sj5);
IkReal x361=(cj5*r01);
IkReal x362=(r02*sj6);
IkReal x363=((0.156433569372259)*cj6);
IkReal x364=(cj5*r00);
IkReal x365=(r01*sj5);
IkReal x366=((0.987688482454592)*cj6);
CheckValue<IkReal> x367=IKPowWithIntegerCheck(sj8,-1);
if(!x367.valid){
continue;
}
if( IKabs(((x367.value)*(((((-0.156433569372259)*x361))+((x364*x366))+(((0.156433569372259)*x360))+(((0.987688482454592)*x362))+((x365*x366)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*x362))+(((0.987688482454592)*x361))+(((-0.987688482454592)*x360))+((x363*x364))+((x363*x365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x367.value)*(((((-0.156433569372259)*x361))+((x364*x366))+(((0.156433569372259)*x360))+(((0.987688482454592)*x362))+((x365*x366))))))+IKsqr(((((0.156433569372259)*x362))+(((0.987688482454592)*x361))+(((-0.987688482454592)*x360))+((x363*x364))+((x363*x365))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x367.value)*(((((-0.156433569372259)*x361))+((x364*x366))+(((0.156433569372259)*x360))+(((0.987688482454592)*x362))+((x365*x366))))), ((((0.156433569372259)*x362))+(((0.987688482454592)*x361))+(((-0.987688482454592)*x360))+((x363*x364))+((x363*x365))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x368=IKsin(j9);
IkReal x369=((0.987688482454592)*r01);
IkReal x370=((1.0)*sj6);
IkReal x371=(r01*sj5);
IkReal x372=(cj5*r00);
IkReal x373=((0.156433569372259)*cj6);
IkReal x374=(r00*sj5);
IkReal x375=(r02*sj6);
IkReal x376=((1.0)*x368);
evalcond[0]=((((-1.0)*x370*x372))+(((-1.0)*x370*x371))+(((-1.0)*cj8*x376))+((cj6*r02)));
evalcond[1]=((((-1.0)*(IKcos(j9))))+(((0.156433569372259)*x375))+((x372*x373))+(((-0.987688482454592)*x374))+((cj5*x369))+((x371*x373)));
evalcond[2]=((((-1.0)*sj8*x376))+(((0.987688482454592)*cj6*x372))+(((0.156433569372259)*x374))+(((0.987688482454592)*x375))+((cj6*sj5*x369))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x377=((1.0)*sj6);
IkReal x378=(r01*sj5);
IkReal x379=(cj5*r00);
IkReal x380=((0.156433569372259)*cj6);
CheckValue<IkReal> x381=IKPowWithIntegerCheck(cj8,-1);
if(!x381.valid){
continue;
}
if( IKabs(((x381.value)*(((((-1.0)*x377*x379))+(((-1.0)*x377*x378))+((cj6*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x378*x380))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x379*x380))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x381.value)*(((((-1.0)*x377*x379))+(((-1.0)*x377*x378))+((cj6*r02))))))+IKsqr((((x378*x380))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x379*x380))+(((0.987688482454592)*cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x381.value)*(((((-1.0)*x377*x379))+(((-1.0)*x377*x378))+((cj6*r02))))), (((x378*x380))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x379*x380))+(((0.987688482454592)*cj5*r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x382=IKsin(j9);
IkReal x383=((0.987688482454592)*r01);
IkReal x384=((1.0)*sj6);
IkReal x385=(r01*sj5);
IkReal x386=(cj5*r00);
IkReal x387=((0.156433569372259)*cj6);
IkReal x388=(r00*sj5);
IkReal x389=(r02*sj6);
IkReal x390=((1.0)*x382);
evalcond[0]=((((-1.0)*cj8*x390))+(((-1.0)*x384*x385))+(((-1.0)*x384*x386))+((cj6*r02)));
evalcond[1]=((((-1.0)*(IKcos(j9))))+((x386*x387))+(((0.156433569372259)*x389))+((x385*x387))+((cj5*x383))+(((-0.987688482454592)*x388)));
evalcond[2]=((((0.987688482454592)*x389))+((cj6*sj5*x383))+(((0.987688482454592)*cj6*x386))+(((0.156433569372259)*x388))+(((-1.0)*sj8*x390))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x391=((6.58458988303061)*px);
IkReal x392=(cj5*cj6);
IkReal x393=(pz*sj6);
IkReal x394=((1.04289046248173)*sj5);
IkReal x395=(cj6*py);
IkReal x396=(cj5*py);
if( IKabs(((0.188115755116895)+(((-1.04289046248173)*px*x392))+(((-1.0)*x394*x395))+(((-1.04289046248173)*x393))+(((-6.58458988303061)*x396))+((sj5*x391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+(((-1.04289046248173)*x396))+((x391*x392))+((px*x394))+(((6.58458988303061)*x393))+(((6.58458988303061)*sj5*x395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.188115755116895)+(((-1.04289046248173)*px*x392))+(((-1.0)*x394*x395))+(((-1.04289046248173)*x393))+(((-6.58458988303061)*x396))+((sj5*x391))))+IKsqr(((-1.19326326256527)+(((-1.04289046248173)*x396))+((x391*x392))+((px*x394))+(((6.58458988303061)*x393))+(((6.58458988303061)*sj5*x395))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((0.188115755116895)+(((-1.04289046248173)*px*x392))+(((-1.0)*x394*x395))+(((-1.04289046248173)*x393))+(((-6.58458988303061)*x396))+((sj5*x391))), ((-1.19326326256527)+(((-1.04289046248173)*x396))+((x391*x392))+((px*x394))+(((6.58458988303061)*x393))+(((6.58458988303061)*sj5*x395))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x397=((0.156433569372259)*cj5);
IkReal x398=(cj6*px);
IkReal x399=(px*sj5);
IkReal x400=(pz*sj6);
IkReal x401=((0.987688482454592)*cj5);
IkReal x402=(cj6*py*sj5);
evalcond[0]=((-0.17898948938479)+(((0.156433569372259)*x399))+(((-1.0)*py*x397))+(((0.987688482454592)*x402))+(((0.987688482454592)*x400))+((x398*x401))+(((-0.15)*(IKcos(j8)))));
evalcond[1]=((-0.0282173632675343)+((py*x401))+(((-0.987688482454592)*x399))+((x397*x398))+(((0.15)*(IKsin(j8))))+(((0.156433569372259)*x402))+(((0.156433569372259)*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x403=(cj5*r00);
IkReal x404=((0.987688482454592)*cj6);
IkReal x405=(r01*sj5);
if( IKabs(((((0.987688482454592)*r02*sj6))+((x404*x405))+(((0.156433569372259)*r00*sj5))+((x403*x404))+(((-0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r02))+((sj6*x403))+((sj6*x405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj6))+((x404*x405))+(((0.156433569372259)*r00*sj5))+((x403*x404))+(((-0.156433569372259)*cj5*r01))))+IKsqr(((((-1.0)*cj6*r02))+((sj6*x403))+((sj6*x405))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.987688482454592)*r02*sj6))+((x404*x405))+(((0.156433569372259)*r00*sj5))+((x403*x404))+(((-0.156433569372259)*cj5*r01))), ((((-1.0)*cj6*r02))+((sj6*x403))+((sj6*x405))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x406=((1.0)*sj6);
IkReal x407=(r01*sj5);
IkReal x408=(cj5*r00);
IkReal x409=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*x406*x407))+(((-1.0)*x406*x408))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=(((x407*x409))+(((0.987688482454592)*r02*sj6))+((x408*x409))+(((0.156433569372259)*r00*sj5))+(((-1.0)*(IKsin(j9))))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x410=(cj5*r00);
IkReal x411=((0.987688482454592)*cj6);
IkReal x412=(r01*sj5);
if( IKabs(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x411*x412))+(((-0.987688482454592)*r02*sj6))+(((-1.0)*x410*x411))+(((0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r02))+((sj6*x410))+((sj6*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x411*x412))+(((-0.987688482454592)*r02*sj6))+(((-1.0)*x410*x411))+(((0.156433569372259)*cj5*r01))))+IKsqr(((((-1.0)*cj6*r02))+((sj6*x410))+((sj6*x412))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x411*x412))+(((-0.987688482454592)*r02*sj6))+(((-1.0)*x410*x411))+(((0.156433569372259)*cj5*r01))), ((((-1.0)*cj6*r02))+((sj6*x410))+((sj6*x412))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x413=((1.0)*sj6);
IkReal x414=(r01*sj5);
IkReal x415=(cj5*r00);
IkReal x416=((0.987688482454592)*cj6);
evalcond[0]=((IKcos(j9))+((cj6*r02))+(((-1.0)*x413*x414))+(((-1.0)*x413*x415)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+((x415*x416))+((x414*x416))+(IKsin(j9))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x417=(cj5*r00);
IkReal x418=((0.156433569372259)*cj6);
IkReal x419=(r01*sj5);
if( IKabs(((((0.156433569372259)*r02*sj6))+((x417*x418))+(((-0.987688482454592)*r00*sj5))+((x418*x419))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r02))+((sj6*x417))+((sj6*x419)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.156433569372259)*r02*sj6))+((x417*x418))+(((-0.987688482454592)*r00*sj5))+((x418*x419))+(((0.987688482454592)*cj5*r01))))+IKsqr(((((-1.0)*cj6*r02))+((sj6*x417))+((sj6*x419))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.156433569372259)*r02*sj6))+((x417*x418))+(((-0.987688482454592)*r00*sj5))+((x418*x419))+(((0.987688482454592)*cj5*r01))), ((((-1.0)*cj6*r02))+((sj6*x417))+((sj6*x419))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x420=((1.0)*sj6);
IkReal x421=(r01*sj5);
IkReal x422=(cj5*r00);
IkReal x423=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x420*x422))+(((-1.0)*x420*x421))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x422*x423))+(((-1.0)*(IKsin(j9))))+((x421*x423))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x424=(cj5*r00);
IkReal x425=((0.156433569372259)*cj6);
IkReal x426=(r01*sj5);
if( IKabs(((((-1.0)*x425*x426))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x424*x425)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x424))+((sj6*x426))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x425*x426))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x424*x425))))+IKsqr((((sj6*x424))+((sj6*x426))+(((-1.0)*cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x425*x426))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x424*x425))), (((sj6*x424))+((sj6*x426))+(((-1.0)*cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x427=((1.0)*sj6);
IkReal x428=(r01*sj5);
IkReal x429=(cj5*r00);
IkReal x430=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x427*x428))+(((-1.0)*x427*x429))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=(((x429*x430))+(((0.156433569372259)*r02*sj6))+((x428*x430))+(IKsin(j9))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x431=(cj5*r00);
IkReal x432=((0.156433569372259)*cj6);
IkReal x433=(r01*sj5);
CheckValue<IkReal> x434=IKPowWithIntegerCheck(cj8,-1);
if(!x434.valid){
continue;
}
if( IKabs(((x434.value)*(((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x431*x432))+((x432*x433))+(((0.987688482454592)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x433))+((sj6*x431))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x434.value)*(((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x431*x432))+((x432*x433))+(((0.987688482454592)*cj5*r01))))))+IKsqr((((sj6*x433))+((sj6*x431))+(((-1.0)*cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x434.value)*(((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x431*x432))+((x432*x433))+(((0.987688482454592)*cj5*r01))))), (((sj6*x433))+((sj6*x431))+(((-1.0)*cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x435=IKsin(j9);
IkReal x436=(cj5*r01);
IkReal x437=((1.0)*sj6);
IkReal x438=(r01*sj5);
IkReal x439=(cj5*r00);
IkReal x440=(r02*sj6);
IkReal x441=(r00*sj5);
IkReal x442=((0.156433569372259)*cj6);
IkReal x443=((0.987688482454592)*cj6);
IkReal x444=((1.0)*x435);
evalcond[0]=((((-1.0)*x437*x439))+(((-1.0)*x437*x438))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=(((x439*x443))+(((0.156433569372259)*x441))+(((-1.0)*sj8*x444))+(((-0.156433569372259)*x436))+((x438*x443))+(((0.987688482454592)*x440)));
evalcond[2]=(((x439*x442))+(((0.987688482454592)*x436))+(((0.156433569372259)*x440))+(((-1.0)*cj8*x444))+(((-0.987688482454592)*x441))+((x438*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x445=(cj5*r00);
IkReal x446=((0.987688482454592)*cj6);
IkReal x447=(r01*sj5);
CheckValue<IkReal> x448=IKPowWithIntegerCheck(sj8,-1);
if(!x448.valid){
continue;
}
if( IKabs(((x448.value)*((((x446*x447))+(((0.987688482454592)*r02*sj6))+((x445*x446))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x445))+((sj6*x447))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x448.value)*((((x446*x447))+(((0.987688482454592)*r02*sj6))+((x445*x446))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))))+IKsqr((((sj6*x445))+((sj6*x447))+(((-1.0)*cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x448.value)*((((x446*x447))+(((0.987688482454592)*r02*sj6))+((x445*x446))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))), (((sj6*x445))+((sj6*x447))+(((-1.0)*cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x449=IKsin(j9);
IkReal x450=(cj5*r01);
IkReal x451=((1.0)*sj6);
IkReal x452=(r01*sj5);
IkReal x453=(cj5*r00);
IkReal x454=(r02*sj6);
IkReal x455=(r00*sj5);
IkReal x456=((0.156433569372259)*cj6);
IkReal x457=((0.987688482454592)*cj6);
IkReal x458=((1.0)*x449);
evalcond[0]=((IKcos(j9))+((cj6*r02))+(((-1.0)*x451*x452))+(((-1.0)*x451*x453)));
evalcond[1]=((((-1.0)*sj8*x458))+((x452*x457))+(((0.987688482454592)*x454))+((x453*x457))+(((-0.156433569372259)*x450))+(((0.156433569372259)*x455)));
evalcond[2]=(((x452*x456))+(((0.987688482454592)*x450))+((x453*x456))+(((-1.0)*cj8*x458))+(((0.156433569372259)*x454))+(((-0.987688482454592)*x455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x459=((6.58458988303061)*px);
IkReal x460=(cj5*cj6);
IkReal x461=(pz*sj6);
IkReal x462=((1.04289046248173)*sj5);
IkReal x463=(cj6*py);
IkReal x464=(cj5*py);
if( IKabs(((-0.188115755116895)+(((1.04289046248173)*x461))+(((1.04289046248173)*px*x460))+(((-1.0)*sj5*x459))+((x462*x463))+(((6.58458988303061)*x464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+(((-1.04289046248173)*x464))+((px*x462))+((x459*x460))+(((6.58458988303061)*sj5*x463))+(((6.58458988303061)*x461)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.188115755116895)+(((1.04289046248173)*x461))+(((1.04289046248173)*px*x460))+(((-1.0)*sj5*x459))+((x462*x463))+(((6.58458988303061)*x464))))+IKsqr(((-1.19326326256527)+(((-1.04289046248173)*x464))+((px*x462))+((x459*x460))+(((6.58458988303061)*sj5*x463))+(((6.58458988303061)*x461))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-0.188115755116895)+(((1.04289046248173)*x461))+(((1.04289046248173)*px*x460))+(((-1.0)*sj5*x459))+((x462*x463))+(((6.58458988303061)*x464))), ((-1.19326326256527)+(((-1.04289046248173)*x464))+((px*x462))+((x459*x460))+(((6.58458988303061)*sj5*x463))+(((6.58458988303061)*x461))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x465=((0.156433569372259)*cj5);
IkReal x466=(cj6*px);
IkReal x467=(px*sj5);
IkReal x468=(pz*sj6);
IkReal x469=((0.987688482454592)*cj5);
IkReal x470=(cj6*py*sj5);
evalcond[0]=((-0.17898948938479)+(((0.987688482454592)*x468))+((x466*x469))+(((0.987688482454592)*x470))+(((-1.0)*py*x465))+(((0.156433569372259)*x467))+(((-0.15)*(IKcos(j8)))));
evalcond[1]=((-0.0282173632675343)+((x465*x466))+(((-0.15)*(IKsin(j8))))+(((0.156433569372259)*x470))+(((0.156433569372259)*x468))+((py*x469))+(((-0.987688482454592)*x467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x471=((1.0)*sj6);
IkReal x472=(r01*sj5);
IkReal x473=(cj5*r00);
IkReal x474=((0.156433569372259)*cj6);
if( IKabs(((((-1.0)*x472*x474))+(((-1.0)*x473*x474))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r02))+(((-1.0)*x471*x472))+(((-1.0)*x471*x473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x472*x474))+(((-1.0)*x473*x474))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))))+IKsqr((((cj6*r02))+(((-1.0)*x471*x472))+(((-1.0)*x471*x473))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x472*x474))+(((-1.0)*x473*x474))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))), (((cj6*r02))+(((-1.0)*x471*x472))+(((-1.0)*x471*x473))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x475=((1.0)*sj6);
IkReal x476=(r01*sj5);
IkReal x477=(cj5*r00);
IkReal x478=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x475*x477))+(((-1.0)*x475*x476))+(((-1.0)*(IKcos(j9))))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+(IKsin(j9))+(((-0.987688482454592)*r00*sj5))+((x477*x478))+((x476*x478))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x479=((1.0)*sj6);
IkReal x480=(r01*sj5);
IkReal x481=(cj5*r00);
IkReal x482=((0.156433569372259)*cj6);
if( IKabs(((((0.156433569372259)*r02*sj6))+((x481*x482))+(((-0.987688482454592)*r00*sj5))+((x480*x482))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x479*x481))+(((-1.0)*x479*x480))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.156433569372259)*r02*sj6))+((x481*x482))+(((-0.987688482454592)*r00*sj5))+((x480*x482))+(((0.987688482454592)*cj5*r01))))+IKsqr(((((-1.0)*x479*x481))+(((-1.0)*x479*x480))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.156433569372259)*r02*sj6))+((x481*x482))+(((-0.987688482454592)*r00*sj5))+((x480*x482))+(((0.987688482454592)*cj5*r01))), ((((-1.0)*x479*x481))+(((-1.0)*x479*x480))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x483=((1.0)*sj6);
IkReal x484=(r01*sj5);
IkReal x485=(cj5*r00);
IkReal x486=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x483*x484))+(((-1.0)*x483*x485))+(((-1.0)*(IKcos(j9))))+((cj6*r02)));
evalcond[1]=(((x485*x486))+((x484*x486))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+(((-1.0)*(IKsin(j9))))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x487=((1.0)*sj6);
IkReal x488=(r01*sj5);
IkReal x489=(cj5*r00);
IkReal x490=((0.987688482454592)*cj6);
if( IKabs(((((0.987688482454592)*r02*sj6))+((x488*x490))+((x489*x490))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x487*x489))+(((-1.0)*x487*x488))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj6))+((x488*x490))+((x489*x490))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))+IKsqr(((((-1.0)*x487*x489))+(((-1.0)*x487*x488))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.987688482454592)*r02*sj6))+((x488*x490))+((x489*x490))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))), ((((-1.0)*x487*x489))+(((-1.0)*x487*x488))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x491=((1.0)*sj6);
IkReal x492=(r01*sj5);
IkReal x493=(cj5*r00);
IkReal x494=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*x491*x492))+(((-1.0)*x491*x493))+(((-1.0)*(IKcos(j9))))+((cj6*r02)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+((x493*x494))+(((0.156433569372259)*r00*sj5))+(((-1.0)*(IKsin(j9))))+(((-0.156433569372259)*cj5*r01))+((x492*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x495=((1.0)*sj6);
IkReal x496=(r01*sj5);
IkReal x497=(cj5*r00);
IkReal x498=((0.987688482454592)*cj6);
if( IKabs(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x496*x498))+(((-1.0)*x497*x498))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x495*x497))+(((-1.0)*x495*x496))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x496*x498))+(((-1.0)*x497*x498))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))))+IKsqr(((((-1.0)*x495*x497))+(((-1.0)*x495*x496))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x496*x498))+(((-1.0)*x497*x498))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))), ((((-1.0)*x495*x497))+(((-1.0)*x495*x496))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x499=((1.0)*sj6);
IkReal x500=(r01*sj5);
IkReal x501=(cj5*r00);
IkReal x502=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*x499*x501))+(((-1.0)*x499*x500))+(((-1.0)*(IKcos(j9))))+((cj6*r02)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+((x500*x502))+(IKsin(j9))+((x501*x502))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x503=((1.0)*sj6);
IkReal x504=(r01*sj5);
IkReal x505=(cj5*r00);
IkReal x506=((0.987688482454592)*cj6);
CheckValue<IkReal> x507=IKPowWithIntegerCheck(sj8,-1);
if(!x507.valid){
continue;
}
if( IKabs(((x507.value)*(((((0.987688482454592)*r02*sj6))+((x505*x506))+(((0.156433569372259)*r00*sj5))+((x504*x506))+(((-0.156433569372259)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x503*x505))+(((-1.0)*x503*x504))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x507.value)*(((((0.987688482454592)*r02*sj6))+((x505*x506))+(((0.156433569372259)*r00*sj5))+((x504*x506))+(((-0.156433569372259)*cj5*r01))))))+IKsqr(((((-1.0)*x503*x505))+(((-1.0)*x503*x504))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x507.value)*(((((0.987688482454592)*r02*sj6))+((x505*x506))+(((0.156433569372259)*r00*sj5))+((x504*x506))+(((-0.156433569372259)*cj5*r01))))), ((((-1.0)*x503*x505))+(((-1.0)*x503*x504))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x508=IKsin(j9);
IkReal x509=((0.987688482454592)*r01);
IkReal x510=((1.0)*sj6);
IkReal x511=(r01*sj5);
IkReal x512=(cj5*r00);
IkReal x513=((0.156433569372259)*cj6);
IkReal x514=(r00*sj5);
IkReal x515=(r02*sj6);
evalcond[0]=((((-1.0)*(IKcos(j9))))+((cj6*r02))+(((-1.0)*x510*x512))+(((-1.0)*x510*x511)));
evalcond[1]=(((x511*x513))+(((0.156433569372259)*x515))+(((-0.987688482454592)*x514))+((cj8*x508))+((x512*x513))+((cj5*x509)));
evalcond[2]=((((0.156433569372259)*x514))+(((-1.0)*sj8*x508))+(((0.987688482454592)*x515))+(((0.987688482454592)*cj6*x512))+((cj6*sj5*x509))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x516=((1.0)*sj6);
IkReal x517=(r01*sj5);
IkReal x518=(cj5*r00);
IkReal x519=((0.156433569372259)*cj6);
CheckValue<IkReal> x520=IKPowWithIntegerCheck(cj8,-1);
if(!x520.valid){
continue;
}
if( IKabs(((x520.value)*(((((-1.0)*x518*x519))+(((-1.0)*x517*x519))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x516*x518))+(((-1.0)*x516*x517))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x520.value)*(((((-1.0)*x518*x519))+(((-1.0)*x517*x519))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))))))+IKsqr(((((-1.0)*x516*x518))+(((-1.0)*x516*x517))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x520.value)*(((((-1.0)*x518*x519))+(((-1.0)*x517*x519))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))))), ((((-1.0)*x516*x518))+(((-1.0)*x516*x517))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x521=IKsin(j9);
IkReal x522=((0.987688482454592)*r01);
IkReal x523=((1.0)*sj6);
IkReal x524=(r01*sj5);
IkReal x525=(cj5*r00);
IkReal x526=((0.156433569372259)*cj6);
IkReal x527=(r00*sj5);
IkReal x528=(r02*sj6);
evalcond[0]=((((-1.0)*x523*x524))+(((-1.0)*x523*x525))+(((-1.0)*(IKcos(j9))))+((cj6*r02)));
evalcond[1]=(((cj5*x522))+((cj8*x521))+(((0.156433569372259)*x528))+((x525*x526))+((x524*x526))+(((-0.987688482454592)*x527)));
evalcond[2]=((((0.987688482454592)*cj6*x525))+(((-1.0)*sj8*x521))+(((0.156433569372259)*x527))+((cj6*sj5*x522))+(((0.987688482454592)*x528))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x529=((3.12867138744518)*cj6);
IkReal x530=(py*sj5);
IkReal x531=(cj5*py);
IkReal x532=(cj5*px);
IkReal x533=((6.58458988303061)*cj6);
IkReal x534=(px*sj5);
IkReal x535=(pz*sj6);
CheckValue<IkReal> x536=IKPowWithIntegerCheck(sj7,-1);
if(!x536.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x536.value)*(((0.564347265350685)+(((-3.12867138744518)*x535))+(((-1.0)*x529*x532))+(((-1.0)*x529*x530))+(((-19.7537696490918)*x531))+(((19.7537696490918)*x534)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+(((6.58458988303061)*x535))+(((1.04289046248173)*x534))+(((-1.04289046248173)*x531))+((x530*x533))+((x532*x533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x536.value)*(((0.564347265350685)+(((-3.12867138744518)*x535))+(((-1.0)*x529*x532))+(((-1.0)*x529*x530))+(((-19.7537696490918)*x531))+(((19.7537696490918)*x534))))))+IKsqr(((-1.19326326256527)+(((6.58458988303061)*x535))+(((1.04289046248173)*x534))+(((-1.04289046248173)*x531))+((x530*x533))+((x532*x533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((0.333333333333333)*(x536.value)*(((0.564347265350685)+(((-3.12867138744518)*x535))+(((-1.0)*x529*x532))+(((-1.0)*x529*x530))+(((-19.7537696490918)*x531))+(((19.7537696490918)*x534))))), ((-1.19326326256527)+(((6.58458988303061)*x535))+(((1.04289046248173)*x534))+(((-1.04289046248173)*x531))+((x530*x533))+((x532*x533))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x537=IKsin(j8);
IkReal x538=((0.156433569372259)*cj5);
IkReal x539=((1.0)*sj6);
IkReal x540=(cj5*px);
IkReal x541=(px*sj5);
IkReal x542=(py*sj5);
IkReal x543=(pz*sj6);
IkReal x544=((0.987688482454592)*cj6);
IkReal x545=((0.15)*x537);
evalcond[0]=((-0.015)+(((-1.0)*x539*x542))+(((-1.0)*x539*x540))+(((-1.0)*cj7*x545))+((cj6*pz)));
evalcond[1]=((-0.17898948938479)+((x542*x544))+((x540*x544))+(((0.156433569372259)*x541))+(((-1.0)*py*x538))+(((-0.15)*(IKcos(j8))))+(((0.987688482454592)*x543)));
evalcond[2]=((-0.0282173632675343)+((cj6*px*x538))+(((0.987688482454592)*cj5*py))+(((0.156433569372259)*x543))+((sj7*x545))+(((0.156433569372259)*cj6*x542))+(((-0.987688482454592)*x541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x546=(cj6*sj7);
IkReal x547=((1.0)*r02);
IkReal x548=(cj5*cj7);
IkReal x549=((0.987688482454592)*r01);
IkReal x550=((0.156433569372259)*cj6);
IkReal x551=(cj5*sj7);
IkReal x552=(sj5*sj7);
IkReal x553=(r01*sj6);
IkReal x554=((0.987688482454592)*r00);
IkReal x555=(r01*sj5);
IkReal x556=(r00*sj6);
IkReal x557=(cj7*sj5);
IkReal x558=((0.156433569372259)*r02*sj6);
if( IKabs((((x548*x556))+(((0.156433569372259)*cj5*r00*x546))+(((0.156433569372259)*x546*x555))+(((-1.0)*cj6*cj7*x547))+(((-1.0)*x552*x554))+((x549*x551))+((sj7*x558))+((x553*x557)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*x550*x555))+((x554*x557))+(((-1.0)*cj7*x558))+(((-1.0)*x548*x549))+(((-1.0)*r00*x548*x550))+((x551*x556))+((x552*x553))+(((-1.0)*x546*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x548*x556))+(((0.156433569372259)*cj5*r00*x546))+(((0.156433569372259)*x546*x555))+(((-1.0)*cj6*cj7*x547))+(((-1.0)*x552*x554))+((x549*x551))+((sj7*x558))+((x553*x557))))+IKsqr(((((-1.0)*cj7*x550*x555))+((x554*x557))+(((-1.0)*cj7*x558))+(((-1.0)*x548*x549))+(((-1.0)*r00*x548*x550))+((x551*x556))+((x552*x553))+(((-1.0)*x546*x547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x548*x556))+(((0.156433569372259)*cj5*r00*x546))+(((0.156433569372259)*x546*x555))+(((-1.0)*cj6*cj7*x547))+(((-1.0)*x552*x554))+((x549*x551))+((sj7*x558))+((x553*x557))), ((((-1.0)*cj7*x550*x555))+((x554*x557))+(((-1.0)*cj7*x558))+(((-1.0)*x548*x549))+(((-1.0)*r00*x548*x550))+((x551*x556))+((x552*x553))+(((-1.0)*x546*x547))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x559=IKcos(j9);
IkReal x560=IKsin(j9);
IkReal x561=((1.0)*sj6);
IkReal x562=(r01*sj5);
IkReal x563=(cj5*r00);
IkReal x564=((0.156433569372259)*cj6);
evalcond[0]=(((cj7*x560))+((cj6*r02))+((sj7*x559))+(((-1.0)*x561*x563))+(((-1.0)*x561*x562)));
evalcond[1]=(((cj7*x559))+(((0.156433569372259)*r02*sj6))+((x562*x564))+((x563*x564))+(((-1.0)*sj7*x560))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x565=(cj6*sj7);
IkReal x566=(r01*sj5);
IkReal x567=(cj5*r00);
IkReal x568=(sj6*sj7);
IkReal x569=(cj6*cj7);
IkReal x570=((0.156433569372259)*r02);
IkReal x571=((0.987688482454592)*cj5*r01);
IkReal x572=((1.0)*cj7*sj6);
IkReal x573=((0.987688482454592)*r00*sj5);
if( IKabs(((((-0.156433569372259)*x565*x566))+(((-0.156433569372259)*x565*x567))+(((-1.0)*x566*x572))+(((-1.0)*sj7*x571))+((sj7*x573))+(((-1.0)*x567*x572))+(((-1.0)*x568*x570))+((r02*x569)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x566*x568))+(((-0.156433569372259)*x566*x569))+((cj7*x573))+(((-0.156433569372259)*x567*x569))+((x567*x568))+(((-1.0)*r02*x565))+(((-1.0)*cj7*x571))+(((-1.0)*cj7*sj6*x570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*x565*x566))+(((-0.156433569372259)*x565*x567))+(((-1.0)*x566*x572))+(((-1.0)*sj7*x571))+((sj7*x573))+(((-1.0)*x567*x572))+(((-1.0)*x568*x570))+((r02*x569))))+IKsqr((((x566*x568))+(((-0.156433569372259)*x566*x569))+((cj7*x573))+(((-0.156433569372259)*x567*x569))+((x567*x568))+(((-1.0)*r02*x565))+(((-1.0)*cj7*x571))+(((-1.0)*cj7*sj6*x570))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*x565*x566))+(((-0.156433569372259)*x565*x567))+(((-1.0)*x566*x572))+(((-1.0)*sj7*x571))+((sj7*x573))+(((-1.0)*x567*x572))+(((-1.0)*x568*x570))+((r02*x569))), (((x566*x568))+(((-0.156433569372259)*x566*x569))+((cj7*x573))+(((-0.156433569372259)*x567*x569))+((x567*x568))+(((-1.0)*r02*x565))+(((-1.0)*cj7*x571))+(((-1.0)*cj7*sj6*x570))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x574=IKcos(j9);
IkReal x575=IKsin(j9);
IkReal x576=((1.0)*sj6);
IkReal x577=(r01*sj5);
IkReal x578=(cj5*r00);
IkReal x579=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*cj7*x575))+(((-1.0)*x576*x577))+(((-1.0)*x576*x578))+((sj7*x574))+((cj6*r02)));
evalcond[1]=(((cj7*x574))+(((0.156433569372259)*r02*sj6))+((x578*x579))+((sj7*x575))+(((-0.987688482454592)*r00*sj5))+((x577*x579))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x580=(cj5*r00);
IkReal x581=((0.987688482454592)*cj6);
IkReal x582=(r01*sj5);
if( IKabs(((((0.987688482454592)*r02*sj6))+((x581*x582))+((x580*x581))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r02))+((sj6*x582))+((sj6*x580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj6))+((x581*x582))+((x580*x581))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))+IKsqr(((((-1.0)*cj6*r02))+((sj6*x582))+((sj6*x580))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.987688482454592)*r02*sj6))+((x581*x582))+((x580*x581))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))), ((((-1.0)*cj6*r02))+((sj6*x582))+((sj6*x580))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x583=((1.0)*sj6);
IkReal x584=(r01*sj5);
IkReal x585=(cj5*r00);
IkReal x586=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*x583*x585))+(((-1.0)*x583*x584))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=(((x584*x586))+(((0.987688482454592)*r02*sj6))+((x585*x586))+(((0.156433569372259)*r00*sj5))+(((-1.0)*(IKsin(j9))))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x587=(cj5*r00);
IkReal x588=((0.987688482454592)*cj6);
IkReal x589=(r01*sj5);
if( IKabs(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x588*x589))+(((-1.0)*x587*x588))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r02))+((sj6*x587))+((sj6*x589)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x588*x589))+(((-1.0)*x587*x588))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))))+IKsqr(((((-1.0)*cj6*r02))+((sj6*x587))+((sj6*x589))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x588*x589))+(((-1.0)*x587*x588))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))), ((((-1.0)*cj6*r02))+((sj6*x587))+((sj6*x589))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x590=((1.0)*sj6);
IkReal x591=(r01*sj5);
IkReal x592=(cj5*r00);
IkReal x593=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*x590*x591))+(((-1.0)*x590*x592))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+(IKsin(j9))+(((0.156433569372259)*r00*sj5))+((x591*x593))+(((-0.156433569372259)*cj5*r01))+((x592*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x594=(cj5*r00);
IkReal x595=((0.156433569372259)*cj6);
IkReal x596=(r01*sj5);
if( IKabs((((x594*x595))+((x595*x596))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x596))+((sj6*x594))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x594*x595))+((x595*x596))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))))+IKsqr((((sj6*x596))+((sj6*x594))+(((-1.0)*cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x594*x595))+((x595*x596))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))), (((sj6*x596))+((sj6*x594))+(((-1.0)*cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x597=((1.0)*sj6);
IkReal x598=(r01*sj5);
IkReal x599=(cj5*r00);
IkReal x600=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x597*x599))+(((-1.0)*x597*x598))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x599*x600))+(((-1.0)*(IKsin(j9))))+((x598*x600))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x601=(cj5*r00);
IkReal x602=((0.156433569372259)*cj6);
IkReal x603=(r01*sj5);
if( IKabs(((((-1.0)*x602*x603))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x601*x602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x603))+((sj6*x601))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x602*x603))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x601*x602))))+IKsqr((((sj6*x603))+((sj6*x601))+(((-1.0)*cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x602*x603))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x601*x602))), (((sj6*x603))+((sj6*x601))+(((-1.0)*cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x604=((1.0)*sj6);
IkReal x605=(r01*sj5);
IkReal x606=(cj5*r00);
IkReal x607=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x604*x605))+(((-1.0)*x604*x606))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=(((x605*x607))+(((0.156433569372259)*r02*sj6))+(IKsin(j9))+(((-0.987688482454592)*r00*sj5))+((x606*x607))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x608=(cj5*r00);
IkReal x609=((0.156433569372259)*cj6);
IkReal x610=(r01*sj5);
CheckValue<IkReal> x611=IKPowWithIntegerCheck(cj8,-1);
if(!x611.valid){
continue;
}
if( IKabs(((x611.value)*((((x608*x609))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x609*x610))+(((0.987688482454592)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x608))+(((-1.0)*cj6*r02))+((sj6*x610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x611.value)*((((x608*x609))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x609*x610))+(((0.987688482454592)*cj5*r01))))))+IKsqr((((sj6*x608))+(((-1.0)*cj6*r02))+((sj6*x610))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x611.value)*((((x608*x609))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x609*x610))+(((0.987688482454592)*cj5*r01))))), (((sj6*x608))+(((-1.0)*cj6*r02))+((sj6*x610))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x612=IKsin(j9);
IkReal x613=(cj5*r01);
IkReal x614=((1.0)*sj6);
IkReal x615=(r01*sj5);
IkReal x616=(cj5*r00);
IkReal x617=(r02*sj6);
IkReal x618=(r00*sj5);
IkReal x619=((0.156433569372259)*cj6);
IkReal x620=((0.987688482454592)*cj6);
IkReal x621=((1.0)*x612);
evalcond[0]=((((-1.0)*x614*x615))+(((-1.0)*x614*x616))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*x618))+(((-1.0)*sj8*x621))+((x616*x620))+(((0.987688482454592)*x617))+(((-0.156433569372259)*x613))+((x615*x620)));
evalcond[2]=((((0.156433569372259)*x617))+(((-1.0)*cj8*x621))+((x616*x619))+(((0.987688482454592)*x613))+(((-0.987688482454592)*x618))+((x615*x619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x622=(cj5*r00);
IkReal x623=((0.987688482454592)*cj6);
IkReal x624=(r01*sj5);
CheckValue<IkReal> x625=IKPowWithIntegerCheck(sj8,-1);
if(!x625.valid){
continue;
}
if( IKabs(((x625.value)*(((((0.987688482454592)*r02*sj6))+(((0.156433569372259)*r00*sj5))+((x623*x624))+((x622*x623))+(((-0.156433569372259)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r02))+((sj6*x624))+((sj6*x622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x625.value)*(((((0.987688482454592)*r02*sj6))+(((0.156433569372259)*r00*sj5))+((x623*x624))+((x622*x623))+(((-0.156433569372259)*cj5*r01))))))+IKsqr(((((-1.0)*cj6*r02))+((sj6*x624))+((sj6*x622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x625.value)*(((((0.987688482454592)*r02*sj6))+(((0.156433569372259)*r00*sj5))+((x623*x624))+((x622*x623))+(((-0.156433569372259)*cj5*r01))))), ((((-1.0)*cj6*r02))+((sj6*x624))+((sj6*x622))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x626=IKsin(j9);
IkReal x627=(cj5*r01);
IkReal x628=((1.0)*sj6);
IkReal x629=(r01*sj5);
IkReal x630=(cj5*r00);
IkReal x631=(r02*sj6);
IkReal x632=(r00*sj5);
IkReal x633=((0.156433569372259)*cj6);
IkReal x634=((0.987688482454592)*cj6);
IkReal x635=((1.0)*x626);
evalcond[0]=((((-1.0)*x628*x629))+(((-1.0)*x628*x630))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=((((-0.156433569372259)*x627))+(((-1.0)*sj8*x635))+((x629*x634))+(((0.156433569372259)*x632))+(((0.987688482454592)*x631))+((x630*x634)));
evalcond[2]=((((-0.987688482454592)*x632))+(((-1.0)*cj8*x635))+((x629*x633))+(((0.156433569372259)*x631))+((x630*x633))+(((0.987688482454592)*x627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x636=((1.0)*sj6);
IkReal x637=(r01*sj5);
IkReal x638=(cj5*r00);
IkReal x639=((0.156433569372259)*cj6);
if( IKabs(((((-1.0)*x637*x639))+(((-1.0)*x638*x639))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x636*x638))+(((-1.0)*x636*x637))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x637*x639))+(((-1.0)*x638*x639))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))))+IKsqr(((((-1.0)*x636*x638))+(((-1.0)*x636*x637))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x637*x639))+(((-1.0)*x638*x639))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))), ((((-1.0)*x636*x638))+(((-1.0)*x636*x637))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x640=((1.0)*sj6);
IkReal x641=(r01*sj5);
IkReal x642=(cj5*r00);
IkReal x643=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x640*x642))+(((-1.0)*x640*x641))+(((-1.0)*(IKcos(j9))))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+(IKsin(j9))+((x641*x643))+(((-0.987688482454592)*r00*sj5))+((x642*x643))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x644=((1.0)*sj6);
IkReal x645=(r01*sj5);
IkReal x646=(cj5*r00);
IkReal x647=((0.156433569372259)*cj6);
if( IKabs(((((0.156433569372259)*r02*sj6))+((x645*x647))+(((-0.987688482454592)*r00*sj5))+((x646*x647))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x644*x645))+(((-1.0)*x644*x646))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.156433569372259)*r02*sj6))+((x645*x647))+(((-0.987688482454592)*r00*sj5))+((x646*x647))+(((0.987688482454592)*cj5*r01))))+IKsqr(((((-1.0)*x644*x645))+(((-1.0)*x644*x646))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.156433569372259)*r02*sj6))+((x645*x647))+(((-0.987688482454592)*r00*sj5))+((x646*x647))+(((0.987688482454592)*cj5*r01))), ((((-1.0)*x644*x645))+(((-1.0)*x644*x646))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x648=((1.0)*sj6);
IkReal x649=(r01*sj5);
IkReal x650=(cj5*r00);
IkReal x651=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*(IKcos(j9))))+(((-1.0)*x648*x649))+((cj6*r02))+(((-1.0)*x648*x650)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+((x649*x651))+(((-0.987688482454592)*r00*sj5))+((x650*x651))+(((-1.0)*(IKsin(j9))))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x652=((1.0)*sj6);
IkReal x653=(r01*sj5);
IkReal x654=(cj5*r00);
IkReal x655=((0.987688482454592)*cj6);
if( IKabs(((((0.987688482454592)*r02*sj6))+((x653*x655))+((x654*x655))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r02))+(((-1.0)*x652*x653))+(((-1.0)*x652*x654)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj6))+((x653*x655))+((x654*x655))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))+IKsqr((((cj6*r02))+(((-1.0)*x652*x653))+(((-1.0)*x652*x654))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.987688482454592)*r02*sj6))+((x653*x655))+((x654*x655))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))), (((cj6*r02))+(((-1.0)*x652*x653))+(((-1.0)*x652*x654))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x656=((1.0)*sj6);
IkReal x657=(r01*sj5);
IkReal x658=(cj5*r00);
IkReal x659=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*(IKcos(j9))))+(((-1.0)*x656*x657))+(((-1.0)*x656*x658))+((cj6*r02)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+((x657*x659))+(((0.156433569372259)*r00*sj5))+(((-1.0)*(IKsin(j9))))+((x658*x659))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x660=((1.0)*sj6);
IkReal x661=(r01*sj5);
IkReal x662=(cj5*r00);
IkReal x663=((0.987688482454592)*cj6);
if( IKabs(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x662*x663))+(((-1.0)*x661*x663))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x660*x662))+(((-1.0)*x660*x661))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x662*x663))+(((-1.0)*x661*x663))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))))+IKsqr(((((-1.0)*x660*x662))+(((-1.0)*x660*x661))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x662*x663))+(((-1.0)*x661*x663))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))), ((((-1.0)*x660*x662))+(((-1.0)*x660*x661))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x664=((1.0)*sj6);
IkReal x665=(r01*sj5);
IkReal x666=(cj5*r00);
IkReal x667=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*(IKcos(j9))))+((cj6*r02))+(((-1.0)*x664*x666))+(((-1.0)*x664*x665)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+((x666*x667))+((x665*x667))+(IKsin(j9))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x668=((1.0)*sj6);
IkReal x669=(r01*sj5);
IkReal x670=(cj5*r00);
IkReal x671=((0.987688482454592)*cj6);
CheckValue<IkReal> x672=IKPowWithIntegerCheck(sj8,-1);
if(!x672.valid){
continue;
}
if( IKabs(((x672.value)*(((((0.987688482454592)*r02*sj6))+((x670*x671))+((x669*x671))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x668*x670))+(((-1.0)*x668*x669))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x672.value)*(((((0.987688482454592)*r02*sj6))+((x670*x671))+((x669*x671))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))))+IKsqr(((((-1.0)*x668*x670))+(((-1.0)*x668*x669))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x672.value)*(((((0.987688482454592)*r02*sj6))+((x670*x671))+((x669*x671))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))), ((((-1.0)*x668*x670))+(((-1.0)*x668*x669))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x673=IKsin(j9);
IkReal x674=((0.987688482454592)*r01);
IkReal x675=((1.0)*sj6);
IkReal x676=(r01*sj5);
IkReal x677=(cj5*r00);
IkReal x678=((0.156433569372259)*cj6);
IkReal x679=(r00*sj5);
IkReal x680=(r02*sj6);
evalcond[0]=((((-1.0)*x675*x677))+(((-1.0)*x675*x676))+(((-1.0)*(IKcos(j9))))+((cj6*r02)));
evalcond[1]=((((-0.987688482454592)*x679))+((cj8*x673))+((x676*x678))+((x677*x678))+(((0.156433569372259)*x680))+((cj5*x674)));
evalcond[2]=((((0.987688482454592)*x680))+(((0.156433569372259)*x679))+(((-1.0)*sj8*x673))+((cj6*sj5*x674))+(((-0.156433569372259)*cj5*r01))+(((0.987688482454592)*cj6*x677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x681=((1.0)*sj6);
IkReal x682=(r01*sj5);
IkReal x683=(cj5*r00);
IkReal x684=((0.156433569372259)*cj6);
CheckValue<IkReal> x685=IKPowWithIntegerCheck(cj8,-1);
if(!x685.valid){
continue;
}
if( IKabs(((x685.value)*(((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x682*x684))+(((-1.0)*x683*x684)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x681*x683))+(((-1.0)*x681*x682))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x685.value)*(((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x682*x684))+(((-1.0)*x683*x684))))))+IKsqr(((((-1.0)*x681*x683))+(((-1.0)*x681*x682))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x685.value)*(((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x682*x684))+(((-1.0)*x683*x684))))), ((((-1.0)*x681*x683))+(((-1.0)*x681*x682))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x686=IKsin(j9);
IkReal x687=((0.987688482454592)*r01);
IkReal x688=((1.0)*sj6);
IkReal x689=(r01*sj5);
IkReal x690=(cj5*r00);
IkReal x691=((0.156433569372259)*cj6);
IkReal x692=(r00*sj5);
IkReal x693=(r02*sj6);
evalcond[0]=((((-1.0)*x688*x689))+(((-1.0)*(IKcos(j9))))+(((-1.0)*x688*x690))+((cj6*r02)));
evalcond[1]=(((cj5*x687))+((x690*x691))+((x689*x691))+(((-0.987688482454592)*x692))+(((0.156433569372259)*x693))+((cj8*x686)));
evalcond[2]=((((0.987688482454592)*x693))+(((0.987688482454592)*cj6*x690))+(((-1.0)*sj8*x686))+((cj6*sj5*x687))+(((0.156433569372259)*x692))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj7=0;
cj7=1.0;
j7=0;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=0;
cj7=1.0;
j7=0;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x694=(cj5*r00);
IkReal x695=((0.156433569372259)*cj6);
IkReal x696=(r01*sj5);
if( IKabs((((sj6*x696))+((sj6*x694))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x695*x696))+(((-1.0)*x694*x695)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj6*x696))+((sj6*x694))+(((-1.0)*cj6*r02))))+IKsqr(((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x695*x696))+(((-1.0)*x694*x695))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((sj6*x696))+((sj6*x694))+(((-1.0)*cj6*r02))), ((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x695*x696))+(((-1.0)*x694*x695))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x697=((1.0)*sj6);
IkReal x698=(r01*sj5);
IkReal x699=(cj5*r00);
IkReal x700=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x697*x699))+(((-1.0)*x697*x698))+(IKsin(j9))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+(IKcos(j9))+(((-0.987688482454592)*r00*sj5))+((x698*x700))+((x699*x700))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x701=((1.0)*sj6);
IkReal x702=(r01*sj5);
IkReal x703=(cj5*r00);
IkReal x704=((0.156433569372259)*cj6);
if( IKabs((((cj6*r02))+(((-1.0)*x701*x703))+(((-1.0)*x701*x702)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x702*x704))+(((-1.0)*x703*x704))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r02))+(((-1.0)*x701*x703))+(((-1.0)*x701*x702))))+IKsqr(((((-1.0)*x702*x704))+(((-1.0)*x703*x704))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((cj6*r02))+(((-1.0)*x701*x703))+(((-1.0)*x701*x702))), ((((-1.0)*x702*x704))+(((-1.0)*x703*x704))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x705=((1.0)*sj6);
IkReal x706=(r01*sj5);
IkReal x707=(cj5*r00);
IkReal x708=((0.156433569372259)*cj6);
evalcond[0]=(((cj6*r02))+(((-1.0)*x705*x706))+(((-1.0)*x705*x707))+(((-1.0)*(IKsin(j9)))));
evalcond[1]=((((0.156433569372259)*r02*sj6))+((x706*x708))+((x707*x708))+(IKcos(j9))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x709=(r00*sj5);
IkReal x710=(cj5*r01);
IkReal x711=(r02*sj6);
IkReal x712=((0.156433569372259)*cj6);
IkReal x713=(cj5*r00);
IkReal x714=(r01*sj5);
IkReal x715=((0.987688482454592)*cj6);
if( IKabs((((x714*x715))+(((0.156433569372259)*x709))+(((0.987688482454592)*x711))+(((-0.156433569372259)*x710))+((x713*x715)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.987688482454592)*x710))+(((0.987688482454592)*x709))+(((-1.0)*x712*x714))+(((-1.0)*x712*x713))+(((-0.156433569372259)*x711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x714*x715))+(((0.156433569372259)*x709))+(((0.987688482454592)*x711))+(((-0.156433569372259)*x710))+((x713*x715))))+IKsqr(((((-0.987688482454592)*x710))+(((0.987688482454592)*x709))+(((-1.0)*x712*x714))+(((-1.0)*x712*x713))+(((-0.156433569372259)*x711))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x714*x715))+(((0.156433569372259)*x709))+(((0.987688482454592)*x711))+(((-0.156433569372259)*x710))+((x713*x715))), ((((-0.987688482454592)*x710))+(((0.987688482454592)*x709))+(((-1.0)*x712*x714))+(((-1.0)*x712*x713))+(((-0.156433569372259)*x711))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x716=((0.987688482454592)*sj5);
IkReal x717=(cj5*r01);
IkReal x718=(cj6*r01);
IkReal x719=((0.156433569372259)*r00);
IkReal x720=(cj5*cj6);
IkReal x721=(r02*sj6);
evalcond[0]=((((0.156433569372259)*x721))+(IKcos(j9))+((x719*x720))+(((0.987688482454592)*x717))+(((-1.0)*r00*x716))+(((0.156433569372259)*sj5*x718)));
evalcond[1]=(((sj5*x719))+((x716*x718))+(((0.987688482454592)*x721))+(((-0.156433569372259)*x717))+(((-1.0)*(IKsin(j9))))+(((0.987688482454592)*r00*x720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x722=(r00*sj5);
IkReal x723=(cj5*r01);
IkReal x724=(r02*sj6);
IkReal x725=((0.156433569372259)*cj6);
IkReal x726=(cj5*r00);
IkReal x727=(r01*sj5);
IkReal x728=((0.987688482454592)*cj6);
if( IKabs(((((-1.0)*x727*x728))+(((-0.156433569372259)*x722))+(((0.156433569372259)*x723))+(((-0.987688482454592)*x724))+(((-1.0)*x726*x728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.156433569372259)*x724))+(((-0.987688482454592)*x723))+(((-1.0)*x725*x726))+(((-1.0)*x725*x727))+(((0.987688482454592)*x722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x727*x728))+(((-0.156433569372259)*x722))+(((0.156433569372259)*x723))+(((-0.987688482454592)*x724))+(((-1.0)*x726*x728))))+IKsqr(((((-0.156433569372259)*x724))+(((-0.987688482454592)*x723))+(((-1.0)*x725*x726))+(((-1.0)*x725*x727))+(((0.987688482454592)*x722))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x727*x728))+(((-0.156433569372259)*x722))+(((0.156433569372259)*x723))+(((-0.987688482454592)*x724))+(((-1.0)*x726*x728))), ((((-0.156433569372259)*x724))+(((-0.987688482454592)*x723))+(((-1.0)*x725*x726))+(((-1.0)*x725*x727))+(((0.987688482454592)*x722))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x729=(r00*sj5);
IkReal x730=(cj5*r01);
IkReal x731=(r02*sj6);
IkReal x732=((0.156433569372259)*cj6);
IkReal x733=(cj5*r00);
IkReal x734=(r01*sj5);
IkReal x735=((0.987688482454592)*cj6);
evalcond[0]=((((-0.156433569372259)*x730))+(((0.156433569372259)*x729))+((x734*x735))+(IKsin(j9))+((x733*x735))+(((0.987688482454592)*x731)));
evalcond[1]=((((0.156433569372259)*x731))+(((-0.987688482454592)*x729))+(IKcos(j9))+((x732*x734))+((x732*x733))+(((0.987688482454592)*x730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x736=(r00*sj5);
IkReal x737=(cj5*r01);
IkReal x738=(r02*sj6);
IkReal x739=((0.156433569372259)*cj6);
IkReal x740=(cj5*r00);
IkReal x741=(r01*sj5);
IkReal x742=((0.987688482454592)*cj6);
CheckValue<IkReal> x743=IKPowWithIntegerCheck(sj8,-1);
if(!x743.valid){
continue;
}
if( IKabs(((x743.value)*(((((-0.156433569372259)*x737))+(((0.156433569372259)*x736))+((x740*x742))+((x741*x742))+(((0.987688482454592)*x738)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.156433569372259)*x738))+(((-0.987688482454592)*x737))+(((-1.0)*x739*x741))+(((-1.0)*x739*x740))+(((0.987688482454592)*x736)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x743.value)*(((((-0.156433569372259)*x737))+(((0.156433569372259)*x736))+((x740*x742))+((x741*x742))+(((0.987688482454592)*x738))))))+IKsqr(((((-0.156433569372259)*x738))+(((-0.987688482454592)*x737))+(((-1.0)*x739*x741))+(((-1.0)*x739*x740))+(((0.987688482454592)*x736))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x743.value)*(((((-0.156433569372259)*x737))+(((0.156433569372259)*x736))+((x740*x742))+((x741*x742))+(((0.987688482454592)*x738))))), ((((-0.156433569372259)*x738))+(((-0.987688482454592)*x737))+(((-1.0)*x739*x741))+(((-1.0)*x739*x740))+(((0.987688482454592)*x736))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x744=IKsin(j9);
IkReal x745=((0.987688482454592)*r01);
IkReal x746=((1.0)*sj6);
IkReal x747=(r01*sj5);
IkReal x748=(cj5*r00);
IkReal x749=((0.156433569372259)*cj6);
IkReal x750=(r00*sj5);
IkReal x751=(r02*sj6);
evalcond[0]=(((cj8*x744))+(((-1.0)*x746*x747))+(((-1.0)*x746*x748))+((cj6*r02)));
evalcond[1]=(((x747*x749))+(IKcos(j9))+(((0.156433569372259)*x751))+((cj5*x745))+(((-0.987688482454592)*x750))+((x748*x749)));
evalcond[2]=((((0.987688482454592)*x751))+((cj6*sj5*x745))+(((0.156433569372259)*x750))+(((0.987688482454592)*cj6*x748))+(((-1.0)*sj8*x744))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x752=(cj5*r00);
IkReal x753=((0.156433569372259)*cj6);
IkReal x754=(r01*sj5);
CheckValue<IkReal> x755=IKPowWithIntegerCheck(cj8,-1);
if(!x755.valid){
continue;
}
if( IKabs(((x755.value)*(((((-1.0)*cj6*r02))+((sj6*x752))+((sj6*x754)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x753*x754))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x752*x753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x755.value)*(((((-1.0)*cj6*r02))+((sj6*x752))+((sj6*x754))))))+IKsqr(((((-1.0)*x753*x754))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x752*x753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x755.value)*(((((-1.0)*cj6*r02))+((sj6*x752))+((sj6*x754))))), ((((-1.0)*x753*x754))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x752*x753))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x756=IKsin(j9);
IkReal x757=((0.987688482454592)*r01);
IkReal x758=((1.0)*sj6);
IkReal x759=(r01*sj5);
IkReal x760=(cj5*r00);
IkReal x761=((0.156433569372259)*cj6);
IkReal x762=(r00*sj5);
IkReal x763=(r02*sj6);
evalcond[0]=((((-1.0)*x758*x760))+((cj8*x756))+((cj6*r02))+(((-1.0)*x758*x759)));
evalcond[1]=(((cj5*x757))+((x760*x761))+((x759*x761))+(IKcos(j9))+(((0.156433569372259)*x763))+(((-0.987688482454592)*x762)));
evalcond[2]=(((cj6*sj5*x757))+(((0.987688482454592)*cj6*x760))+(((0.987688482454592)*x763))+(((0.156433569372259)*x762))+(((-0.156433569372259)*cj5*r01))+(((-1.0)*sj8*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x764=((1.0)*sj6);
IkReal x765=(r01*sj5);
IkReal x766=(cj5*r00);
IkReal x767=((0.156433569372259)*cj6);
if( IKabs(((((-1.0)*x764*x766))+(((-1.0)*x764*x765))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x765*x767))+((x766*x767))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x764*x766))+(((-1.0)*x764*x765))+((cj6*r02))))+IKsqr(((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x765*x767))+((x766*x767))+(((0.987688482454592)*cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x764*x766))+(((-1.0)*x764*x765))+((cj6*r02))), ((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x765*x767))+((x766*x767))+(((0.987688482454592)*cj5*r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x768=((1.0)*sj6);
IkReal x769=(r01*sj5);
IkReal x770=(cj5*r00);
IkReal x771=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x768*x770))+((cj6*r02))+(((-1.0)*x768*x769))+(((-1.0)*(IKsin(j9)))));
evalcond[1]=((((0.156433569372259)*r02*sj6))+((x770*x771))+(((-1.0)*(IKcos(j9))))+((x769*x771))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x772=(cj5*r00);
IkReal x773=((0.156433569372259)*cj6);
IkReal x774=(r01*sj5);
if( IKabs(((((-1.0)*cj6*r02))+((sj6*x772))+((sj6*x774)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*r02*sj6))+((x772*x773))+((x773*x774))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r02))+((sj6*x772))+((sj6*x774))))+IKsqr(((((0.156433569372259)*r02*sj6))+((x772*x773))+((x773*x774))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj6*r02))+((sj6*x772))+((sj6*x774))), ((((0.156433569372259)*r02*sj6))+((x772*x773))+((x773*x774))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x775=((1.0)*sj6);
IkReal x776=(r01*sj5);
IkReal x777=(cj5*r00);
IkReal x778=((0.156433569372259)*cj6);
evalcond[0]=((IKsin(j9))+(((-1.0)*x775*x776))+(((-1.0)*x775*x777))+((cj6*r02)));
evalcond[1]=(((x776*x778))+((x777*x778))+(((0.156433569372259)*r02*sj6))+(((-1.0)*(IKcos(j9))))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x779=(r00*sj5);
IkReal x780=(cj5*r01);
IkReal x781=(r02*sj6);
IkReal x782=((0.156433569372259)*cj6);
IkReal x783=(cj5*r00);
IkReal x784=(r01*sj5);
IkReal x785=((0.987688482454592)*cj6);
if( IKabs((((x783*x785))+((x784*x785))+(((0.156433569372259)*x779))+(((0.987688482454592)*x781))+(((-0.156433569372259)*x780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x782*x783))+((x782*x784))+(((0.156433569372259)*x781))+(((0.987688482454592)*x780))+(((-0.987688482454592)*x779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x783*x785))+((x784*x785))+(((0.156433569372259)*x779))+(((0.987688482454592)*x781))+(((-0.156433569372259)*x780))))+IKsqr((((x782*x783))+((x782*x784))+(((0.156433569372259)*x781))+(((0.987688482454592)*x780))+(((-0.987688482454592)*x779))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x783*x785))+((x784*x785))+(((0.156433569372259)*x779))+(((0.987688482454592)*x781))+(((-0.156433569372259)*x780))), (((x782*x783))+((x782*x784))+(((0.156433569372259)*x781))+(((0.987688482454592)*x780))+(((-0.987688482454592)*x779))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x786=(r00*sj5);
IkReal x787=(cj5*r01);
IkReal x788=(r02*sj6);
IkReal x789=((0.156433569372259)*cj6);
IkReal x790=(cj5*r00);
IkReal x791=(r01*sj5);
IkReal x792=((0.987688482454592)*cj6);
evalcond[0]=(((x790*x792))+(((0.156433569372259)*x786))+(((0.987688482454592)*x788))+(((-0.156433569372259)*x787))+((x791*x792))+(((-1.0)*(IKsin(j9)))));
evalcond[1]=((((-1.0)*(IKcos(j9))))+(((0.156433569372259)*x788))+(((0.987688482454592)*x787))+(((-0.987688482454592)*x786))+((x789*x791))+((x789*x790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x793=(r00*sj5);
IkReal x794=(cj5*r01);
IkReal x795=(r02*sj6);
IkReal x796=((0.156433569372259)*cj6);
IkReal x797=(cj5*r00);
IkReal x798=(r01*sj5);
IkReal x799=((0.987688482454592)*cj6);
if( IKabs(((((-1.0)*x798*x799))+(((0.156433569372259)*x794))+(((-1.0)*x797*x799))+(((-0.156433569372259)*x793))+(((-0.987688482454592)*x795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x796*x798))+((x796*x797))+(((0.156433569372259)*x795))+(((0.987688482454592)*x794))+(((-0.987688482454592)*x793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x798*x799))+(((0.156433569372259)*x794))+(((-1.0)*x797*x799))+(((-0.156433569372259)*x793))+(((-0.987688482454592)*x795))))+IKsqr((((x796*x798))+((x796*x797))+(((0.156433569372259)*x795))+(((0.987688482454592)*x794))+(((-0.987688482454592)*x793))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x798*x799))+(((0.156433569372259)*x794))+(((-1.0)*x797*x799))+(((-0.156433569372259)*x793))+(((-0.987688482454592)*x795))), (((x796*x798))+((x796*x797))+(((0.156433569372259)*x795))+(((0.987688482454592)*x794))+(((-0.987688482454592)*x793))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x800=(r00*sj5);
IkReal x801=(cj5*r01);
IkReal x802=(r02*sj6);
IkReal x803=((0.156433569372259)*cj6);
IkReal x804=(cj5*r00);
IkReal x805=(r01*sj5);
IkReal x806=((0.987688482454592)*cj6);
evalcond[0]=(((x804*x806))+(((0.156433569372259)*x800))+(((-0.156433569372259)*x801))+((x805*x806))+(IKsin(j9))+(((0.987688482454592)*x802)));
evalcond[1]=((((0.156433569372259)*x802))+(((-1.0)*(IKcos(j9))))+((x803*x805))+((x803*x804))+(((-0.987688482454592)*x800))+(((0.987688482454592)*x801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x807=(r00*sj5);
IkReal x808=(cj5*r01);
IkReal x809=(r02*sj6);
IkReal x810=((0.156433569372259)*cj6);
IkReal x811=(cj5*r00);
IkReal x812=(r01*sj5);
IkReal x813=((0.987688482454592)*cj6);
CheckValue<IkReal> x814=IKPowWithIntegerCheck(sj8,-1);
if(!x814.valid){
continue;
}
if( IKabs(((x814.value)*(((((0.156433569372259)*x807))+((x812*x813))+(((-0.156433569372259)*x808))+((x811*x813))+(((0.987688482454592)*x809)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*x809))+((x810*x811))+((x810*x812))+(((-0.987688482454592)*x807))+(((0.987688482454592)*x808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x814.value)*(((((0.156433569372259)*x807))+((x812*x813))+(((-0.156433569372259)*x808))+((x811*x813))+(((0.987688482454592)*x809))))))+IKsqr(((((0.156433569372259)*x809))+((x810*x811))+((x810*x812))+(((-0.987688482454592)*x807))+(((0.987688482454592)*x808))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x814.value)*(((((0.156433569372259)*x807))+((x812*x813))+(((-0.156433569372259)*x808))+((x811*x813))+(((0.987688482454592)*x809))))), ((((0.156433569372259)*x809))+((x810*x811))+((x810*x812))+(((-0.987688482454592)*x807))+(((0.987688482454592)*x808))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x815=IKsin(j9);
IkReal x816=((0.987688482454592)*r01);
IkReal x817=((1.0)*sj6);
IkReal x818=(r01*sj5);
IkReal x819=(cj5*r00);
IkReal x820=((0.156433569372259)*cj6);
IkReal x821=(r00*sj5);
IkReal x822=(r02*sj6);
IkReal x823=((1.0)*x815);
evalcond[0]=((((-1.0)*x817*x818))+(((-1.0)*x817*x819))+((cj6*r02))+(((-1.0)*cj8*x823)));
evalcond[1]=((((-1.0)*(IKcos(j9))))+((x819*x820))+(((0.156433569372259)*x822))+((cj5*x816))+((x818*x820))+(((-0.987688482454592)*x821)));
evalcond[2]=(((cj6*sj5*x816))+(((0.987688482454592)*cj6*x819))+(((-1.0)*sj8*x823))+(((0.987688482454592)*x822))+(((0.156433569372259)*x821))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x824=((1.0)*sj6);
IkReal x825=(r01*sj5);
IkReal x826=(cj5*r00);
IkReal x827=((0.156433569372259)*cj6);
CheckValue<IkReal> x828=IKPowWithIntegerCheck(cj8,-1);
if(!x828.valid){
continue;
}
if( IKabs(((x828.value)*(((((-1.0)*x824*x825))+(((-1.0)*x824*x826))+((cj6*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*r02*sj6))+((x825*x827))+(((-0.987688482454592)*r00*sj5))+((x826*x827))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x828.value)*(((((-1.0)*x824*x825))+(((-1.0)*x824*x826))+((cj6*r02))))))+IKsqr(((((0.156433569372259)*r02*sj6))+((x825*x827))+(((-0.987688482454592)*r00*sj5))+((x826*x827))+(((0.987688482454592)*cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x828.value)*(((((-1.0)*x824*x825))+(((-1.0)*x824*x826))+((cj6*r02))))), ((((0.156433569372259)*r02*sj6))+((x825*x827))+(((-0.987688482454592)*r00*sj5))+((x826*x827))+(((0.987688482454592)*cj5*r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x829=IKsin(j9);
IkReal x830=((0.987688482454592)*r01);
IkReal x831=((1.0)*sj6);
IkReal x832=(r01*sj5);
IkReal x833=(cj5*r00);
IkReal x834=((0.156433569372259)*cj6);
IkReal x835=(r00*sj5);
IkReal x836=(r02*sj6);
IkReal x837=((1.0)*x829);
evalcond[0]=((((-1.0)*cj8*x837))+((cj6*r02))+(((-1.0)*x831*x833))+(((-1.0)*x831*x832)));
evalcond[1]=((((-0.987688482454592)*x835))+(((-1.0)*(IKcos(j9))))+((x832*x834))+((x833*x834))+((cj5*x830))+(((0.156433569372259)*x836)));
evalcond[2]=(((cj6*sj5*x830))+(((-1.0)*sj8*x837))+(((0.987688482454592)*cj6*x833))+(((0.987688482454592)*x836))+(((-0.156433569372259)*cj5*r01))+(((0.156433569372259)*x835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j9eval[0]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j9eval[0]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x838=(r00*sj5);
IkReal x839=(cj5*r01);
IkReal x840=(r02*sj6);
IkReal x841=((0.156433569372259)*cj6);
IkReal x842=(cj5*r00);
IkReal x843=(r01*sj5);
IkReal x844=((0.987688482454592)*cj6);
CheckValue<IkReal> x845=IKPowWithIntegerCheck(cj7,-1);
if(!x845.valid){
continue;
}
if( IKabs(((((-0.156433569372259)*x839))+((x843*x844))+((x842*x844))+(((0.987688482454592)*x840))+(((0.156433569372259)*x838)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x845.value)*(((((-0.156433569372259)*x840))+(((-1.0)*x841*x843))+(((-1.0)*x841*x842))+(((-0.987688482454592)*x839))+(((0.987688482454592)*x838)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*x839))+((x843*x844))+((x842*x844))+(((0.987688482454592)*x840))+(((0.156433569372259)*x838))))+IKsqr(((x845.value)*(((((-0.156433569372259)*x840))+(((-1.0)*x841*x843))+(((-1.0)*x841*x842))+(((-0.987688482454592)*x839))+(((0.987688482454592)*x838))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*x839))+((x843*x844))+((x842*x844))+(((0.987688482454592)*x840))+(((0.156433569372259)*x838))), ((x845.value)*(((((-0.156433569372259)*x840))+(((-1.0)*x841*x843))+(((-1.0)*x841*x842))+(((-0.987688482454592)*x839))+(((0.987688482454592)*x838))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x846=IKcos(j9);
IkReal x847=(r00*sj5);
IkReal x848=((1.0)*sj6);
IkReal x849=(r01*sj5);
IkReal x850=(cj5*r00);
IkReal x851=(r02*sj6);
IkReal x852=(cj5*r01);
IkReal x853=((0.156433569372259)*cj6);
IkReal x854=((0.987688482454592)*cj6);
evalcond[0]=(((sj7*x846))+(((-1.0)*x848*x850))+((cj6*r02))+(((-1.0)*x848*x849)));
evalcond[1]=((((0.987688482454592)*x851))+((x850*x854))+(((-0.156433569372259)*x852))+((x849*x854))+(((-1.0)*(IKsin(j9))))+(((0.156433569372259)*x847)));
evalcond[2]=((((0.987688482454592)*x852))+((x850*x853))+(((-0.987688482454592)*x847))+(((0.156433569372259)*x851))+((cj7*x846))+((x849*x853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x855=(cj5*r00);
IkReal x856=((0.987688482454592)*cj6);
IkReal x857=(r01*sj5);
CheckValue<IkReal> x858=IKPowWithIntegerCheck(sj7,-1);
if(!x858.valid){
continue;
}
if( IKabs(((((0.987688482454592)*r02*sj6))+((x855*x856))+((x856*x857))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x858.value)*(((((-1.0)*cj6*r02))+((sj6*x857))+((sj6*x855)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj6))+((x855*x856))+((x856*x857))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))+IKsqr(((x858.value)*(((((-1.0)*cj6*r02))+((sj6*x857))+((sj6*x855))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.987688482454592)*r02*sj6))+((x855*x856))+((x856*x857))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))), ((x858.value)*(((((-1.0)*cj6*r02))+((sj6*x857))+((sj6*x855))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x859=IKcos(j9);
IkReal x860=(r00*sj5);
IkReal x861=((1.0)*sj6);
IkReal x862=(r01*sj5);
IkReal x863=(cj5*r00);
IkReal x864=(r02*sj6);
IkReal x865=(cj5*r01);
IkReal x866=((0.156433569372259)*cj6);
IkReal x867=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*x861*x863))+(((-1.0)*x861*x862))+((cj6*r02))+((sj7*x859)));
evalcond[1]=((((0.987688482454592)*x864))+((x863*x867))+(((0.156433569372259)*x860))+((x862*x867))+(((-0.156433569372259)*x865))+(((-1.0)*(IKsin(j9)))));
evalcond[2]=(((cj7*x859))+(((0.987688482454592)*x865))+((x863*x866))+(((0.156433569372259)*x864))+((x862*x866))+(((-0.987688482454592)*x860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j9eval[0]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j9eval[0]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x868=(r00*sj5);
IkReal x869=(cj5*r01);
IkReal x870=(r02*sj6);
IkReal x871=((0.156433569372259)*cj6);
IkReal x872=(cj5*r00);
IkReal x873=(r01*sj5);
IkReal x874=((0.987688482454592)*cj6);
CheckValue<IkReal> x875=IKPowWithIntegerCheck(cj7,-1);
if(!x875.valid){
continue;
}
if( IKabs(((((-1.0)*x872*x874))+(((0.156433569372259)*x869))+(((-1.0)*x873*x874))+(((-0.987688482454592)*x870))+(((-0.156433569372259)*x868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x875.value)*(((((-1.0)*x871*x873))+(((-1.0)*x871*x872))+(((0.987688482454592)*x868))+(((-0.987688482454592)*x869))+(((-0.156433569372259)*x870)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x872*x874))+(((0.156433569372259)*x869))+(((-1.0)*x873*x874))+(((-0.987688482454592)*x870))+(((-0.156433569372259)*x868))))+IKsqr(((x875.value)*(((((-1.0)*x871*x873))+(((-1.0)*x871*x872))+(((0.987688482454592)*x868))+(((-0.987688482454592)*x869))+(((-0.156433569372259)*x870))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x872*x874))+(((0.156433569372259)*x869))+(((-1.0)*x873*x874))+(((-0.987688482454592)*x870))+(((-0.156433569372259)*x868))), ((x875.value)*(((((-1.0)*x871*x873))+(((-1.0)*x871*x872))+(((0.987688482454592)*x868))+(((-0.987688482454592)*x869))+(((-0.156433569372259)*x870))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x876=IKcos(j9);
IkReal x877=(r00*sj5);
IkReal x878=((1.0)*sj6);
IkReal x879=(r01*sj5);
IkReal x880=(cj5*r00);
IkReal x881=(r02*sj6);
IkReal x882=(cj5*r01);
IkReal x883=((0.156433569372259)*cj6);
IkReal x884=((0.987688482454592)*cj6);
evalcond[0]=(((cj6*r02))+(((-1.0)*x878*x879))+((sj7*x876))+(((-1.0)*x878*x880)));
evalcond[1]=(((x879*x884))+((x880*x884))+(((0.156433569372259)*x877))+(((0.987688482454592)*x881))+(IKsin(j9))+(((-0.156433569372259)*x882)));
evalcond[2]=(((x879*x883))+((x880*x883))+(((0.987688482454592)*x882))+(((0.156433569372259)*x881))+(((-0.987688482454592)*x877))+((cj7*x876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x885=(cj5*r00);
IkReal x886=((0.987688482454592)*cj6);
IkReal x887=(r01*sj5);
CheckValue<IkReal> x888=IKPowWithIntegerCheck(sj7,-1);
if(!x888.valid){
continue;
}
if( IKabs(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x886*x887))+(((-0.987688482454592)*r02*sj6))+(((-1.0)*x885*x886))+(((0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x888.value)*(((((-1.0)*cj6*r02))+((sj6*x887))+((sj6*x885)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x886*x887))+(((-0.987688482454592)*r02*sj6))+(((-1.0)*x885*x886))+(((0.156433569372259)*cj5*r01))))+IKsqr(((x888.value)*(((((-1.0)*cj6*r02))+((sj6*x887))+((sj6*x885))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x886*x887))+(((-0.987688482454592)*r02*sj6))+(((-1.0)*x885*x886))+(((0.156433569372259)*cj5*r01))), ((x888.value)*(((((-1.0)*cj6*r02))+((sj6*x887))+((sj6*x885))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x889=IKcos(j9);
IkReal x890=(r00*sj5);
IkReal x891=((1.0)*sj6);
IkReal x892=(r01*sj5);
IkReal x893=(cj5*r00);
IkReal x894=(r02*sj6);
IkReal x895=(cj5*r01);
IkReal x896=((0.156433569372259)*cj6);
IkReal x897=((0.987688482454592)*cj6);
evalcond[0]=(((sj7*x889))+((cj6*r02))+(((-1.0)*x891*x893))+(((-1.0)*x891*x892)));
evalcond[1]=((((0.987688482454592)*x894))+(IKsin(j9))+((x893*x897))+(((0.156433569372259)*x890))+((x892*x897))+(((-0.156433569372259)*x895)));
evalcond[2]=((((-0.987688482454592)*x890))+(((0.987688482454592)*x895))+((cj7*x889))+((x893*x896))+(((0.156433569372259)*x894))+((x892*x896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x907=IKPowWithIntegerCheck(sj8,-1);
if(!x907.valid){
continue;
}
IkReal x898=x907.value;
IkReal x899=(cj8*sj7);
IkReal x900=(r02*sj6);
IkReal x901=((0.156433569372259)*sj8);
IkReal x902=(r00*sj5);
IkReal x903=((0.987688482454592)*sj8);
IkReal x904=((0.156433569372259)*cj5*r01);
IkReal x905=(cj6*r01*sj5);
IkReal x906=((0.987688482454592)*cj5*cj6*r00);
CheckValue<IkReal> x908=IKPowWithIntegerCheck(cj7,-1);
if(!x908.valid){
continue;
}
if( IKabs((x898*(((((-1.0)*x904))+(((0.987688482454592)*x905))+(((0.987688482454592)*x900))+x906+(((0.156433569372259)*x902)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x898*(x908.value)*(((((-1.0)*x900*x901))+((x902*x903))+(((-1.0)*cj5*r01*x903))+(((-1.0)*cj5*cj6*r00*x901))+((x899*x906))+(((-1.0)*x901*x905))+(((-1.0)*x899*x904))+(((0.156433569372259)*x899*x902))+(((0.987688482454592)*x899*x900))+(((0.987688482454592)*x899*x905)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x898*(((((-1.0)*x904))+(((0.987688482454592)*x905))+(((0.987688482454592)*x900))+x906+(((0.156433569372259)*x902))))))+IKsqr((x898*(x908.value)*(((((-1.0)*x900*x901))+((x902*x903))+(((-1.0)*cj5*r01*x903))+(((-1.0)*cj5*cj6*r00*x901))+((x899*x906))+(((-1.0)*x901*x905))+(((-1.0)*x899*x904))+(((0.156433569372259)*x899*x902))+(((0.987688482454592)*x899*x900))+(((0.987688482454592)*x899*x905))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x898*(((((-1.0)*x904))+(((0.987688482454592)*x905))+(((0.987688482454592)*x900))+x906+(((0.156433569372259)*x902))))), (x898*(x908.value)*(((((-1.0)*x900*x901))+((x902*x903))+(((-1.0)*cj5*r01*x903))+(((-1.0)*cj5*cj6*r00*x901))+((x899*x906))+(((-1.0)*x901*x905))+(((-1.0)*x899*x904))+(((0.156433569372259)*x899*x902))+(((0.987688482454592)*x899*x900))+(((0.987688482454592)*x899*x905))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x909=IKsin(j9);
IkReal x910=IKcos(j9);
IkReal x911=((0.987688482454592)*sj5);
IkReal x912=((1.0)*sj6);
IkReal x913=(r01*sj5);
IkReal x914=(cj5*r00);
IkReal x915=((0.156433569372259)*cj6);
IkReal x916=(r02*sj6);
IkReal x917=(cj5*r01);
IkReal x918=(cj8*x909);
evalcond[0]=(((cj6*r02))+((cj7*x918))+(((-1.0)*x912*x914))+(((-1.0)*x912*x913))+((sj7*x910)));
evalcond[1]=((((0.987688482454592)*x916))+(((-0.156433569372259)*x917))+((cj6*r01*x911))+(((-1.0)*sj8*x909))+(((0.156433569372259)*r00*sj5))+(((0.987688482454592)*cj6*x914)));
evalcond[2]=((((0.156433569372259)*x916))+(((0.987688482454592)*x917))+(((-1.0)*sj7*x918))+((x914*x915))+(((-1.0)*r00*x911))+((cj7*x910))+((x913*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x929=IKPowWithIntegerCheck(sj8,-1);
if(!x929.valid){
continue;
}
IkReal x919=x929.value;
IkReal x920=((0.156433569372259)*sj5);
IkReal x921=(r01*sj5);
IkReal x922=(sj6*sj8);
IkReal x923=((0.987688482454592)*cj6);
IkReal x924=(cj7*cj8);
IkReal x925=(cj5*r00);
IkReal x926=(r00*x924);
IkReal x927=((0.987688482454592)*r02*sj6);
IkReal x928=((0.156433569372259)*cj5*r01);
CheckValue<IkReal> x930=IKPowWithIntegerCheck(sj7,-1);
if(!x930.valid){
continue;
}
if( IKabs((x919*(((((-1.0)*x928))+((x921*x923))+((x923*x925))+((r00*x920))+x927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x919*(x930.value)*(((((-1.0)*x923*x924*x925))+((x924*x928))+(((-1.0)*x924*x927))+(((-1.0)*x920*x926))+((x921*x922))+(((-1.0)*x921*x923*x924))+((x922*x925))+(((-1.0)*cj6*r02*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x919*(((((-1.0)*x928))+((x921*x923))+((x923*x925))+((r00*x920))+x927))))+IKsqr((x919*(x930.value)*(((((-1.0)*x923*x924*x925))+((x924*x928))+(((-1.0)*x924*x927))+(((-1.0)*x920*x926))+((x921*x922))+(((-1.0)*x921*x923*x924))+((x922*x925))+(((-1.0)*cj6*r02*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x919*(((((-1.0)*x928))+((x921*x923))+((x923*x925))+((r00*x920))+x927))), (x919*(x930.value)*(((((-1.0)*x923*x924*x925))+((x924*x928))+(((-1.0)*x924*x927))+(((-1.0)*x920*x926))+((x921*x922))+(((-1.0)*x921*x923*x924))+((x922*x925))+(((-1.0)*cj6*r02*sj8))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x931=IKsin(j9);
IkReal x932=IKcos(j9);
IkReal x933=((0.987688482454592)*sj5);
IkReal x934=((1.0)*sj6);
IkReal x935=(r01*sj5);
IkReal x936=(cj5*r00);
IkReal x937=((0.156433569372259)*cj6);
IkReal x938=(r02*sj6);
IkReal x939=(cj5*r01);
IkReal x940=(cj8*x931);
evalcond[0]=(((cj7*x940))+(((-1.0)*x934*x935))+(((-1.0)*x934*x936))+((cj6*r02))+((sj7*x932)));
evalcond[1]=(((cj6*r01*x933))+(((0.987688482454592)*cj6*x936))+(((-0.156433569372259)*x939))+(((-1.0)*sj8*x931))+(((0.156433569372259)*r00*sj5))+(((0.987688482454592)*x938)));
evalcond[2]=(((x936*x937))+((cj7*x932))+((x935*x937))+(((0.156433569372259)*x938))+(((-1.0)*sj7*x940))+(((-1.0)*r00*x933))+(((0.987688482454592)*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x941=(cj6*sj7);
IkReal x942=((1.0)*r02);
IkReal x943=(cj5*cj7);
IkReal x944=((0.987688482454592)*r01);
IkReal x945=((0.156433569372259)*cj6);
IkReal x946=(cj5*sj7);
IkReal x947=(sj5*sj7);
IkReal x948=(r01*sj6);
IkReal x949=((0.987688482454592)*r00);
IkReal x950=(r01*sj5);
IkReal x951=(r00*sj6);
IkReal x952=(cj7*sj5);
IkReal x953=((0.156433569372259)*r02*sj6);
CheckValue<IkReal> x954=IKPowWithIntegerCheck(cj8,-1);
if(!x954.valid){
continue;
}
if( IKabs(((x954.value)*(((((0.156433569372259)*x941*x950))+((sj7*x953))+(((-1.0)*x947*x949))+(((0.156433569372259)*cj5*r00*x941))+(((-1.0)*cj6*cj7*x942))+((x943*x951))+((x948*x952))+((x944*x946)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x947*x948))+((x949*x952))+(((-1.0)*cj7*x953))+(((-1.0)*x941*x942))+(((-1.0)*cj7*x945*x950))+(((-1.0)*x943*x944))+((x946*x951))+(((-1.0)*r00*x943*x945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x954.value)*(((((0.156433569372259)*x941*x950))+((sj7*x953))+(((-1.0)*x947*x949))+(((0.156433569372259)*cj5*r00*x941))+(((-1.0)*cj6*cj7*x942))+((x943*x951))+((x948*x952))+((x944*x946))))))+IKsqr((((x947*x948))+((x949*x952))+(((-1.0)*cj7*x953))+(((-1.0)*x941*x942))+(((-1.0)*cj7*x945*x950))+(((-1.0)*x943*x944))+((x946*x951))+(((-1.0)*r00*x943*x945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x954.value)*(((((0.156433569372259)*x941*x950))+((sj7*x953))+(((-1.0)*x947*x949))+(((0.156433569372259)*cj5*r00*x941))+(((-1.0)*cj6*cj7*x942))+((x943*x951))+((x948*x952))+((x944*x946))))), (((x947*x948))+((x949*x952))+(((-1.0)*cj7*x953))+(((-1.0)*x941*x942))+(((-1.0)*cj7*x945*x950))+(((-1.0)*x943*x944))+((x946*x951))+(((-1.0)*r00*x943*x945))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x955=IKsin(j9);
IkReal x956=IKcos(j9);
IkReal x957=((0.987688482454592)*sj5);
IkReal x958=((1.0)*sj6);
IkReal x959=(r01*sj5);
IkReal x960=(cj5*r00);
IkReal x961=((0.156433569372259)*cj6);
IkReal x962=(r02*sj6);
IkReal x963=(cj5*r01);
IkReal x964=(cj8*x955);
evalcond[0]=(((sj7*x956))+(((-1.0)*x958*x960))+(((-1.0)*x958*x959))+((cj6*r02))+((cj7*x964)));
evalcond[1]=(((cj6*r01*x957))+(((0.987688482454592)*cj6*x960))+(((-1.0)*sj8*x955))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*x963))+(((0.987688482454592)*x962)));
evalcond[2]=((((-1.0)*r00*x957))+((x960*x961))+(((0.156433569372259)*x962))+((x959*x961))+(((-1.0)*sj7*x964))+((cj7*x956))+(((0.987688482454592)*x963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x965=(cj5*px);
IkReal x966=((6.58458988303061)*cj6);
IkReal x967=((20.0)*sj6);
IkReal x968=(py*sj5);
CheckValue<IkReal> x969=IKPowWithIntegerCheck(cj7,-1);
if(!x969.valid){
continue;
}
if( IKabs(((0.333333333333333)*(x969.value)*(((-0.3)+(((-1.0)*x965*x967))+(((-1.0)*x967*x968))+(((20.0)*cj6*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.19326326256527)+(((1.04289046248173)*px*sj5))+(((-1.04289046248173)*cj5*py))+(((6.58458988303061)*pz*sj6))+((x965*x966))+((x966*x968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.333333333333333)*(x969.value)*(((-0.3)+(((-1.0)*x965*x967))+(((-1.0)*x967*x968))+(((20.0)*cj6*pz))))))+IKsqr(((-1.19326326256527)+(((1.04289046248173)*px*sj5))+(((-1.04289046248173)*cj5*py))+(((6.58458988303061)*pz*sj6))+((x965*x966))+((x966*x968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((0.333333333333333)*(x969.value)*(((-0.3)+(((-1.0)*x965*x967))+(((-1.0)*x967*x968))+(((20.0)*cj6*pz))))), ((-1.19326326256527)+(((1.04289046248173)*px*sj5))+(((-1.04289046248173)*cj5*py))+(((6.58458988303061)*pz*sj6))+((x965*x966))+((x966*x968))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x970=IKsin(j8);
IkReal x971=((0.156433569372259)*cj5);
IkReal x972=((1.0)*sj6);
IkReal x973=(cj5*px);
IkReal x974=(px*sj5);
IkReal x975=(py*sj5);
IkReal x976=(pz*sj6);
IkReal x977=((0.987688482454592)*cj6);
IkReal x978=((0.15)*x970);
evalcond[0]=((-0.015)+(((-1.0)*cj7*x978))+((cj6*pz))+(((-1.0)*x972*x975))+(((-1.0)*x972*x973)));
evalcond[1]=((-0.17898948938479)+((x975*x977))+(((-1.0)*py*x971))+((x973*x977))+(((0.156433569372259)*x974))+(((0.987688482454592)*x976))+(((-0.15)*(IKcos(j8)))));
evalcond[2]=((-0.0282173632675343)+(((0.156433569372259)*cj6*x975))+((sj7*x978))+(((-0.987688482454592)*x974))+(((0.987688482454592)*cj5*py))+(((0.156433569372259)*x976))+((cj6*px*x971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x979=(cj6*sj7);
IkReal x980=((1.0)*r02);
IkReal x981=(cj5*cj7);
IkReal x982=((0.987688482454592)*r01);
IkReal x983=((0.156433569372259)*cj6);
IkReal x984=(cj5*sj7);
IkReal x985=(sj5*sj7);
IkReal x986=(r01*sj6);
IkReal x987=((0.987688482454592)*r00);
IkReal x988=(r01*sj5);
IkReal x989=(r00*sj6);
IkReal x990=(cj7*sj5);
IkReal x991=((0.156433569372259)*r02*sj6);
if( IKabs((((x981*x989))+((x986*x990))+(((0.156433569372259)*x979*x988))+((x982*x984))+((sj7*x991))+(((0.156433569372259)*cj5*r00*x979))+(((-1.0)*x985*x987))+(((-1.0)*cj6*cj7*x980)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*x991))+(((-1.0)*cj7*x983*x988))+((x987*x990))+((x984*x989))+(((-1.0)*x981*x982))+((x985*x986))+(((-1.0)*x979*x980))+(((-1.0)*r00*x981*x983)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x981*x989))+((x986*x990))+(((0.156433569372259)*x979*x988))+((x982*x984))+((sj7*x991))+(((0.156433569372259)*cj5*r00*x979))+(((-1.0)*x985*x987))+(((-1.0)*cj6*cj7*x980))))+IKsqr(((((-1.0)*cj7*x991))+(((-1.0)*cj7*x983*x988))+((x987*x990))+((x984*x989))+(((-1.0)*x981*x982))+((x985*x986))+(((-1.0)*x979*x980))+(((-1.0)*r00*x981*x983))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x981*x989))+((x986*x990))+(((0.156433569372259)*x979*x988))+((x982*x984))+((sj7*x991))+(((0.156433569372259)*cj5*r00*x979))+(((-1.0)*x985*x987))+(((-1.0)*cj6*cj7*x980))), ((((-1.0)*cj7*x991))+(((-1.0)*cj7*x983*x988))+((x987*x990))+((x984*x989))+(((-1.0)*x981*x982))+((x985*x986))+(((-1.0)*x979*x980))+(((-1.0)*r00*x981*x983))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x992=IKcos(j9);
IkReal x993=IKsin(j9);
IkReal x994=((1.0)*sj6);
IkReal x995=(r01*sj5);
IkReal x996=(cj5*r00);
IkReal x997=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x994*x996))+(((-1.0)*x994*x995))+((sj7*x992))+((cj7*x993))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+(((-1.0)*sj7*x993))+(((-0.987688482454592)*r00*sj5))+((cj7*x992))+((x995*x997))+((x996*x997))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x998=(cj6*sj7);
IkReal x999=(r01*sj5);
IkReal x1000=(cj5*r00);
IkReal x1001=(sj6*sj7);
IkReal x1002=(cj6*cj7);
IkReal x1003=((0.156433569372259)*r02);
IkReal x1004=((0.987688482454592)*cj5*r01);
IkReal x1005=((1.0)*cj7*sj6);
IkReal x1006=((0.987688482454592)*r00*sj5);
if( IKabs((((r02*x1002))+(((-0.156433569372259)*x1000*x998))+(((-1.0)*x1001*x1003))+(((-0.156433569372259)*x998*x999))+(((-1.0)*x1005*x999))+(((-1.0)*x1000*x1005))+(((-1.0)*sj7*x1004))+((sj7*x1006)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.156433569372259)*x1002*x999))+((x1000*x1001))+((cj7*x1006))+(((-0.156433569372259)*x1000*x1002))+(((-1.0)*cj7*sj6*x1003))+((x1001*x999))+(((-1.0)*r02*x998))+(((-1.0)*cj7*x1004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1002))+(((-0.156433569372259)*x1000*x998))+(((-1.0)*x1001*x1003))+(((-0.156433569372259)*x998*x999))+(((-1.0)*x1005*x999))+(((-1.0)*x1000*x1005))+(((-1.0)*sj7*x1004))+((sj7*x1006))))+IKsqr(((((-0.156433569372259)*x1002*x999))+((x1000*x1001))+((cj7*x1006))+(((-0.156433569372259)*x1000*x1002))+(((-1.0)*cj7*sj6*x1003))+((x1001*x999))+(((-1.0)*r02*x998))+(((-1.0)*cj7*x1004))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r02*x1002))+(((-0.156433569372259)*x1000*x998))+(((-1.0)*x1001*x1003))+(((-0.156433569372259)*x998*x999))+(((-1.0)*x1005*x999))+(((-1.0)*x1000*x1005))+(((-1.0)*sj7*x1004))+((sj7*x1006))), ((((-0.156433569372259)*x1002*x999))+((x1000*x1001))+((cj7*x1006))+(((-0.156433569372259)*x1000*x1002))+(((-1.0)*cj7*sj6*x1003))+((x1001*x999))+(((-1.0)*r02*x998))+(((-1.0)*cj7*x1004))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1007=IKcos(j9);
IkReal x1008=IKsin(j9);
IkReal x1009=((1.0)*sj6);
IkReal x1010=(r01*sj5);
IkReal x1011=(cj5*r00);
IkReal x1012=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x1009*x1010))+(((-1.0)*x1009*x1011))+(((-1.0)*cj7*x1008))+((cj6*r02))+((sj7*x1007)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+((cj7*x1007))+(((-0.987688482454592)*r00*sj5))+((x1011*x1012))+((x1010*x1012))+(((0.987688482454592)*cj5*r01))+((sj7*x1008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1013=(cj5*r00);
IkReal x1014=((0.987688482454592)*cj6);
IkReal x1015=(r01*sj5);
if( IKabs((((x1014*x1015))+(((0.987688482454592)*r02*sj6))+((x1013*x1014))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x1015))+((sj6*x1013))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1014*x1015))+(((0.987688482454592)*r02*sj6))+((x1013*x1014))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))+IKsqr((((sj6*x1015))+((sj6*x1013))+(((-1.0)*cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x1014*x1015))+(((0.987688482454592)*r02*sj6))+((x1013*x1014))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))), (((sj6*x1015))+((sj6*x1013))+(((-1.0)*cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1016=((1.0)*sj6);
IkReal x1017=(r01*sj5);
IkReal x1018=(cj5*r00);
IkReal x1019=((0.987688482454592)*cj6);
evalcond[0]=((IKcos(j9))+(((-1.0)*x1016*x1018))+(((-1.0)*x1016*x1017))+((cj6*r02)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+((x1017*x1019))+(((0.156433569372259)*r00*sj5))+((x1018*x1019))+(((-1.0)*(IKsin(j9))))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1020=(cj5*r00);
IkReal x1021=((0.987688482454592)*cj6);
IkReal x1022=(r01*sj5);
if( IKabs(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x1021*x1022))+(((-1.0)*x1020*x1021))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r02))+((sj6*x1020))+((sj6*x1022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x1021*x1022))+(((-1.0)*x1020*x1021))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))))+IKsqr(((((-1.0)*cj6*r02))+((sj6*x1020))+((sj6*x1022))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x1021*x1022))+(((-1.0)*x1020*x1021))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))), ((((-1.0)*cj6*r02))+((sj6*x1020))+((sj6*x1022))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1023=((1.0)*sj6);
IkReal x1024=(r01*sj5);
IkReal x1025=(cj5*r00);
IkReal x1026=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*x1023*x1025))+(((-1.0)*x1023*x1024))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+(IKsin(j9))+((x1025*x1026))+(((0.156433569372259)*r00*sj5))+((x1024*x1026))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1027=(cj5*r00);
IkReal x1028=((0.156433569372259)*cj6);
IkReal x1029=(r01*sj5);
if( IKabs(((((0.156433569372259)*r02*sj6))+((x1028*x1029))+(((-0.987688482454592)*r00*sj5))+((x1027*x1028))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r02))+((sj6*x1027))+((sj6*x1029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.156433569372259)*r02*sj6))+((x1028*x1029))+(((-0.987688482454592)*r00*sj5))+((x1027*x1028))+(((0.987688482454592)*cj5*r01))))+IKsqr(((((-1.0)*cj6*r02))+((sj6*x1027))+((sj6*x1029))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.156433569372259)*r02*sj6))+((x1028*x1029))+(((-0.987688482454592)*r00*sj5))+((x1027*x1028))+(((0.987688482454592)*cj5*r01))), ((((-1.0)*cj6*r02))+((sj6*x1027))+((sj6*x1029))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1030=((1.0)*sj6);
IkReal x1031=(r01*sj5);
IkReal x1032=(cj5*r00);
IkReal x1033=((0.156433569372259)*cj6);
evalcond[0]=((IKcos(j9))+((cj6*r02))+(((-1.0)*x1030*x1032))+(((-1.0)*x1030*x1031)));
evalcond[1]=(((x1031*x1033))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x1032*x1033))+(((-1.0)*(IKsin(j9))))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1034=(cj5*r00);
IkReal x1035=((0.156433569372259)*cj6);
IkReal x1036=(r01*sj5);
if( IKabs(((((-1.0)*x1035*x1036))+(((-1.0)*x1034*x1035))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x1036))+((sj6*x1034))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1035*x1036))+(((-1.0)*x1034*x1035))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))))+IKsqr((((sj6*x1036))+((sj6*x1034))+(((-1.0)*cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x1035*x1036))+(((-1.0)*x1034*x1035))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))), (((sj6*x1036))+((sj6*x1034))+(((-1.0)*cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1037=((1.0)*sj6);
IkReal x1038=(r01*sj5);
IkReal x1039=(cj5*r00);
IkReal x1040=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x1037*x1039))+(((-1.0)*x1037*x1038))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=(((x1038*x1040))+(((0.156433569372259)*r02*sj6))+((x1039*x1040))+(IKsin(j9))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1041=(cj5*r00);
IkReal x1042=((0.156433569372259)*cj6);
IkReal x1043=(r01*sj5);
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(cj8,-1);
if(!x1044.valid){
continue;
}
if( IKabs(((x1044.value)*((((x1042*x1043))+(((0.156433569372259)*r02*sj6))+((x1041*x1042))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x1041))+((sj6*x1043))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1044.value)*((((x1042*x1043))+(((0.156433569372259)*r02*sj6))+((x1041*x1042))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))))))+IKsqr((((sj6*x1041))+((sj6*x1043))+(((-1.0)*cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x1044.value)*((((x1042*x1043))+(((0.156433569372259)*r02*sj6))+((x1041*x1042))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))))), (((sj6*x1041))+((sj6*x1043))+(((-1.0)*cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1045=IKsin(j9);
IkReal x1046=(cj5*r01);
IkReal x1047=((1.0)*sj6);
IkReal x1048=(r01*sj5);
IkReal x1049=(cj5*r00);
IkReal x1050=(r02*sj6);
IkReal x1051=(r00*sj5);
IkReal x1052=((0.156433569372259)*cj6);
IkReal x1053=((0.987688482454592)*cj6);
IkReal x1054=((1.0)*x1045);
evalcond[0]=((IKcos(j9))+((cj6*r02))+(((-1.0)*x1047*x1049))+(((-1.0)*x1047*x1048)));
evalcond[1]=((((0.987688482454592)*x1050))+((x1048*x1053))+(((-0.156433569372259)*x1046))+(((0.156433569372259)*x1051))+((x1049*x1053))+(((-1.0)*sj8*x1054)));
evalcond[2]=((((-1.0)*cj8*x1054))+((x1048*x1052))+(((-0.987688482454592)*x1051))+(((0.156433569372259)*x1050))+((x1049*x1052))+(((0.987688482454592)*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1055=(cj5*r00);
IkReal x1056=((0.987688482454592)*cj6);
IkReal x1057=(r01*sj5);
CheckValue<IkReal> x1058=IKPowWithIntegerCheck(sj8,-1);
if(!x1058.valid){
continue;
}
if( IKabs(((x1058.value)*(((((0.987688482454592)*r02*sj6))+((x1055*x1056))+((x1056*x1057))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x1057))+((sj6*x1055))+(((-1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1058.value)*(((((0.987688482454592)*r02*sj6))+((x1055*x1056))+((x1056*x1057))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))))+IKsqr((((sj6*x1057))+((sj6*x1055))+(((-1.0)*cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x1058.value)*(((((0.987688482454592)*r02*sj6))+((x1055*x1056))+((x1056*x1057))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))))), (((sj6*x1057))+((sj6*x1055))+(((-1.0)*cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1059=IKsin(j9);
IkReal x1060=(cj5*r01);
IkReal x1061=((1.0)*sj6);
IkReal x1062=(r01*sj5);
IkReal x1063=(cj5*r00);
IkReal x1064=(r02*sj6);
IkReal x1065=(r00*sj5);
IkReal x1066=((0.156433569372259)*cj6);
IkReal x1067=((0.987688482454592)*cj6);
IkReal x1068=((1.0)*x1059);
evalcond[0]=((((-1.0)*x1061*x1062))+(((-1.0)*x1061*x1063))+(IKcos(j9))+((cj6*r02)));
evalcond[1]=((((0.987688482454592)*x1064))+(((0.156433569372259)*x1065))+((x1062*x1067))+((x1063*x1067))+(((-1.0)*sj8*x1068))+(((-0.156433569372259)*x1060)));
evalcond[2]=((((0.987688482454592)*x1060))+(((-1.0)*cj8*x1068))+(((0.156433569372259)*x1064))+(((-0.987688482454592)*x1065))+((x1062*x1066))+((x1063*x1066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1069=((1.0)*sj6);
IkReal x1070=(r01*sj5);
IkReal x1071=(cj5*r00);
IkReal x1072=((0.156433569372259)*cj6);
if( IKabs(((((-1.0)*x1070*x1072))+(((-1.0)*x1071*x1072))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r02))+(((-1.0)*x1069*x1071))+(((-1.0)*x1069*x1070)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1070*x1072))+(((-1.0)*x1071*x1072))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))))+IKsqr((((cj6*r02))+(((-1.0)*x1069*x1071))+(((-1.0)*x1069*x1070))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x1070*x1072))+(((-1.0)*x1071*x1072))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))), (((cj6*r02))+(((-1.0)*x1069*x1071))+(((-1.0)*x1069*x1070))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1073=((1.0)*sj6);
IkReal x1074=(r01*sj5);
IkReal x1075=(cj5*r00);
IkReal x1076=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x1073*x1075))+(((-1.0)*x1073*x1074))+(((-1.0)*(IKcos(j9))))+((cj6*r02)));
evalcond[1]=(((x1074*x1076))+(((0.156433569372259)*r02*sj6))+((x1075*x1076))+(IKsin(j9))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1077=((1.0)*sj6);
IkReal x1078=(r01*sj5);
IkReal x1079=(cj5*r00);
IkReal x1080=((0.156433569372259)*cj6);
if( IKabs((((x1079*x1080))+(((0.156433569372259)*r02*sj6))+((x1078*x1080))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1077*x1078))+(((-1.0)*x1077*x1079))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1079*x1080))+(((0.156433569372259)*r02*sj6))+((x1078*x1080))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))))+IKsqr(((((-1.0)*x1077*x1078))+(((-1.0)*x1077*x1079))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x1079*x1080))+(((0.156433569372259)*r02*sj6))+((x1078*x1080))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))), ((((-1.0)*x1077*x1078))+(((-1.0)*x1077*x1079))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1081=((1.0)*sj6);
IkReal x1082=(r01*sj5);
IkReal x1083=(cj5*r00);
IkReal x1084=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*(IKcos(j9))))+(((-1.0)*x1081*x1082))+(((-1.0)*x1081*x1083))+((cj6*r02)));
evalcond[1]=(((x1082*x1084))+(((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+(((-1.0)*(IKsin(j9))))+(((0.987688482454592)*cj5*r01))+((x1083*x1084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1085=((1.0)*sj6);
IkReal x1086=(r01*sj5);
IkReal x1087=(cj5*r00);
IkReal x1088=((0.987688482454592)*cj6);
if( IKabs(((((0.987688482454592)*r02*sj6))+((x1087*x1088))+(((0.156433569372259)*r00*sj5))+((x1086*x1088))+(((-0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r02))+(((-1.0)*x1085*x1086))+(((-1.0)*x1085*x1087)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj6))+((x1087*x1088))+(((0.156433569372259)*r00*sj5))+((x1086*x1088))+(((-0.156433569372259)*cj5*r01))))+IKsqr((((cj6*r02))+(((-1.0)*x1085*x1086))+(((-1.0)*x1085*x1087))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.987688482454592)*r02*sj6))+((x1087*x1088))+(((0.156433569372259)*r00*sj5))+((x1086*x1088))+(((-0.156433569372259)*cj5*r01))), (((cj6*r02))+(((-1.0)*x1085*x1086))+(((-1.0)*x1085*x1087))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1089=((1.0)*sj6);
IkReal x1090=(r01*sj5);
IkReal x1091=(cj5*r00);
IkReal x1092=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*(IKcos(j9))))+(((-1.0)*x1089*x1090))+(((-1.0)*x1089*x1091))+((cj6*r02)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+(((0.156433569372259)*r00*sj5))+((x1091*x1092))+((x1090*x1092))+(((-1.0)*(IKsin(j9))))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1093=((1.0)*sj6);
IkReal x1094=(r01*sj5);
IkReal x1095=(cj5*r00);
IkReal x1096=((0.987688482454592)*cj6);
if( IKabs(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x1095*x1096))+(((-1.0)*x1094*x1096))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r02))+(((-1.0)*x1093*x1094))+(((-1.0)*x1093*x1095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x1095*x1096))+(((-1.0)*x1094*x1096))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))))+IKsqr((((cj6*r02))+(((-1.0)*x1093*x1094))+(((-1.0)*x1093*x1095))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x1095*x1096))+(((-1.0)*x1094*x1096))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))), (((cj6*r02))+(((-1.0)*x1093*x1094))+(((-1.0)*x1093*x1095))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1097=((1.0)*sj6);
IkReal x1098=(r01*sj5);
IkReal x1099=(cj5*r00);
IkReal x1100=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*(IKcos(j9))))+(((-1.0)*x1097*x1098))+(((-1.0)*x1097*x1099))+((cj6*r02)));
evalcond[1]=((((0.987688482454592)*r02*sj6))+((x1098*x1100))+(IKsin(j9))+((x1099*x1100))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1101=((1.0)*sj6);
IkReal x1102=(r01*sj5);
IkReal x1103=(cj5*r00);
IkReal x1104=((0.987688482454592)*cj6);
CheckValue<IkReal> x1105=IKPowWithIntegerCheck(sj8,-1);
if(!x1105.valid){
continue;
}
if( IKabs(((x1105.value)*(((((0.987688482454592)*r02*sj6))+((x1102*x1104))+(((0.156433569372259)*r00*sj5))+((x1103*x1104))+(((-0.156433569372259)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r02))+(((-1.0)*x1101*x1102))+(((-1.0)*x1101*x1103)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1105.value)*(((((0.987688482454592)*r02*sj6))+((x1102*x1104))+(((0.156433569372259)*r00*sj5))+((x1103*x1104))+(((-0.156433569372259)*cj5*r01))))))+IKsqr((((cj6*r02))+(((-1.0)*x1101*x1102))+(((-1.0)*x1101*x1103))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x1105.value)*(((((0.987688482454592)*r02*sj6))+((x1102*x1104))+(((0.156433569372259)*r00*sj5))+((x1103*x1104))+(((-0.156433569372259)*cj5*r01))))), (((cj6*r02))+(((-1.0)*x1101*x1102))+(((-1.0)*x1101*x1103))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1106=IKsin(j9);
IkReal x1107=((0.987688482454592)*r01);
IkReal x1108=((1.0)*sj6);
IkReal x1109=(r01*sj5);
IkReal x1110=(cj5*r00);
IkReal x1111=((0.156433569372259)*cj6);
IkReal x1112=(r00*sj5);
IkReal x1113=(r02*sj6);
evalcond[0]=((((-1.0)*(IKcos(j9))))+(((-1.0)*x1108*x1109))+(((-1.0)*x1108*x1110))+((cj6*r02)));
evalcond[1]=(((x1109*x1111))+((cj5*x1107))+(((0.156433569372259)*x1113))+((x1110*x1111))+((cj8*x1106))+(((-0.987688482454592)*x1112)));
evalcond[2]=((((0.987688482454592)*x1113))+(((-1.0)*sj8*x1106))+(((0.156433569372259)*x1112))+((cj6*sj5*x1107))+(((0.987688482454592)*cj6*x1110))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1114=((1.0)*sj6);
IkReal x1115=(r01*sj5);
IkReal x1116=(cj5*r00);
IkReal x1117=((0.156433569372259)*cj6);
CheckValue<IkReal> x1118=IKPowWithIntegerCheck(cj8,-1);
if(!x1118.valid){
continue;
}
if( IKabs(((x1118.value)*(((((-1.0)*x1116*x1117))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1115*x1117)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1114*x1115))+(((-1.0)*x1114*x1116))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1118.value)*(((((-1.0)*x1116*x1117))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1115*x1117))))))+IKsqr(((((-1.0)*x1114*x1115))+(((-1.0)*x1114*x1116))+((cj6*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x1118.value)*(((((-1.0)*x1116*x1117))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1115*x1117))))), ((((-1.0)*x1114*x1115))+(((-1.0)*x1114*x1116))+((cj6*r02))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1119=IKsin(j9);
IkReal x1120=((0.987688482454592)*r01);
IkReal x1121=((1.0)*sj6);
IkReal x1122=(r01*sj5);
IkReal x1123=(cj5*r00);
IkReal x1124=((0.156433569372259)*cj6);
IkReal x1125=(r00*sj5);
IkReal x1126=(r02*sj6);
evalcond[0]=((((-1.0)*x1121*x1123))+(((-1.0)*x1121*x1122))+(((-1.0)*(IKcos(j9))))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*x1126))+((cj8*x1119))+((cj5*x1120))+((x1122*x1124))+((x1123*x1124))+(((-0.987688482454592)*x1125)));
evalcond[2]=((((0.987688482454592)*cj6*x1123))+((cj6*sj5*x1120))+(((-1.0)*sj8*x1119))+(((0.156433569372259)*x1125))+(((0.987688482454592)*x1126))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj7=0;
cj7=1.0;
j7=0;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=0;
cj7=1.0;
j7=0;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1127=(cj5*r00);
IkReal x1128=((0.156433569372259)*cj6);
IkReal x1129=(r01*sj5);
if( IKabs(((((-1.0)*cj6*r02))+((sj6*x1129))+((sj6*x1127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1127*x1128))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1128*x1129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r02))+((sj6*x1129))+((sj6*x1127))))+IKsqr(((((-1.0)*x1127*x1128))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1128*x1129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj6*r02))+((sj6*x1129))+((sj6*x1127))), ((((-1.0)*x1127*x1128))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1128*x1129))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1130=((1.0)*sj6);
IkReal x1131=(r01*sj5);
IkReal x1132=(cj5*r00);
IkReal x1133=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x1130*x1132))+(((-1.0)*x1130*x1131))+(IKsin(j9))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*r02*sj6))+((x1131*x1133))+(IKcos(j9))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))+((x1132*x1133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1134=((1.0)*sj6);
IkReal x1135=(r01*sj5);
IkReal x1136=(cj5*r00);
IkReal x1137=((0.156433569372259)*cj6);
if( IKabs(((((-1.0)*x1134*x1136))+(((-1.0)*x1134*x1135))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1136*x1137))+(((-1.0)*x1135*x1137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1134*x1136))+(((-1.0)*x1134*x1135))+((cj6*r02))))+IKsqr(((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1136*x1137))+(((-1.0)*x1135*x1137))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x1134*x1136))+(((-1.0)*x1134*x1135))+((cj6*r02))), ((((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1136*x1137))+(((-1.0)*x1135*x1137))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1138=((1.0)*sj6);
IkReal x1139=(r01*sj5);
IkReal x1140=(cj5*r00);
IkReal x1141=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x1138*x1139))+((cj6*r02))+(((-1.0)*(IKsin(j9))))+(((-1.0)*x1138*x1140)));
evalcond[1]=(((x1140*x1141))+(((0.156433569372259)*r02*sj6))+(IKcos(j9))+(((-0.987688482454592)*r00*sj5))+((x1139*x1141))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1142=(r00*sj5);
IkReal x1143=(cj5*r01);
IkReal x1144=(r02*sj6);
IkReal x1145=((0.156433569372259)*cj6);
IkReal x1146=(cj5*r00);
IkReal x1147=(r01*sj5);
IkReal x1148=((0.987688482454592)*cj6);
if( IKabs(((((0.156433569372259)*x1142))+((x1146*x1148))+(((0.987688482454592)*x1144))+((x1147*x1148))+(((-0.156433569372259)*x1143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1145*x1146))+(((-1.0)*x1145*x1147))+(((0.987688482454592)*x1142))+(((-0.987688482454592)*x1143))+(((-0.156433569372259)*x1144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.156433569372259)*x1142))+((x1146*x1148))+(((0.987688482454592)*x1144))+((x1147*x1148))+(((-0.156433569372259)*x1143))))+IKsqr(((((-1.0)*x1145*x1146))+(((-1.0)*x1145*x1147))+(((0.987688482454592)*x1142))+(((-0.987688482454592)*x1143))+(((-0.156433569372259)*x1144))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.156433569372259)*x1142))+((x1146*x1148))+(((0.987688482454592)*x1144))+((x1147*x1148))+(((-0.156433569372259)*x1143))), ((((-1.0)*x1145*x1146))+(((-1.0)*x1145*x1147))+(((0.987688482454592)*x1142))+(((-0.987688482454592)*x1143))+(((-0.156433569372259)*x1144))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1149=((0.987688482454592)*sj5);
IkReal x1150=(cj5*r01);
IkReal x1151=(cj6*r01);
IkReal x1152=((0.156433569372259)*r00);
IkReal x1153=(cj5*cj6);
IkReal x1154=(r02*sj6);
evalcond[0]=((((-1.0)*r00*x1149))+((x1152*x1153))+(IKcos(j9))+(((0.156433569372259)*sj5*x1151))+(((0.987688482454592)*x1150))+(((0.156433569372259)*x1154)));
evalcond[1]=(((x1149*x1151))+(((0.987688482454592)*r00*x1153))+((sj5*x1152))+(((0.987688482454592)*x1154))+(((-1.0)*(IKsin(j9))))+(((-0.156433569372259)*x1150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1155=(r00*sj5);
IkReal x1156=(cj5*r01);
IkReal x1157=(r02*sj6);
IkReal x1158=((0.156433569372259)*cj6);
IkReal x1159=(cj5*r00);
IkReal x1160=(r01*sj5);
IkReal x1161=((0.987688482454592)*cj6);
if( IKabs(((((-1.0)*x1159*x1161))+(((-0.987688482454592)*x1157))+(((-1.0)*x1160*x1161))+(((0.156433569372259)*x1156))+(((-0.156433569372259)*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1158*x1160))+(((-1.0)*x1158*x1159))+(((-0.987688482454592)*x1156))+(((0.987688482454592)*x1155))+(((-0.156433569372259)*x1157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1159*x1161))+(((-0.987688482454592)*x1157))+(((-1.0)*x1160*x1161))+(((0.156433569372259)*x1156))+(((-0.156433569372259)*x1155))))+IKsqr(((((-1.0)*x1158*x1160))+(((-1.0)*x1158*x1159))+(((-0.987688482454592)*x1156))+(((0.987688482454592)*x1155))+(((-0.156433569372259)*x1157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x1159*x1161))+(((-0.987688482454592)*x1157))+(((-1.0)*x1160*x1161))+(((0.156433569372259)*x1156))+(((-0.156433569372259)*x1155))), ((((-1.0)*x1158*x1160))+(((-1.0)*x1158*x1159))+(((-0.987688482454592)*x1156))+(((0.987688482454592)*x1155))+(((-0.156433569372259)*x1157))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1162=(r00*sj5);
IkReal x1163=(cj5*r01);
IkReal x1164=(r02*sj6);
IkReal x1165=((0.156433569372259)*cj6);
IkReal x1166=(cj5*r00);
IkReal x1167=(r01*sj5);
IkReal x1168=((0.987688482454592)*cj6);
evalcond[0]=((((0.987688482454592)*x1164))+((x1166*x1168))+(((-0.156433569372259)*x1163))+(IKsin(j9))+(((0.156433569372259)*x1162))+((x1167*x1168)));
evalcond[1]=(((x1165*x1166))+((x1165*x1167))+(((-0.987688482454592)*x1162))+(((0.987688482454592)*x1163))+(IKcos(j9))+(((0.156433569372259)*x1164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1169=(r00*sj5);
IkReal x1170=(cj5*r01);
IkReal x1171=(r02*sj6);
IkReal x1172=((0.156433569372259)*cj6);
IkReal x1173=(cj5*r00);
IkReal x1174=(r01*sj5);
IkReal x1175=((0.987688482454592)*cj6);
CheckValue<IkReal> x1176=IKPowWithIntegerCheck(sj8,-1);
if(!x1176.valid){
continue;
}
if( IKabs(((x1176.value)*(((((0.987688482454592)*x1171))+((x1173*x1175))+((x1174*x1175))+(((-0.156433569372259)*x1170))+(((0.156433569372259)*x1169)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.987688482454592)*x1169))+(((-0.987688482454592)*x1170))+(((-0.156433569372259)*x1171))+(((-1.0)*x1172*x1173))+(((-1.0)*x1172*x1174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1176.value)*(((((0.987688482454592)*x1171))+((x1173*x1175))+((x1174*x1175))+(((-0.156433569372259)*x1170))+(((0.156433569372259)*x1169))))))+IKsqr(((((0.987688482454592)*x1169))+(((-0.987688482454592)*x1170))+(((-0.156433569372259)*x1171))+(((-1.0)*x1172*x1173))+(((-1.0)*x1172*x1174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x1176.value)*(((((0.987688482454592)*x1171))+((x1173*x1175))+((x1174*x1175))+(((-0.156433569372259)*x1170))+(((0.156433569372259)*x1169))))), ((((0.987688482454592)*x1169))+(((-0.987688482454592)*x1170))+(((-0.156433569372259)*x1171))+(((-1.0)*x1172*x1173))+(((-1.0)*x1172*x1174))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1177=IKsin(j9);
IkReal x1178=((0.987688482454592)*r01);
IkReal x1179=((1.0)*sj6);
IkReal x1180=(r01*sj5);
IkReal x1181=(cj5*r00);
IkReal x1182=((0.156433569372259)*cj6);
IkReal x1183=(r00*sj5);
IkReal x1184=(r02*sj6);
evalcond[0]=(((cj8*x1177))+(((-1.0)*x1179*x1181))+(((-1.0)*x1179*x1180))+((cj6*r02)));
evalcond[1]=(((x1180*x1182))+(((0.156433569372259)*x1184))+((cj5*x1178))+(IKcos(j9))+((x1181*x1182))+(((-0.987688482454592)*x1183)));
evalcond[2]=((((0.987688482454592)*x1184))+((cj6*sj5*x1178))+(((0.987688482454592)*cj6*x1181))+(((0.156433569372259)*x1183))+(((-1.0)*sj8*x1177))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1185=(cj5*r00);
IkReal x1186=((0.156433569372259)*cj6);
IkReal x1187=(r01*sj5);
CheckValue<IkReal> x1188=IKPowWithIntegerCheck(cj8,-1);
if(!x1188.valid){
continue;
}
if( IKabs(((x1188.value)*(((((-1.0)*cj6*r02))+((sj6*x1187))+((sj6*x1185)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1186*x1187))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1185*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1188.value)*(((((-1.0)*cj6*r02))+((sj6*x1187))+((sj6*x1185))))))+IKsqr(((((-1.0)*x1186*x1187))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1185*x1186))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x1188.value)*(((((-1.0)*cj6*r02))+((sj6*x1187))+((sj6*x1185))))), ((((-1.0)*x1186*x1187))+(((0.987688482454592)*r00*sj5))+(((-0.987688482454592)*cj5*r01))+(((-0.156433569372259)*r02*sj6))+(((-1.0)*x1185*x1186))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1189=IKsin(j9);
IkReal x1190=((0.987688482454592)*r01);
IkReal x1191=((1.0)*sj6);
IkReal x1192=(r01*sj5);
IkReal x1193=(cj5*r00);
IkReal x1194=((0.156433569372259)*cj6);
IkReal x1195=(r00*sj5);
IkReal x1196=(r02*sj6);
evalcond[0]=((((-1.0)*x1191*x1192))+(((-1.0)*x1191*x1193))+((cj6*r02))+((cj8*x1189)));
evalcond[1]=((((0.156433569372259)*x1196))+((cj5*x1190))+(IKcos(j9))+((x1192*x1194))+((x1193*x1194))+(((-0.987688482454592)*x1195)));
evalcond[2]=((((-1.0)*sj8*x1189))+(((0.987688482454592)*cj6*x1193))+(((0.156433569372259)*x1195))+((cj6*sj5*x1190))+(((0.987688482454592)*x1196))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j9eval[0]=cj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1197=((1.0)*sj6);
IkReal x1198=(r01*sj5);
IkReal x1199=(cj5*r00);
IkReal x1200=((0.156433569372259)*cj6);
if( IKabs(((((-1.0)*x1197*x1198))+(((-1.0)*x1197*x1199))+((cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*r02*sj6))+((x1199*x1200))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))+((x1198*x1200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1197*x1198))+(((-1.0)*x1197*x1199))+((cj6*r02))))+IKsqr(((((0.156433569372259)*r02*sj6))+((x1199*x1200))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))+((x1198*x1200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x1197*x1198))+(((-1.0)*x1197*x1199))+((cj6*r02))), ((((0.156433569372259)*r02*sj6))+((x1199*x1200))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))+((x1198*x1200))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1201=((1.0)*sj6);
IkReal x1202=(r01*sj5);
IkReal x1203=(cj5*r00);
IkReal x1204=((0.156433569372259)*cj6);
evalcond[0]=(((cj6*r02))+(((-1.0)*x1201*x1202))+(((-1.0)*x1201*x1203))+(((-1.0)*(IKsin(j9)))));
evalcond[1]=((((0.156433569372259)*r02*sj6))+(((-1.0)*(IKcos(j9))))+((x1202*x1204))+((x1203*x1204))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1205=(cj5*r00);
IkReal x1206=((0.156433569372259)*cj6);
IkReal x1207=(r01*sj5);
if( IKabs(((((-1.0)*cj6*r02))+((sj6*x1205))+((sj6*x1207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x1205*x1206))+((x1206*x1207))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r02))+((sj6*x1205))+((sj6*x1207))))+IKsqr(((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x1205*x1206))+((x1206*x1207))+(((0.987688482454592)*cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj6*r02))+((sj6*x1205))+((sj6*x1207))), ((((0.156433569372259)*r02*sj6))+(((-0.987688482454592)*r00*sj5))+((x1205*x1206))+((x1206*x1207))+(((0.987688482454592)*cj5*r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1208=((1.0)*sj6);
IkReal x1209=(r01*sj5);
IkReal x1210=(cj5*r00);
IkReal x1211=((0.156433569372259)*cj6);
evalcond[0]=((((-1.0)*x1208*x1210))+(IKsin(j9))+((cj6*r02))+(((-1.0)*x1208*x1209)));
evalcond[1]=(((x1210*x1211))+(((0.156433569372259)*r02*sj6))+(((-1.0)*(IKcos(j9))))+(((-0.987688482454592)*r00*sj5))+((x1209*x1211))+(((0.987688482454592)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1212=(r00*sj5);
IkReal x1213=(cj5*r01);
IkReal x1214=(r02*sj6);
IkReal x1215=((0.156433569372259)*cj6);
IkReal x1216=(cj5*r00);
IkReal x1217=(r01*sj5);
IkReal x1218=((0.987688482454592)*cj6);
if( IKabs(((((0.156433569372259)*x1212))+(((-0.156433569372259)*x1213))+(((0.987688482454592)*x1214))+((x1216*x1218))+((x1217*x1218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*x1214))+(((-0.987688482454592)*x1212))+(((0.987688482454592)*x1213))+((x1215*x1216))+((x1215*x1217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.156433569372259)*x1212))+(((-0.156433569372259)*x1213))+(((0.987688482454592)*x1214))+((x1216*x1218))+((x1217*x1218))))+IKsqr(((((0.156433569372259)*x1214))+(((-0.987688482454592)*x1212))+(((0.987688482454592)*x1213))+((x1215*x1216))+((x1215*x1217))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.156433569372259)*x1212))+(((-0.156433569372259)*x1213))+(((0.987688482454592)*x1214))+((x1216*x1218))+((x1217*x1218))), ((((0.156433569372259)*x1214))+(((-0.987688482454592)*x1212))+(((0.987688482454592)*x1213))+((x1215*x1216))+((x1215*x1217))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1219=(r00*sj5);
IkReal x1220=(cj5*r01);
IkReal x1221=(r02*sj6);
IkReal x1222=((0.156433569372259)*cj6);
IkReal x1223=(cj5*r00);
IkReal x1224=(r01*sj5);
IkReal x1225=((0.987688482454592)*cj6);
evalcond[0]=((((-0.156433569372259)*x1220))+((x1223*x1225))+(((0.156433569372259)*x1219))+((x1224*x1225))+(((0.987688482454592)*x1221))+(((-1.0)*(IKsin(j9)))));
evalcond[1]=((((-1.0)*(IKcos(j9))))+(((0.156433569372259)*x1221))+(((0.987688482454592)*x1220))+(((-0.987688482454592)*x1219))+((x1222*x1224))+((x1222*x1223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1226=(r00*sj5);
IkReal x1227=(cj5*r01);
IkReal x1228=(r02*sj6);
IkReal x1229=((0.156433569372259)*cj6);
IkReal x1230=(cj5*r00);
IkReal x1231=(r01*sj5);
IkReal x1232=((0.987688482454592)*cj6);
if( IKabs(((((-0.156433569372259)*x1226))+(((0.156433569372259)*x1227))+(((-1.0)*x1230*x1232))+(((-0.987688482454592)*x1228))+(((-1.0)*x1231*x1232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*x1228))+(((-0.987688482454592)*x1226))+(((0.987688482454592)*x1227))+((x1229*x1230))+((x1229*x1231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*x1226))+(((0.156433569372259)*x1227))+(((-1.0)*x1230*x1232))+(((-0.987688482454592)*x1228))+(((-1.0)*x1231*x1232))))+IKsqr(((((0.156433569372259)*x1228))+(((-0.987688482454592)*x1226))+(((0.987688482454592)*x1227))+((x1229*x1230))+((x1229*x1231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*x1226))+(((0.156433569372259)*x1227))+(((-1.0)*x1230*x1232))+(((-0.987688482454592)*x1228))+(((-1.0)*x1231*x1232))), ((((0.156433569372259)*x1228))+(((-0.987688482454592)*x1226))+(((0.987688482454592)*x1227))+((x1229*x1230))+((x1229*x1231))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x1233=(r00*sj5);
IkReal x1234=(cj5*r01);
IkReal x1235=(r02*sj6);
IkReal x1236=((0.156433569372259)*cj6);
IkReal x1237=(cj5*r00);
IkReal x1238=(r01*sj5);
IkReal x1239=((0.987688482454592)*cj6);
evalcond[0]=((((-0.156433569372259)*x1234))+(((0.156433569372259)*x1233))+(IKsin(j9))+(((0.987688482454592)*x1235))+((x1238*x1239))+((x1237*x1239)));
evalcond[1]=((((-0.987688482454592)*x1233))+(((-1.0)*(IKcos(j9))))+(((0.156433569372259)*x1235))+(((0.987688482454592)*x1234))+((x1236*x1237))+((x1236*x1238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1240=(r00*sj5);
IkReal x1241=(cj5*r01);
IkReal x1242=(r02*sj6);
IkReal x1243=((0.156433569372259)*cj6);
IkReal x1244=(cj5*r00);
IkReal x1245=(r01*sj5);
IkReal x1246=((0.987688482454592)*cj6);
CheckValue<IkReal> x1247=IKPowWithIntegerCheck(sj8,-1);
if(!x1247.valid){
continue;
}
if( IKabs(((x1247.value)*(((((-0.156433569372259)*x1241))+(((0.156433569372259)*x1240))+(((0.987688482454592)*x1242))+((x1244*x1246))+((x1245*x1246)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*x1242))+(((-0.987688482454592)*x1240))+(((0.987688482454592)*x1241))+((x1243*x1245))+((x1243*x1244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1247.value)*(((((-0.156433569372259)*x1241))+(((0.156433569372259)*x1240))+(((0.987688482454592)*x1242))+((x1244*x1246))+((x1245*x1246))))))+IKsqr(((((0.156433569372259)*x1242))+(((-0.987688482454592)*x1240))+(((0.987688482454592)*x1241))+((x1243*x1245))+((x1243*x1244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x1247.value)*(((((-0.156433569372259)*x1241))+(((0.156433569372259)*x1240))+(((0.987688482454592)*x1242))+((x1244*x1246))+((x1245*x1246))))), ((((0.156433569372259)*x1242))+(((-0.987688482454592)*x1240))+(((0.987688482454592)*x1241))+((x1243*x1245))+((x1243*x1244))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1248=IKsin(j9);
IkReal x1249=((0.987688482454592)*r01);
IkReal x1250=((1.0)*sj6);
IkReal x1251=(r01*sj5);
IkReal x1252=(cj5*r00);
IkReal x1253=((0.156433569372259)*cj6);
IkReal x1254=(r00*sj5);
IkReal x1255=(r02*sj6);
IkReal x1256=((1.0)*x1248);
evalcond[0]=((((-1.0)*cj8*x1256))+((cj6*r02))+(((-1.0)*x1250*x1252))+(((-1.0)*x1250*x1251)));
evalcond[1]=((((0.156433569372259)*x1255))+((cj5*x1249))+(((-1.0)*(IKcos(j9))))+((x1252*x1253))+((x1251*x1253))+(((-0.987688482454592)*x1254)));
evalcond[2]=((((0.156433569372259)*x1254))+(((0.987688482454592)*x1255))+((cj6*sj5*x1249))+(((-1.0)*sj8*x1256))+(((0.987688482454592)*cj6*x1252))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1257=((1.0)*sj6);
IkReal x1258=(r01*sj5);
IkReal x1259=(cj5*r00);
IkReal x1260=((0.156433569372259)*cj6);
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(cj8,-1);
if(!x1261.valid){
continue;
}
if( IKabs(((x1261.value)*(((((-1.0)*x1257*x1258))+(((-1.0)*x1257*x1259))+((cj6*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.156433569372259)*r02*sj6))+((x1258*x1260))+((x1259*x1260))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1261.value)*(((((-1.0)*x1257*x1258))+(((-1.0)*x1257*x1259))+((cj6*r02))))))+IKsqr(((((0.156433569372259)*r02*sj6))+((x1258*x1260))+((x1259*x1260))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x1261.value)*(((((-1.0)*x1257*x1258))+(((-1.0)*x1257*x1259))+((cj6*r02))))), ((((0.156433569372259)*r02*sj6))+((x1258*x1260))+((x1259*x1260))+(((-0.987688482454592)*r00*sj5))+(((0.987688482454592)*cj5*r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1262=IKsin(j9);
IkReal x1263=((0.987688482454592)*r01);
IkReal x1264=((1.0)*sj6);
IkReal x1265=(r01*sj5);
IkReal x1266=(cj5*r00);
IkReal x1267=((0.156433569372259)*cj6);
IkReal x1268=(r00*sj5);
IkReal x1269=(r02*sj6);
IkReal x1270=((1.0)*x1262);
evalcond[0]=((((-1.0)*x1264*x1265))+(((-1.0)*x1264*x1266))+(((-1.0)*cj8*x1270))+((cj6*r02)));
evalcond[1]=((((0.156433569372259)*x1269))+(((-1.0)*(IKcos(j9))))+((x1266*x1267))+((cj5*x1263))+((x1265*x1267))+(((-0.987688482454592)*x1268)));
evalcond[2]=((((0.156433569372259)*x1268))+((cj6*sj5*x1263))+(((0.987688482454592)*x1269))+(((0.987688482454592)*cj6*x1266))+(((-1.0)*sj8*x1270))+(((-0.156433569372259)*cj5*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j9eval[0]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j9eval[0]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1271=(r00*sj5);
IkReal x1272=(cj5*r01);
IkReal x1273=(r02*sj6);
IkReal x1274=((0.156433569372259)*cj6);
IkReal x1275=(cj5*r00);
IkReal x1276=(r01*sj5);
IkReal x1277=((0.987688482454592)*cj6);
CheckValue<IkReal> x1278=IKPowWithIntegerCheck(cj7,-1);
if(!x1278.valid){
continue;
}
if( IKabs((((x1276*x1277))+((x1275*x1277))+(((0.987688482454592)*x1273))+(((0.156433569372259)*x1271))+(((-0.156433569372259)*x1272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1278.value)*(((((0.987688482454592)*x1271))+(((-0.987688482454592)*x1272))+(((-1.0)*x1274*x1275))+(((-1.0)*x1274*x1276))+(((-0.156433569372259)*x1273)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1276*x1277))+((x1275*x1277))+(((0.987688482454592)*x1273))+(((0.156433569372259)*x1271))+(((-0.156433569372259)*x1272))))+IKsqr(((x1278.value)*(((((0.987688482454592)*x1271))+(((-0.987688482454592)*x1272))+(((-1.0)*x1274*x1275))+(((-1.0)*x1274*x1276))+(((-0.156433569372259)*x1273))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x1276*x1277))+((x1275*x1277))+(((0.987688482454592)*x1273))+(((0.156433569372259)*x1271))+(((-0.156433569372259)*x1272))), ((x1278.value)*(((((0.987688482454592)*x1271))+(((-0.987688482454592)*x1272))+(((-1.0)*x1274*x1275))+(((-1.0)*x1274*x1276))+(((-0.156433569372259)*x1273))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1279=IKcos(j9);
IkReal x1280=(r00*sj5);
IkReal x1281=((1.0)*sj6);
IkReal x1282=(r01*sj5);
IkReal x1283=(cj5*r00);
IkReal x1284=(r02*sj6);
IkReal x1285=(cj5*r01);
IkReal x1286=((0.156433569372259)*cj6);
IkReal x1287=((0.987688482454592)*cj6);
evalcond[0]=(((sj7*x1279))+((cj6*r02))+(((-1.0)*x1281*x1283))+(((-1.0)*x1281*x1282)));
evalcond[1]=((((0.156433569372259)*x1280))+(((-0.156433569372259)*x1285))+((x1283*x1287))+(((0.987688482454592)*x1284))+((x1282*x1287))+(((-1.0)*(IKsin(j9)))));
evalcond[2]=(((cj7*x1279))+(((0.156433569372259)*x1284))+((x1283*x1286))+(((0.987688482454592)*x1285))+(((-0.987688482454592)*x1280))+((x1282*x1286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1288=(cj5*r00);
IkReal x1289=((0.987688482454592)*cj6);
IkReal x1290=(r01*sj5);
CheckValue<IkReal> x1291=IKPowWithIntegerCheck(sj7,-1);
if(!x1291.valid){
continue;
}
if( IKabs(((((0.987688482454592)*r02*sj6))+((x1288*x1289))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))+((x1289*x1290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1291.value)*((((sj6*x1290))+(((-1.0)*cj6*r02))+((sj6*x1288)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.987688482454592)*r02*sj6))+((x1288*x1289))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))+((x1289*x1290))))+IKsqr(((x1291.value)*((((sj6*x1290))+(((-1.0)*cj6*r02))+((sj6*x1288))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((0.987688482454592)*r02*sj6))+((x1288*x1289))+(((0.156433569372259)*r00*sj5))+(((-0.156433569372259)*cj5*r01))+((x1289*x1290))), ((x1291.value)*((((sj6*x1290))+(((-1.0)*cj6*r02))+((sj6*x1288))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1292=IKcos(j9);
IkReal x1293=(r00*sj5);
IkReal x1294=((1.0)*sj6);
IkReal x1295=(r01*sj5);
IkReal x1296=(cj5*r00);
IkReal x1297=(r02*sj6);
IkReal x1298=(cj5*r01);
IkReal x1299=((0.156433569372259)*cj6);
IkReal x1300=((0.987688482454592)*cj6);
evalcond[0]=(((sj7*x1292))+((cj6*r02))+(((-1.0)*x1294*x1295))+(((-1.0)*x1294*x1296)));
evalcond[1]=((((0.987688482454592)*x1297))+((x1295*x1300))+(((0.156433569372259)*x1293))+((x1296*x1300))+(((-0.156433569372259)*x1298))+(((-1.0)*(IKsin(j9)))));
evalcond[2]=((((-0.987688482454592)*x1293))+(((0.987688482454592)*x1298))+((x1296*x1299))+((x1295*x1299))+(((0.156433569372259)*x1297))+((cj7*x1292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j9eval[0]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j9eval[0]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1301=(r00*sj5);
IkReal x1302=(cj5*r01);
IkReal x1303=(r02*sj6);
IkReal x1304=((0.156433569372259)*cj6);
IkReal x1305=(cj5*r00);
IkReal x1306=(r01*sj5);
IkReal x1307=((0.987688482454592)*cj6);
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(cj7,-1);
if(!x1308.valid){
continue;
}
if( IKabs(((((-1.0)*x1306*x1307))+(((-0.987688482454592)*x1303))+(((-0.156433569372259)*x1301))+(((0.156433569372259)*x1302))+(((-1.0)*x1305*x1307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1308.value)*(((((-0.987688482454592)*x1302))+(((-0.156433569372259)*x1303))+(((0.987688482454592)*x1301))+(((-1.0)*x1304*x1306))+(((-1.0)*x1304*x1305)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1306*x1307))+(((-0.987688482454592)*x1303))+(((-0.156433569372259)*x1301))+(((0.156433569372259)*x1302))+(((-1.0)*x1305*x1307))))+IKsqr(((x1308.value)*(((((-0.987688482454592)*x1302))+(((-0.156433569372259)*x1303))+(((0.987688482454592)*x1301))+(((-1.0)*x1304*x1306))+(((-1.0)*x1304*x1305))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x1306*x1307))+(((-0.987688482454592)*x1303))+(((-0.156433569372259)*x1301))+(((0.156433569372259)*x1302))+(((-1.0)*x1305*x1307))), ((x1308.value)*(((((-0.987688482454592)*x1302))+(((-0.156433569372259)*x1303))+(((0.987688482454592)*x1301))+(((-1.0)*x1304*x1306))+(((-1.0)*x1304*x1305))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1309=IKcos(j9);
IkReal x1310=(r00*sj5);
IkReal x1311=((1.0)*sj6);
IkReal x1312=(r01*sj5);
IkReal x1313=(cj5*r00);
IkReal x1314=(r02*sj6);
IkReal x1315=(cj5*r01);
IkReal x1316=((0.156433569372259)*cj6);
IkReal x1317=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*x1311*x1312))+(((-1.0)*x1311*x1313))+((cj6*r02))+((sj7*x1309)));
evalcond[1]=(((x1313*x1317))+(IKsin(j9))+(((0.156433569372259)*x1310))+(((-0.156433569372259)*x1315))+(((0.987688482454592)*x1314))+((x1312*x1317)));
evalcond[2]=(((x1313*x1316))+(((0.156433569372259)*x1314))+(((0.987688482454592)*x1315))+((cj7*x1309))+((x1312*x1316))+(((-0.987688482454592)*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1318=(cj5*r00);
IkReal x1319=((0.987688482454592)*cj6);
IkReal x1320=(r01*sj5);
CheckValue<IkReal> x1321=IKPowWithIntegerCheck(sj7,-1);
if(!x1321.valid){
continue;
}
if( IKabs(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x1318*x1319))+(((-1.0)*x1319*x1320))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1321.value)*(((((-1.0)*cj6*r02))+((sj6*x1320))+((sj6*x1318)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x1318*x1319))+(((-1.0)*x1319*x1320))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))))+IKsqr(((x1321.value)*(((((-1.0)*cj6*r02))+((sj6*x1320))+((sj6*x1318))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-0.156433569372259)*r00*sj5))+(((-1.0)*x1318*x1319))+(((-1.0)*x1319*x1320))+(((-0.987688482454592)*r02*sj6))+(((0.156433569372259)*cj5*r01))), ((x1321.value)*(((((-1.0)*cj6*r02))+((sj6*x1320))+((sj6*x1318))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1322=IKcos(j9);
IkReal x1323=(r00*sj5);
IkReal x1324=((1.0)*sj6);
IkReal x1325=(r01*sj5);
IkReal x1326=(cj5*r00);
IkReal x1327=(r02*sj6);
IkReal x1328=(cj5*r01);
IkReal x1329=((0.156433569372259)*cj6);
IkReal x1330=((0.987688482454592)*cj6);
evalcond[0]=((((-1.0)*x1324*x1326))+(((-1.0)*x1324*x1325))+((cj6*r02))+((sj7*x1322)));
evalcond[1]=((((0.156433569372259)*x1323))+(((-0.156433569372259)*x1328))+((x1325*x1330))+(IKsin(j9))+(((0.987688482454592)*x1327))+((x1326*x1330)));
evalcond[2]=((((-0.987688482454592)*x1323))+(((0.156433569372259)*x1327))+((x1326*x1329))+(((0.987688482454592)*x1328))+((x1325*x1329))+((cj7*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1340=IKPowWithIntegerCheck(sj8,-1);
if(!x1340.valid){
continue;
}
IkReal x1331=x1340.value;
IkReal x1332=(cj8*sj7);
IkReal x1333=(r02*sj6);
IkReal x1334=((0.156433569372259)*sj8);
IkReal x1335=(r00*sj5);
IkReal x1336=((0.987688482454592)*sj8);
IkReal x1337=((0.156433569372259)*cj5*r01);
IkReal x1338=(cj6*r01*sj5);
IkReal x1339=((0.987688482454592)*cj5*cj6*r00);
CheckValue<IkReal> x1341=IKPowWithIntegerCheck(cj7,-1);
if(!x1341.valid){
continue;
}
if( IKabs((x1331*((x1339+(((0.987688482454592)*x1338))+(((0.987688482454592)*x1333))+(((-1.0)*x1337))+(((0.156433569372259)*x1335)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1331*(x1341.value)*(((((0.987688482454592)*x1332*x1338))+(((0.987688482454592)*x1332*x1333))+(((-1.0)*x1334*x1338))+((x1335*x1336))+(((-1.0)*cj5*r01*x1336))+(((0.156433569372259)*x1332*x1335))+(((-1.0)*x1333*x1334))+(((-1.0)*x1332*x1337))+(((-1.0)*cj5*cj6*r00*x1334))+((x1332*x1339)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1331*((x1339+(((0.987688482454592)*x1338))+(((0.987688482454592)*x1333))+(((-1.0)*x1337))+(((0.156433569372259)*x1335))))))+IKsqr((x1331*(x1341.value)*(((((0.987688482454592)*x1332*x1338))+(((0.987688482454592)*x1332*x1333))+(((-1.0)*x1334*x1338))+((x1335*x1336))+(((-1.0)*cj5*r01*x1336))+(((0.156433569372259)*x1332*x1335))+(((-1.0)*x1333*x1334))+(((-1.0)*x1332*x1337))+(((-1.0)*cj5*cj6*r00*x1334))+((x1332*x1339))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x1331*((x1339+(((0.987688482454592)*x1338))+(((0.987688482454592)*x1333))+(((-1.0)*x1337))+(((0.156433569372259)*x1335))))), (x1331*(x1341.value)*(((((0.987688482454592)*x1332*x1338))+(((0.987688482454592)*x1332*x1333))+(((-1.0)*x1334*x1338))+((x1335*x1336))+(((-1.0)*cj5*r01*x1336))+(((0.156433569372259)*x1332*x1335))+(((-1.0)*x1333*x1334))+(((-1.0)*x1332*x1337))+(((-1.0)*cj5*cj6*r00*x1334))+((x1332*x1339))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1342=IKsin(j9);
IkReal x1343=IKcos(j9);
IkReal x1344=((0.987688482454592)*sj5);
IkReal x1345=((1.0)*sj6);
IkReal x1346=(r01*sj5);
IkReal x1347=(cj5*r00);
IkReal x1348=((0.156433569372259)*cj6);
IkReal x1349=(r02*sj6);
IkReal x1350=(cj5*r01);
IkReal x1351=(cj8*x1342);
evalcond[0]=(((sj7*x1343))+((cj7*x1351))+((cj6*r02))+(((-1.0)*x1345*x1346))+(((-1.0)*x1345*x1347)));
evalcond[1]=((((0.987688482454592)*x1349))+((cj6*r01*x1344))+(((-0.156433569372259)*x1350))+(((0.987688482454592)*cj6*x1347))+(((-1.0)*sj8*x1342))+(((0.156433569372259)*r00*sj5)));
evalcond[2]=((((0.987688482454592)*x1350))+((x1346*x1348))+(((0.156433569372259)*x1349))+(((-1.0)*r00*x1344))+((x1347*x1348))+(((-1.0)*sj7*x1351))+((cj7*x1343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(sj8,-1);
if(!x1362.valid){
continue;
}
IkReal x1352=x1362.value;
IkReal x1353=((0.156433569372259)*sj5);
IkReal x1354=(r01*sj5);
IkReal x1355=(sj6*sj8);
IkReal x1356=((0.987688482454592)*cj6);
IkReal x1357=(cj7*cj8);
IkReal x1358=(cj5*r00);
IkReal x1359=(r00*x1357);
IkReal x1360=((0.987688482454592)*r02*sj6);
IkReal x1361=((0.156433569372259)*cj5*r01);
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(sj7,-1);
if(!x1363.valid){
continue;
}
if( IKabs((x1352*((x1360+((x1354*x1356))+((r00*x1353))+((x1356*x1358))+(((-1.0)*x1361)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1352*(x1363.value)*((((x1357*x1361))+((x1355*x1358))+((x1354*x1355))+(((-1.0)*x1356*x1357*x1358))+(((-1.0)*cj6*r02*sj8))+(((-1.0)*x1357*x1360))+(((-1.0)*x1354*x1356*x1357))+(((-1.0)*x1353*x1359)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1352*((x1360+((x1354*x1356))+((r00*x1353))+((x1356*x1358))+(((-1.0)*x1361))))))+IKsqr((x1352*(x1363.value)*((((x1357*x1361))+((x1355*x1358))+((x1354*x1355))+(((-1.0)*x1356*x1357*x1358))+(((-1.0)*cj6*r02*sj8))+(((-1.0)*x1357*x1360))+(((-1.0)*x1354*x1356*x1357))+(((-1.0)*x1353*x1359))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x1352*((x1360+((x1354*x1356))+((r00*x1353))+((x1356*x1358))+(((-1.0)*x1361))))), (x1352*(x1363.value)*((((x1357*x1361))+((x1355*x1358))+((x1354*x1355))+(((-1.0)*x1356*x1357*x1358))+(((-1.0)*cj6*r02*sj8))+(((-1.0)*x1357*x1360))+(((-1.0)*x1354*x1356*x1357))+(((-1.0)*x1353*x1359))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1364=IKsin(j9);
IkReal x1365=IKcos(j9);
IkReal x1366=((0.987688482454592)*sj5);
IkReal x1367=((1.0)*sj6);
IkReal x1368=(r01*sj5);
IkReal x1369=(cj5*r00);
IkReal x1370=((0.156433569372259)*cj6);
IkReal x1371=(r02*sj6);
IkReal x1372=(cj5*r01);
IkReal x1373=(cj8*x1364);
evalcond[0]=(((cj6*r02))+(((-1.0)*x1367*x1368))+(((-1.0)*x1367*x1369))+((cj7*x1373))+((sj7*x1365)));
evalcond[1]=(((cj6*r01*x1366))+(((-1.0)*sj8*x1364))+(((0.987688482454592)*cj6*x1369))+(((-0.156433569372259)*x1372))+(((0.987688482454592)*x1371))+(((0.156433569372259)*r00*sj5)));
evalcond[2]=((((0.987688482454592)*x1372))+((cj7*x1365))+(((-1.0)*r00*x1366))+(((0.156433569372259)*x1371))+((x1368*x1370))+((x1369*x1370))+(((-1.0)*sj7*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1374=(cj6*sj7);
IkReal x1375=((1.0)*r02);
IkReal x1376=(cj5*cj7);
IkReal x1377=((0.987688482454592)*r01);
IkReal x1378=((0.156433569372259)*cj6);
IkReal x1379=(cj5*sj7);
IkReal x1380=(sj5*sj7);
IkReal x1381=(r01*sj6);
IkReal x1382=((0.987688482454592)*r00);
IkReal x1383=(r01*sj5);
IkReal x1384=(r00*sj6);
IkReal x1385=(cj7*sj5);
IkReal x1386=((0.156433569372259)*r02*sj6);
CheckValue<IkReal> x1387=IKPowWithIntegerCheck(cj8,-1);
if(!x1387.valid){
continue;
}
if( IKabs(((x1387.value)*((((x1381*x1385))+((sj7*x1386))+(((-1.0)*cj6*cj7*x1375))+((x1377*x1379))+((x1376*x1384))+(((-1.0)*x1380*x1382))+(((0.156433569372259)*x1374*x1383))+(((0.156433569372259)*cj5*r00*x1374)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1380*x1381))+(((-1.0)*cj7*x1378*x1383))+(((-1.0)*x1374*x1375))+(((-1.0)*x1376*x1377))+((x1379*x1384))+(((-1.0)*r00*x1376*x1378))+((x1382*x1385))+(((-1.0)*cj7*x1386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1387.value)*((((x1381*x1385))+((sj7*x1386))+(((-1.0)*cj6*cj7*x1375))+((x1377*x1379))+((x1376*x1384))+(((-1.0)*x1380*x1382))+(((0.156433569372259)*x1374*x1383))+(((0.156433569372259)*cj5*r00*x1374))))))+IKsqr((((x1380*x1381))+(((-1.0)*cj7*x1378*x1383))+(((-1.0)*x1374*x1375))+(((-1.0)*x1376*x1377))+((x1379*x1384))+(((-1.0)*r00*x1376*x1378))+((x1382*x1385))+(((-1.0)*cj7*x1386))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x1387.value)*((((x1381*x1385))+((sj7*x1386))+(((-1.0)*cj6*cj7*x1375))+((x1377*x1379))+((x1376*x1384))+(((-1.0)*x1380*x1382))+(((0.156433569372259)*x1374*x1383))+(((0.156433569372259)*cj5*r00*x1374))))), (((x1380*x1381))+(((-1.0)*cj7*x1378*x1383))+(((-1.0)*x1374*x1375))+(((-1.0)*x1376*x1377))+((x1379*x1384))+(((-1.0)*r00*x1376*x1378))+((x1382*x1385))+(((-1.0)*cj7*x1386))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1388=IKsin(j9);
IkReal x1389=IKcos(j9);
IkReal x1390=((0.987688482454592)*sj5);
IkReal x1391=((1.0)*sj6);
IkReal x1392=(r01*sj5);
IkReal x1393=(cj5*r00);
IkReal x1394=((0.156433569372259)*cj6);
IkReal x1395=(r02*sj6);
IkReal x1396=(cj5*r01);
IkReal x1397=(cj8*x1388);
evalcond[0]=(((sj7*x1389))+(((-1.0)*x1391*x1392))+(((-1.0)*x1391*x1393))+((cj7*x1397))+((cj6*r02)));
evalcond[1]=(((cj6*r01*x1390))+(((0.987688482454592)*x1395))+(((-0.156433569372259)*x1396))+(((0.987688482454592)*cj6*x1393))+(((-1.0)*sj8*x1388))+(((0.156433569372259)*r00*sj5)));
evalcond[2]=((((0.156433569372259)*x1395))+(((0.987688482454592)*x1396))+((x1393*x1394))+(((-1.0)*sj7*x1397))+((cj7*x1389))+(((-1.0)*r00*x1390))+((x1392*x1394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j5;
vinfos[0].indices[0] = _ij5[0];
vinfos[0].indices[1] = _ij5[1];
vinfos[0].maxsolutions = _nj5;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j6;
vinfos[1].indices[0] = _ij6[0];
vinfos[1].indices[1] = _ij6[1];
vinfos[1].maxsolutions = _nj6;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j7;
vinfos[2].indices[0] = _ij7[0];
vinfos[2].indices[1] = _ij7[1];
vinfos[2].maxsolutions = _nj7;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j8;
vinfos[3].indices[0] = _ij8[0];
vinfos[3].indices[1] = _ij8[1];
vinfos[3].maxsolutions = _nj8;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j9;
vinfos[4].indices[0] = _ij9[0];
vinfos[4].indices[1] = _ij9[1];
vinfos[4].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - JulietteY20MP (fc3bc7cfd2b4af353a0faa6b826118c7)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
